declare namespace Ext.chart.series {
	/** 
	 * [Ext.chart.series.Area](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Area.html)
	 * Creates an Area Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2', 'data3'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 10,
	 *               data2: 12,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 7,
	 *               data2: 8,
	 *               data3: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 5,
	 *               data2: 2,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 2,
	 *               data2: 14,
	 *               data3: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 27,
	 *               data2: 38,
	 *               data3: 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name']
	 *       }],
	 *       series: {
	 *           type: 'area',
	 *           subStyle: {
	 *               fill: ['#0A3F50', '#30BDA7', '#96D4C6']
	 *           },
	 *           xField: 'name',
	 *           yField: ['data1', 'data2', 'data3']
	 *       }
	 *    });
	 * 
	 */
	class Area extends Ext.chart.series.StackedCartesian {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'areaSeries'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'area'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStack? (): boolean;
		/** 
		 * Returns the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStackTotal? (): boolean;
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getHidden? (): any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Area.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getSplitStacks? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getStacked? (): boolean;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStack The new value.
		 * @returns {void}              
		 */
		setFullStack? (fullStack: boolean): void;
		/** 
		 * Sets the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStackTotal The new value.
		 * @returns {void}                   
		 */
		setFullStackTotal? (fullStackTotal: boolean): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {any[]} hidden The new value.
		 * @returns {void}         
		 */
		setHidden? (hidden: any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Area.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @param   {boolean} splitStacks The new value.
		 * @returns {void}                
		 */
		setSplitStacks? (splitStacks: boolean): void;
		/** 
		 * Sets the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @param   {boolean} stacked The new value.
		 * @returns {void}            
		 */
		setStacked? (stacked: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinateStacked? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} labelOverflowPadding
		 * @returns {void}                        
		 */
		updateLabelOverflowPadding? (labelOverflowPadding: object): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSplitStacks? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStacked? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.Bar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar.html)
	 * Creates a Bar or Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar' series is meant to be used with the
	 * ['category'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['name', 'value'],
	 *           data: [{
	 *               name: 'metric one',
	 *               value: 10
	 *           }, {
	 *               name: 'metric two',
	 *               value: 7
	 *           }, {
	 *               name: 'metric three',
	 *               value: 5
	 *           }, {
	 *               name: 'metric four',
	 *               value: 2
	 *           }, {
	 *               name: 'metric five',
	 *               value: 27
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'value'
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar',
	 *           subStyle: {
	 *               fill: ['#388FAD'],
	 *               stroke: '#1F6D91'
	 *           },
	 *           xField: 'name',
	 *           yField: 'value'
	 *       }
	 *    });
	 * 
	 */
	class Bar extends Ext.chart.series.StackedCartesian {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'barSeries'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'bar'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStack? (): boolean;
		/** 
		 * Returns the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStackTotal? (): boolean;
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getHidden? (): any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getSplitStacks? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getStacked? (): boolean;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStack The new value.
		 * @returns {void}              
		 */
		setFullStack? (fullStack: boolean): void;
		/** 
		 * Sets the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStackTotal The new value.
		 * @returns {void}                   
		 */
		setFullStackTotal? (fullStackTotal: boolean): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {any[]} hidden The new value.
		 * @returns {void}         
		 */
		setHidden? (hidden: any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @param   {boolean} splitStacks The new value.
		 * @returns {void}                
		 */
		setSplitStacks? (splitStacks: boolean): void;
		/** 
		 * Sets the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @param   {boolean} stacked The new value.
		 * @returns {void}            
		 */
		setStacked? (stacked: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar.html#cfg-itemInstancing).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar.html#cfg-itemInstancing).
		 * @method
		 * @private (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinateStacked? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} labelOverflowPadding
		 * @returns {void}                        
		 */
		updateLabelOverflowPadding? (labelOverflowPadding: object): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSplitStacks? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} stacked
		 * @returns {void}           
		 */
		updateStacked? (stacked: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.StackedCartesian.updateStacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#method-updateStacked).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStacked? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.Bar3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html)
	 * Creates a 3D Bar or 3D Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar3d' series is meant to be used with the
	 * ['category3d'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: Ext.getBody(),
	 *       width: 600,
	 *       height: 400,
	 *       innerPadding: '0 10 0 10',
	 *       store: {
	 *           fields: ['name', 'apples', 'oranges'],
	 *           data: [{
	 *               name: 'Eric',
	 *               apples: 10,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Mary',
	 *               apples: 7,
	 *               oranges: 2
	 *           }, {
	 *               name: 'John',
	 *               apples: 5,
	 *               oranges: 2
	 *           }, {
	 *               name: 'Bob',
	 *               apples: 2,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Joe',
	 *               apples: 19,
	 *               oranges: 1
	 *           }, {
	 *               name: 'Macy',
	 *               apples: 13,
	 *               oranges: 4
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric3d',
	 *           position: 'left',
	 *           fields: ['apples', 'oranges'],
	 *           title: {
	 *               text: 'Inventory',
	 *               fontSize: 15
	 *           },
	 *           grid: {
	 *               odd: {
	 *                   fillStyle: 'rgba(255, 255, 255, 0.06)'
	 *               },
	 *               even: {
	 *                   fillStyle: 'rgba(0, 0, 0, 0.03)'
	 *               }
	 *           }
	 *       }, {
	 *           type: 'category3d',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'People',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar3d',
	 *           xField: 'name',
	 *           yField: ['apples', 'oranges']
	 *       }
	 *    });
	 * 
	 */
	class Bar3D extends Ext.chart.series.Bar {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'bar3dSeries'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'bar3d'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStack? (): boolean;
		/** 
		 * Returns the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStackTotal? (): boolean;
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getHidden? (): any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html#cfg-highlightCfg).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html#cfg-itemInstancing).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getSplitStacks? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getStacked? (): boolean;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStack The new value.
		 * @returns {void}              
		 */
		setFullStack? (fullStack: boolean): void;
		/** 
		 * Sets the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStackTotal The new value.
		 * @returns {void}                   
		 */
		setFullStackTotal? (fullStackTotal: boolean): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {any[]} hidden The new value.
		 * @returns {void}         
		 */
		setHidden? (hidden: any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html#cfg-highlightCfg).
		 * @method
		 * @public (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html#cfg-itemInstancing).
		 * @method
		 * @public (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @param   {boolean} splitStacks The new value.
		 * @returns {void}                
		 */
		setSplitStacks? (splitStacks: boolean): void;
		/** 
		 * Sets the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @param   {boolean} stacked The new value.
		 * @returns {void}            
		 */
		setStacked? (stacked: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinateStacked? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} labelOverflowPadding
		 * @returns {void}                        
		 */
		updateLabelOverflowPadding? (labelOverflowPadding: object): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSplitStacks? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} stacked
		 * @returns {void}           
		 */
		updateStacked? (stacked: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.StackedCartesian.updateStacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#method-updateStacked).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStacked? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.CandleStick](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html)
	 * Creates a candlestick or OHLC Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['time', 'open', 'high', 'low', 'close'],
	 *           data: [{
	 *               'time': new Date('Jan 1 2010').getTime(),
	 *               'open': 600,
	 *               'high': 614,
	 *               'low': 578,
	 *               'close': 590
	 *           }, {
	 *               'time': new Date('Jan 2 2010').getTime(),
	 *               'open': 590,
	 *               'high': 609,
	 *               'low': 580,
	 *               'close': 580
	 *           }, {
	 *               'time': new Date('Jan 3 2010').getTime(),
	 *               'open': 580,
	 *               'high': 602,
	 *               'low': 578,
	 *               'close': 602
	 *           }, {
	 *               'time': new Date('Jan 4 2010').getTime(),
	 *               'open': 602,
	 *               'high': 614,
	 *               'low': 586,
	 *               'close': 586
	 *           }, {
	 *               'time': new Date('Jan 5 2010').getTime(),
	 *               'open': 586,
	 *               'high': 602,
	 *               'low': 565,
	 *               'close': 565
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['open', 'high', 'low', 'close'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 560,
	 *           maximum: 640
	 *       }, {
	 *           type: 'time',
	 *           position: 'bottom',
	 *           fields: ['time'],
	 *           fromDate: new Date('Dec 31 2009'),
	 *           toDate: new Date('Jan 6 2010'),
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           style: {
	 *               axisLine: false
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'candlestick',
	 *           xField: 'time',
	 *           openField: 'open',
	 *           highField: 'high',
	 *           lowField: 'low',
	 *           closeField: 'close',
	 *           style: {
	 *               dropStyle: {
	 *                   fill: 'rgb(222, 87, 87)',
	 *                   stroke: 'rgb(222, 87, 87)',
	 *                   lineWidth: 3
	 *               },
	 *               raiseStyle: {
	 *                   fill: 'rgb(48, 189, 167)',
	 *                   stroke: 'rgb(48, 189, 167)',
	 *                   lineWidth: 3
	 *               }
	 *           }
	 *       }
	 *    });
	 * 
	 */
	class CandleStick extends Ext.chart.series.Cartesian {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'candlestickSeries'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'candlestick'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @property
		 * @private (property)
		 * @default ['Open', 'High', 'Low', 'Close']
		 * @type {any[]}
		 */
		fieldCategoryY?: any[];
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [closeField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-closeField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getCloseField? (): string;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-highField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHighField? (): string;
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [lowField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-lowField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getLowField? (): string;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [openField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-openField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getOpenField? (): string;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [closeField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-closeField).
		 * @method
		 * @public (method)
		 * @param   {string} closeField The new value.
		 * @returns {void}              
		 */
		setCloseField? (closeField: string): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-highField).
		 * @method
		 * @public (method)
		 * @param   {string} highField The new value.
		 * @returns {void}             
		 */
		setHighField? (highField: string): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [lowField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-lowField).
		 * @method
		 * @public (method)
		 * @param   {string} lowField The new value.
		 * @returns {void}            
		 */
		setLowField? (lowField: string): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [openField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html#cfg-openField).
		 * @method
		 * @public (method)
		 * @param   {string} openField The new value.
		 * @returns {void}             
		 */
		setOpenField? (openField: string): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.Cartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html)
	 * Common base class for series implementations that plot values using cartesian coordinates.
	 */
	class Cartesian extends Ext.chart.series.Series {
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * Tells which store record fields should be used for a specific axis direction. E.g. for
		 * 
		 *    fieldCategory&lt;direction&gt;: ['&lt;fieldConfig1&gt;', '&lt;fieldConfig2&gt;', ...]
		 * 
		 * the field names from the following configs will be used:
		 * 
		 *    series.&lt;fieldConfig1&gt;Field, series.&lt;fieldConfig2&gt;Field, ...
		 * 
		 * @property
		 * @private (property)
		 * @default ['X']
		 * @type {any[]}
		 */
		fieldCategoryX?: any[];
		/** 
		 * @property
		 * @private (property)
		 * @default ['Y']
		 * @type {any[]}
		 */
		fieldCategoryY?: any[];
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.Gauge](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html)
	 * Creates a Gauge Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['mph', 'fuel', 'temp', 'rpm'],
	 *           data: [{
	 *               mph: 65,
	 *               fuel: 50,
	 *               temp: 150,
	 *               rpm: 6000
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'gauge',
	 *           colors: ['#1F6D91', '#90BCC9'],
	 *           angleField: 'mph',
	 *           needle: true,
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	class Gauge extends Ext.chart.series.Series {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'pieslice'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'gauge'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @method
		 * @public (method)
		 * @param   {object} config
		 */
		constructor (config: object);
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-center).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getCenter? (): any[];
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [donut](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-donut).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getDonut? (): number;
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [maximum](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-maximum).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getMaximum? (): number;
		/** 
		 * Returns the value of [minimum](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-minimum).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getMinimum? (): number;
		/** 
		 * Returns the value of [needle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-needle).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getNeedle? (): boolean;
		/** 
		 * Returns the value of [needleLength](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-needleLength).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getNeedleLength? (): number;
		/** 
		 * Returns the value of [needleWidth](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-needleWidth).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getNeedleWidth? (): number;
		/** 
		 * Returns the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRadius? (): number;
		/** 
		 * Returns the value of [rect](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-rect).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getRect? (): any[];
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRotation? (): number;
		/** 
		 * Returns the value of [sectors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-sectors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getSectors? (): any[];
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [totalAngle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-totalAngle).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getTotalAngle? (): number;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [value](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-value).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getValue? (): number;
		/** 
		 * Returns the value of [wholeDisk](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-wholeDisk).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getWholeDisk? (): boolean;
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-center).
		 * @method
		 * @public (method)
		 * @param   {any[]} center The new value.
		 * @returns {void}         
		 */
		setCenter? (center: any[]): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [donut](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-donut).
		 * @method
		 * @public (method)
		 * @param   {number} donut The new value.
		 * @returns {void}         
		 */
		setDonut? (donut: number): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [maximum](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-maximum).
		 * @method
		 * @public (method)
		 * @param   {number} maximum The new value.
		 * @returns {void}           
		 */
		setMaximum? (maximum: number): void;
		/** 
		 * Sets the value of [minimum](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-minimum).
		 * @method
		 * @public (method)
		 * @param   {number} minimum The new value.
		 * @returns {void}           
		 */
		setMinimum? (minimum: number): void;
		/** 
		 * Sets the value of [needle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-needle).
		 * @method
		 * @public (method)
		 * @param   {boolean} needle The new value.
		 * @returns {void}           
		 */
		setNeedle? (needle: boolean): void;
		/** 
		 * Sets the value of [needleLength](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-needleLength).
		 * @method
		 * @public (method)
		 * @param   {number} needleLength The new value.
		 * @returns {void}                
		 */
		setNeedleLength? (needleLength: number): void;
		/** 
		 * Sets the value of [needleWidth](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-needleWidth).
		 * @method
		 * @public (method)
		 * @param   {number} needleWidth The new value.
		 * @returns {void}               
		 */
		setNeedleWidth? (needleWidth: number): void;
		/** 
		 * Sets the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @param   {number} radius The new value.
		 * @returns {void}          
		 */
		setRadius? (radius: number): void;
		/** 
		 * Sets the value of [rect](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-rect).
		 * @method
		 * @public (method)
		 * @param   {any[]} rect The new value.
		 * @returns {void}       
		 */
		setRect? (rect: any[]): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @param   {number} rotation The new value.
		 * @returns {void}            
		 */
		setRotation? (rotation: number): void;
		/** 
		 * Sets the value of [sectors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-sectors).
		 * @method
		 * @public (method)
		 * @param   {any[]} sectors The new value.
		 * @returns {void}          
		 */
		setSectors? (sectors: any[]): void;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [totalAngle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-totalAngle).
		 * @method
		 * @public (method)
		 * @param   {number} totalAngle The new value.
		 * @returns {void}              
		 */
		setTotalAngle? (totalAngle: number): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [value](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-value).
		 * @method
		 * @public (method)
		 * @param   {number} value The new value.
		 * @returns {void}         
		 */
		setValue? (value: number): void;
		/** 
		 * Sets the value of [wholeDisk](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-wholeDisk).
		 * @method
		 * @public (method)
		 * @param   {boolean} wholeDisk The new value.
		 * @returns {void}              
		 */
		setWholeDisk? (wholeDisk: boolean): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @param   {object} oldColors
		 * @returns {void}             
		 */
		updateColors? (colors: object, oldColors: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.updateColors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-updateColors).
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
	}
	/** 
	 * [Ext.chart.series.Line](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html)
	 * Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different
	 * categories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.
	 * As with all other series, the Line Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the line series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: [{
	 *           type: 'line',
	 *           style: {
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2
	 *           },
	 *           xField: 'name',
	 *           yField: 'data1',
	 *           marker: {
	 *               type: 'path',
	 *               path: ['M', - 4, 0, 0, 4, 4, 0, 0, - 4, 'Z'],
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }, {
	 *           type: 'line',
	 *           fill: true,
	 *           style: {
	 *               fill: '#96D4C6',
	 *               fillOpacity: .6,
	 *               stroke: '#0A3F50',
	 *               strokeOpacity: .6,
	 *           },
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               radius: 4,
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }]
	 *    });
	 * 
	 * In this configuration we're adding two series (or lines), one bound to the `data1`
	 * property of the store and the other to `data3`. The type for both configurations is
	 * `line`. The `xField` for both series is the same, the `name` property of the store.
	 * Both line series share the same axis, the left axis. You can set particular marker
	 * configuration by adding properties onto the marker object. Both series have
	 * an object as highlight so that markers animate smoothly to the properties in highlight
	 * when hovered. The second series has `fill = true` which means that the line will also
	 * have an area below it of the same color.
	 * 
	 * **Note:** In the series definition remember to explicitly set the axis to bind the
	 * values of the line series to. This can be done by using the `axis` configuration property.
	 */
	class Line extends Ext.chart.series.Cartesian {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'lineSeries'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'line'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [aggregator](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-aggregator).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getAggregator? (): object;
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [fill](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-fill).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFill? (): boolean;
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [selectionTolerance](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-selectionTolerance).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getSelectionTolerance? (): number;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns the value of [smooth](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-smooth).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getSmooth? (): boolean | number;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [step](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-step).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getStep? (): boolean;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [aggregator](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-aggregator).
		 * @method
		 * @public (method)
		 * @param   {object} aggregator The new value.
		 * @returns {void}              
		 */
		setAggregator? (aggregator: object): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [fill](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-fill).
		 * @method
		 * @public (method)
		 * @param   {boolean} fill The new value.
		 * @returns {void}         
		 */
		setFill? (fill: boolean): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [selectionTolerance](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-selectionTolerance).
		 * @method
		 * @public (method)
		 * @param   {number} selectionTolerance The new value.
		 * @returns {void}                      
		 */
		setSelectionTolerance? (selectionTolerance: number): void;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [smooth](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-smooth).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} smooth The new value.
		 * @returns {void}                  
		 */
		setSmooth? (smooth: boolean | number): void;
		/** 
		 * Sets the value of [step](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-step).
		 * @method
		 * @public (method)
		 * @param   {boolean} step The new value.
		 * @returns {void}         
		 */
		setStep? (step: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * Override [Ext.chart.series.Series.getDefaultSpriteConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getDefaultSpriteConfig)
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.Pie](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html)
	 * Creates a Pie Chart. A Pie Chart is a useful visualization technique to display
	 * quantitative information for different categories that also have a meaning as a whole.
	 * As with all other series, the Pie Series must be appended in the _series_ Chart array
	 * configuration. See the Chart documentation for more information. A typical configuration
	 * object for the pie series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar',
	 *       renderTo: document.body,
	 *       width: 400,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: ['rotate', 'itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie',
	 *           highlight: true,
	 *           angleField: 'data1',
	 *           label: {
	 *               field: 'name',
	 *               display: 'rotate'
	 *           },
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 * In this configuration we set `pie` as the type for the series, then set the `highlight` config
	 * to `true` (we can also specify an object with specific style properties for highlighting options)
	 * which is triggered when hovering or tapping elements.
	 * We set `data1` as the value of the `angleField` to determine the angle span for each pie slice.
	 * We also set a label configuration object where we set the name of the store field
	 * to be rendered as text for the label. The labels will also be displayed rotated.
	 * And finally, we specify the donut hole radius for the pie series in percentages of the series radius.
	 */
	class Pie extends Ext.chart.series.Polar {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'pieslice'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'pie'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * Series, where the number of sprites (an so unique colors they require)
		 * depends on the number of records in the store should set this to 'true'.
		 * @property
		 * @private (property)
		 * @default true
		 * @type {boolean}
		 */
		isStoreDependantColorCount?: boolean;
		/** 
		 * @method
		 * @public (method)
		 * @param   {object} config
		 */
		constructor (config: object);
		/** 
		 * Returns the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getAngleField? (): string;
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getCenter? (): any[];
		/** 
		 * Returns the value of [clockwise](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-clockwise).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getClockwise? (): boolean;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [donut](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-donut).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getDonut? (): number;
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * Returns the pie slice for a given angle
		 * @method
		 * @public (method)
		 * @param   {number} angle The angle to search for the slice
		 * @returns {object}       An object containing the reocord, sprite, scope etc.
		 */
		getItemForAngle? (angle: number): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetX? (): number;
		/** 
		 * Returns the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetY? (): number;
		/** 
		 * Returns the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRadius? (): number;
		/** 
		 * Returns the value of [radiusFactor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-radiusFactor).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRadiusFactor? (): number;
		/** 
		 * Returns the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getRadiusField? (): string;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRotation? (): number;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [totalAngle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-totalAngle).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getTotalAngle? (): number;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getXAxis? (): object;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getYAxis? (): object;
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @param   {string} angleField The new value.
		 * @returns {void}              
		 */
		setAngleField? (angleField: string): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @param   {any[]} center The new value.
		 * @returns {void}         
		 */
		setCenter? (center: any[]): void;
		/** 
		 * Sets the value of [clockwise](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-clockwise).
		 * @method
		 * @public (method)
		 * @param   {boolean} clockwise The new value.
		 * @returns {void}              
		 */
		setClockwise? (clockwise: boolean): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [donut](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-donut).
		 * @method
		 * @public (method)
		 * @param   {number} donut The new value.
		 * @returns {void}         
		 */
		setDonut? (donut: number): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @param   {number} offsetX The new value.
		 * @returns {void}           
		 */
		setOffsetX? (offsetX: number): void;
		/** 
		 * Sets the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @param   {number} offsetY The new value.
		 * @returns {void}           
		 */
		setOffsetY? (offsetY: number): void;
		/** 
		 * Sets the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @param   {number} radius The new value.
		 * @returns {void}          
		 */
		setRadius? (radius: number): void;
		/** 
		 * Sets the value of [radiusFactor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-radiusFactor).
		 * @method
		 * @public (method)
		 * @param   {number} radiusFactor The new value.
		 * @returns {void}                
		 */
		setRadiusFactor? (radiusFactor: number): void;
		/** 
		 * Sets the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @param   {string} radiusField The new value.
		 * @returns {void}               
		 */
		setRadiusField? (radiusField: string): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @param   {number} rotation The new value.
		 * @returns {void}            
		 */
		setRotation? (rotation: number): void;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [totalAngle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html#cfg-totalAngle).
		 * @method
		 * @public (method)
		 * @param   {number} totalAngle The new value.
		 * @returns {void}              
		 */
		setTotalAngle? (totalAngle: number): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {object} xAxis The new value.
		 * @returns {void}         
		 */
		setXAxis? (xAxis: object): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {object} yAxis The new value.
		 * @returns {void}         
		 */
		setYAxis? (yAxis: object): void;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		applyRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xField).
		 * @method
		 * @private (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yField).
		 * @method
		 * @private (method)
		 * @param   {string} yField The new value.
		 * @returns {void}          
		 */
		setYField? (yField: string): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		updateRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateXField? (value: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateYField? (value: object): void;
	}
	/** 
	 * [Ext.chart.series.Pie3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html)
	 * Creates a 3D Pie Chart.
	 * 
	 * **Note:** Labels, legends, and lines are not currently available when using the
	 * 3D Pie chart series.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['data3'],
	 *           data: [{
	 *               'data3': 14
	 *           }, {
	 *               'data3': 16
	 *           }, {
	 *               'data3': 14
	 *           }, {
	 *               'data3': 6
	 *           }, {
	 *               'data3': 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie3d',
	 *           angleField: 'data3',
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	class Pie3D extends Ext.chart.series.Polar {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'pie3d'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'pie3d'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * Series, where the number of sprites (an so unique colors they require)
		 * depends on the number of records in the store should set this to 'true'.
		 * @property
		 * @private (property)
		 * @default true
		 * @type {boolean}
		 */
		isStoreDependantColorCount?: boolean;
		/** 
		 * @method
		 * @public (method)
		 * @param   {object} config
		 */
		constructor (config: object);
		/** 
		 * Returns the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getAngleField? (): string;
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getCenter? (): any[];
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [distortion](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-distortion).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getDistortion? (): number;
		/** 
		 * Returns the value of [donut](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-donut).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getDonut? (): boolean | number;
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-highlightCfg).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetX? (): number;
		/** 
		 * Returns the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetY? (): number;
		/** 
		 * Returns the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRadius? (): number;
		/** 
		 * Returns the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getRadiusField? (): string;
		/** 
		 * Returns the value of [rect](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-rect).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getRect? (): any[];
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRotation? (): number;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [thickness](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-thickness).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getThickness? (): number;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getXAxis? (): object;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getYAxis? (): object;
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @param   {string} angleField The new value.
		 * @returns {void}              
		 */
		setAngleField? (angleField: string): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @param   {any[]} center The new value.
		 * @returns {void}         
		 */
		setCenter? (center: any[]): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [distortion](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-distortion).
		 * @method
		 * @public (method)
		 * @param   {number} distortion The new value.
		 * @returns {void}              
		 */
		setDistortion? (distortion: number): void;
		/** 
		 * Sets the value of [donut](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-donut).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} donut The new value.
		 * @returns {void}                 
		 */
		setDonut? (donut: boolean | number): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-highlightCfg).
		 * @method
		 * @public (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @param   {number} offsetX The new value.
		 * @returns {void}           
		 */
		setOffsetX? (offsetX: number): void;
		/** 
		 * Sets the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @param   {number} offsetY The new value.
		 * @returns {void}           
		 */
		setOffsetY? (offsetY: number): void;
		/** 
		 * Sets the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @param   {number} radius The new value.
		 * @returns {void}          
		 */
		setRadius? (radius: number): void;
		/** 
		 * Sets the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @param   {string} radiusField The new value.
		 * @returns {void}               
		 */
		setRadiusField? (radiusField: string): void;
		/** 
		 * Sets the value of [rect](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-rect).
		 * @method
		 * @public (method)
		 * @param   {any[]} rect The new value.
		 * @returns {void}       
		 */
		setRect? (rect: any[]): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @param   {number} rotation The new value.
		 * @returns {void}            
		 */
		setRotation? (rotation: number): void;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [thickness](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-thickness).
		 * @method
		 * @public (method)
		 * @param   {number} thickness The new value.
		 * @returns {void}             
		 */
		setThickness? (thickness: number): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {object} xAxis The new value.
		 * @returns {void}         
		 */
		setXAxis? (xAxis: object): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {object} yAxis The new value.
		 * @returns {void}         
		 */
		setYAxis? (yAxis: object): void;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		applyRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * This is a temporary solution until the Series.getStyleByIndex is fixed
		 * to give user styles the priority over theme ones. Also, for sprites of
		 * this particular series, the fillStyle shouldn't be set directly. Instead,
		 * the 'baseColor' attribute should be set, from which the stops of the
		 * gradient (used for fillStyle) will be calculated. Themes can't handle
		 * situations like that properly.
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xField).
		 * @method
		 * @private (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yField).
		 * @method
		 * @private (method)
		 * @param   {string} yField The new value.
		 * @returns {void}          
		 */
		setYField? (yField: string): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		updateRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateXField? (value: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateYField? (value: object): void;
	}
	/** 
	 * [Ext.chart.series.Polar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html)
	 * Common base class for series implementations that plot values using polar coordinates.
	 */
	class Polar extends Ext.chart.series.Series {
		/** 
		 * @property
		 * @private (property)
		 * @default {field: 'angleField', lengthField: 'radiusField'}
		 * @type {object}
		 */
		deprecatedConfigs?: object;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @property
		 * @private (property)
		 * @default ['X']
		 * @type {any[]}
		 */
		fieldCategoryX?: any[];
		/** 
		 * @property
		 * @private (property)
		 * @default ['Y']
		 * @type {any[]}
		 */
		fieldCategoryY?: any[];
		/** 
		 * Series, where the number of sprites (an so unique colors they require)
		 * depends on the number of records in the store should set this to 'true'.
		 * @property
		 * @private (property)
		 * @default true
		 * @type {boolean}
		 */
		isStoreDependantColorCount?: boolean;
		/** 
		 * Returns the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getAngleField? (): string;
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getCenter? (): any[];
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetX? (): number;
		/** 
		 * Returns the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetY? (): number;
		/** 
		 * Returns the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRadius? (): number;
		/** 
		 * Returns the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getRadiusField? (): string;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRotation? (): number;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getXAxis? (): object;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getYAxis? (): object;
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @param   {string} angleField The new value.
		 * @returns {void}              
		 */
		setAngleField? (angleField: string): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @param   {any[]} center The new value.
		 * @returns {void}         
		 */
		setCenter? (center: any[]): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @param   {number} offsetX The new value.
		 * @returns {void}           
		 */
		setOffsetX? (offsetX: number): void;
		/** 
		 * Sets the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @param   {number} offsetY The new value.
		 * @returns {void}           
		 */
		setOffsetY? (offsetY: number): void;
		/** 
		 * Sets the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @param   {number} radius The new value.
		 * @returns {void}          
		 */
		setRadius? (radius: number): void;
		/** 
		 * Sets the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @param   {string} radiusField The new value.
		 * @returns {void}               
		 */
		setRadiusField? (radiusField: string): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @param   {number} rotation The new value.
		 * @returns {void}            
		 */
		setRotation? (rotation: number): void;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {object} xAxis The new value.
		 * @returns {void}         
		 */
		setXAxis? (xAxis: object): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {object} yAxis The new value.
		 * @returns {void}         
		 */
		setYAxis? (yAxis: object): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		applyRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xField).
		 * @method
		 * @private (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yField).
		 * @method
		 * @private (method)
		 * @param   {string} yField The new value.
		 * @returns {void}          
		 */
		setYField? (yField: string): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		updateRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateXField? (value: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateYField? (value: object): void;
	}
	/** 
	 * [Ext.chart.series.Radar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Radar.html)
	 * Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for
	 * a constrained number of categories.
	 * As with all other series, the Radar series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the radar series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 500,
	 *       height: 400,
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 8
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 10
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 12
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 1
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 13
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'radar',
	 *           angleField: 'name',
	 *           radiusField: 'data1',
	 *           style: {
	 *               fillStyle: '#388FAD',
	 *               fillOpacity: .1,
	 *               strokeStyle: '#388FAD',
	 *               strokeOpacity: .8,
	 *               lineWidth: 1
	 *           }
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'radial',
	 *           fields: 'data1',
	 *           style: {
	 *               estStepSize: 10
	 *           },
	 *           grid: true
	 *       }, {
	 *           type: 'category',
	 *           position: 'angular',
	 *           fields: 'name',
	 *           style: {
	 *               estStepSize: 1
	 *           },
	 *           grid: true
	 *       }]
	 *    });
	 * 
	 */
	class Radar extends Ext.chart.series.Polar {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'radar'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'radar'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * Series, where the number of sprites (an so unique colors they require)
		 * depends on the number of records in the store should set this to 'true'.
		 * @property
		 * @private (property)
		 * @default false
		 * @type {boolean}
		 */
		isStoreDependantColorCount?: boolean;
		/** 
		 * @method
		 * @public (method)
		 * @param   {object} config
		 */
		constructor (config: object);
		/** 
		 * Returns the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getAngleField? (): string;
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getCenter? (): any[];
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetX? (): number;
		/** 
		 * Returns the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getOffsetY? (): number;
		/** 
		 * Returns the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRadius? (): number;
		/** 
		 * Returns the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getRadiusField? (): string;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getRotation? (): number;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getXAxis? (): object;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getYAxis? (): object;
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-angleField).
		 * @method
		 * @public (method)
		 * @param   {string} angleField The new value.
		 * @returns {void}              
		 */
		setAngleField? (angleField: string): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [center](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-center).
		 * @method
		 * @public (method)
		 * @param   {any[]} center The new value.
		 * @returns {void}         
		 */
		setCenter? (center: any[]): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [offsetX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetX).
		 * @method
		 * @public (method)
		 * @param   {number} offsetX The new value.
		 * @returns {void}           
		 */
		setOffsetX? (offsetX: number): void;
		/** 
		 * Sets the value of [offsetY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-offsetY).
		 * @method
		 * @public (method)
		 * @param   {number} offsetY The new value.
		 * @returns {void}           
		 */
		setOffsetY? (offsetY: number): void;
		/** 
		 * Sets the value of [radius](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radius).
		 * @method
		 * @public (method)
		 * @param   {number} radius The new value.
		 * @returns {void}          
		 */
		setRadius? (radius: number): void;
		/** 
		 * Sets the value of [radiusField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-radiusField).
		 * @method
		 * @public (method)
		 * @param   {string} radiusField The new value.
		 * @returns {void}               
		 */
		setRadiusField? (radiusField: string): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-rotation).
		 * @method
		 * @public (method)
		 * @param   {number} rotation The new value.
		 * @returns {void}            
		 */
		setRotation? (rotation: number): void;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {object} xAxis The new value.
		 * @returns {void}         
		 */
		setXAxis? (xAxis: object): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {object} yAxis The new value.
		 * @returns {void}         
		 */
		setYAxis? (yAxis: object): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		applyRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYField? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-xField).
		 * @method
		 * @private (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html#cfg-yField).
		 * @method
		 * @private (method)
		 * @param   {string} yField The new value.
		 * @returns {void}          
		 */
		setYField? (yField: string): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} rotation
		 * @returns {void}            
		 */
		updateRotation? (rotation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateXField? (value: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} value
		 * @returns {void}         
		 */
		updateYField? (value: object): void;
	}
	/** 
	 * [Ext.chart.series.Scatter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Scatter.html)
	 * Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.
	 * These variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.
	 * As with all other series, the Scatter Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information on creating charts. A typical configuration object for the scatter could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       interactions: ['itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'scatter',
	 *           highlight: {
	 *               size: 12,
	 *               radius: 12,
	 *               fill: '#96D4C6',
	 *               stroke: '#30BDA7'
	 *           },
	 *           fill: true,
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               fill: '#30BDA7',
	 *               radius: 10,
	 *               lineWidth: 0
	 *           }
	 *       }
	 *    });
	 * 
	 * In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,
	 * `data1`, `data2` and `data3` respectively. All x-fields for the series must be the same field, in this case `name`.
	 * Each scatter series has a different styling configuration for markers, specified by the `marker` object. Finally we set the left axis as
	 * axis to show the current values of the elements.
	 */
	class Scatter extends Ext.chart.series.Cartesian {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'scatterSeries'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @default 'scatter'
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Scatter.html#cfg-itemInstancing).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Scatter.html#cfg-itemInstancing).
		 * @method
		 * @public (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
	/** 
	 * [Ext.chart.series.Series](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html)
	 * Series is the abstract class containing the common logic to all chart series. Series includes
	 * methods from Labels, Highlights, and Callouts mixins. This class implements the logic of
	 * animating, hiding, showing all elements and returning the color of the series to be used as a legend item.
	 * 
	 * ## Listeners
	 * 
	 * The series class supports listeners via the Observable syntax.
	 * 
	 * For example:
	 * 
	 *    Ext.create('Ext.chart.CartesianChart', {
	 *        plugins: {
	 *            ptype: 'chartitemevents',
	 *            moveEvents: true
	 *        },
	 *        store: {
	 *            fields: ['pet', 'households', 'total'],
	 *            data: [
	 *                {pet: 'Cats', households: 38, total: 93},
	 *                {pet: 'Dogs', households: 45, total: 79},
	 *                {pet: 'Fish', households: 13, total: 171}
	 *            ]
	 *        },
	 *        axes: [{
	 *            type: 'numeric',
	 *            position: 'left'
	 *        }, {
	 *            type: 'category',
	 *            position: 'bottom'
	 *        }],
	 *        series: [{
	 *            type: 'bar',
	 *            xField: 'pet',
	 *            yField: 'households',
	 *            listeners: {
	 *                itemmousemove: function (series, item, event) {
	 *                    console.log('itemmousemove', item.category, item.field);
	 *                }
	 *            }
	 *        }, {
	 *            type: 'line',
	 *            xField: 'pet',
	 *            yField: 'total',
	 *            marker: true
	 *        }]
	 *    });
	 * 
	 */
	class Series extends Ext.Base {
		/** 
		 * Default series sprite type.
		 * @property
		 * @public (property)
		 * @default 'sprite'
		 * @type {string}
		 */
		seriesType?: string;
		/** 
		 * The type of series. Set in subclasses.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		type?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default 0.15
		 * @type {number}
		 */
		darkerStrokeRatio?: number;
		/** 
		 * @property
		 * @private (property)
		 * @default 'store'
		 * @type {string}
		 */
		defaultBindProperty?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default []
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @property
		 * @private (property)
		 * @default 'ext-line-'
		 * @type {string}
		 */
		identifiablePrefix?: string;
		/** 
		 * @property
		 * @private (property)
		 * @default true
		 * @type {boolean}
		 */
		isSeries?: boolean;
		/** 
		 * Series, where the number of sprites (an so unique colors they require)
		 * depends on the number of records in the store should set this to 'true'.
		 * @property
		 * @private (property)
		 * @default false
		 * @type {boolean}
		 */
		isStoreDependantColorCount?: boolean;
		/** 
		 * @property
		 * @private (property)
		 * @default 'series'
		 * @type {string}
		 */
		observableType?: string;
		/** 
		 * @property
		 * @private (property)
		 * @type {object}
		 */
		sprites?: object;
		/** 
		 * @property
		 * @private (property)
		 * @default {}
		 * @type {object}
		 */
		themeOnlyIfConfigured?: object;
		/** 
		 * @method
		 * @public (method)
		 * @param   {object} config
		 */
		constructor (config: object);
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @returns {boolean|any[]}  
		 */
		getHidden? (): boolean | any[];
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden).
		 * @method
		 * @public (method)
		 * @param   {boolean|any[]} hidden The new value.
		 * @returns {void}                 
		 */
		setHidden? (hidden: boolean | any[]): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
	}
	/** 
	 * [Ext.chart.series.StackedCartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html)
	 * Abstract class for all the stacked cartesian series including area series
	 * and bar series.
	 */
	class StackedCartesian extends Ext.chart.series.Cartesian {
		/** 
		 * @property
		 * @private (property)
		 * @default ['X', 'Y']
		 * @type {any[]}
		 */
		directions?: any[];
		/** 
		 * @property
		 * @private (property)
		 * @default 0
		 * @type {number}
		 */
		spriteAnimationCount?: number;
		/** 
		 * @method
		 * @public (method)
		 */
		constructor ();
		/** 
		 * Returns the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getBackground? (): object;
		/** 
		 * Returns the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @returns {any[]}  
		 */
		getColors? (): any[];
		/** 
		 * Returns the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStack? (): boolean;
		/** 
		 * Returns the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getFullStackTotal? (): boolean;
		/** 
		 * Returns the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @returns {boolean|object}  
		 */
		getHighlight? (): boolean | object;
		/** 
		 * Returns the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getHighlightItem? (): object;
		/** 
		 * Returns a series item by index and (optional) category.
		 * @method
		 * @public (method)
		 * @param   {number} index      The index of the item (matches store record index).
		 * @param   {string} [category] The category of item, e.g.: 'items', 'markers', 'sprites'.
		 * @returns {object}            item
		 */
		getItemByIndex? (index: number, category?: string): object;
		/** 
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {object} x
		 * @param   {object} y
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: object, y: object): object;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.getItemForPoint](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-getItemForPoint).
		 * For a given x/y point relative to the main rect, find a corresponding item from this
		 * series, if any.
		 * @method
		 * @public (method)
		 * @param   {number} x
		 * @param   {number} y
		 * @param   {object} [target] optional target to receive the result
		 * @returns {object} 
		 * An object describing the item, or null if there is no matching item. The exact contents of
		 * this object will vary by series type, but should always contain at least the following:
		 */
		getItemForPoint? (x: number, y: number, target?: object): object;
		/** 
		 * Returns the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getLabel? (): object;
		/** 
		 * Returns the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getLabelOverflowPadding? (): number;
		/** 
		 * Returns the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @returns {object|boolean}  
		 */
		getMarker? (): object | boolean;
		/** 
		 * Returns the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getMarkerSubStyle? (): object;
		/** 
		 * Returns the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @returns {Function}  
		 */
		getRenderer? (): ExtGlobalFunction;
		/** 
		 * Returns the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowInLegend? (): boolean;
		/** 
		 * Returns the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getShowMarkers? (): boolean;
		/** 
		 * Returns the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getSplitStacks? (): boolean;
		/** 
		 * Returns sprites the are used to draw this series.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getSprites? (): void;
		/** 
		 * Returns the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		getStacked? (): boolean;
		/** 
		 * Returns the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getStyle? (): object;
		/** 
		 * Returns the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getSubStyle? (): object;
		/** 
		 * Returns the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getTitle? (): string | string[];
		/** 
		 * Returns the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @returns {object}  
		 */
		getTooltip? (): object;
		/** 
		 * Returns the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @returns {boolean|number}  
		 */
		getUseDarkerStrokeColor? (): boolean | number;
		/** 
		 * Returns the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getXAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getXField? (): string;
		/** 
		 * Returns the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @returns {Ext.chart.axis.Axis|number|string}  
		 */
		getYAxis? (): Ext.chart.axis.Axis | number | string;
		/** 
		 * Returns the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @returns {string|string[]}  
		 */
		getYField? (): string | string[];
		/** 
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {object} target
		 * @returns {void}          
		 */
		provideLegendInfo? (target: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.chart.series.Series.provideLegendInfo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-provideLegendInfo).
		 * Provide legend information to target array.
		 * @method
		 * @public (method)
		 * @param   {any[]} target The information consists:
		 * @returns {void}         
		 */
		provideLegendInfo? (target: any[]): void;
		/** 
		 * Sets the value of [animation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-animation).
		 * @method
		 * @public (method)
		 * @param   {object} animation The new value.
		 * @returns {void}             
		 */
		setAnimation? (animation: object): void;
		/** 
		 * Sets the value of [background](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-background).
		 * @method
		 * @public (method)
		 * @param   {object} background The new value.
		 * @returns {void}              
		 */
		setBackground? (background: object): void;
		/** 
		 * Sets the value of [colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors).
		 * @method
		 * @public (method)
		 * @param   {any[]} colors The new value.
		 * @returns {void}         
		 */
		setColors? (colors: any[]): void;
		/** 
		 * Sets the value of [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStack The new value.
		 * @returns {void}              
		 */
		setFullStack? (fullStack: boolean): void;
		/** 
		 * Sets the value of [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal).
		 * @method
		 * @public (method)
		 * @param   {boolean} fullStackTotal The new value.
		 * @returns {void}                   
		 */
		setFullStackTotal? (fullStackTotal: boolean): void;
		/** 
		 * @method
		 * @public (method)
		 * @param   {number}  index
		 * @param   {boolean} value
		 * @returns {void}          
		 */
		setHiddenByIndex? (index: number, value: boolean): void;
		/** 
		 * Sets the value of [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight).
		 * @method
		 * @public (method)
		 * @param   {boolean|object} highlight The new value.
		 * @returns {void}                     
		 */
		setHighlight? (highlight: boolean | object): void;
		/** 
		 * Sets the value of [highlightItem](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightItem).
		 * @method
		 * @public (method)
		 * @param   {object} highlightItem The new value.
		 * @returns {void}                 
		 */
		setHighlightItem? (highlightItem: object): void;
		/** 
		 * Sets the value of [label](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-label).
		 * @method
		 * @public (method)
		 * @param   {object}        label The new value.
		 * @returns {object|string} 
		 * The attributes that have been changed or added, or the text for the label.
		 * Example to enclose every other label in parentheses:
		 * 
		 *     renderer: function (text) {
		 *         if (index % 2 == 0) {
		 *             return '(' + text + ')'
		 *         }
		 *     }
		 * 
		 * Default value: null.
		 */
		setLabel? (label: object): object | string;
		/** 
		 * Sets the value of [labelOverflowPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-labelOverflowPadding).
		 * @method
		 * @public (method)
		 * @param   {number} labelOverflowPadding The new value.
		 * @returns {void}                        
		 */
		setLabelOverflowPadding? (labelOverflowPadding: number): void;
		/** 
		 * Sets the value of [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker).
		 * @method
		 * @public (method)
		 * @param   {object|boolean} marker The new value.
		 * @returns {void}                  
		 */
		setMarker? (marker: object | boolean): void;
		/** 
		 * Sets the value of [markerSubStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-markerSubStyle).
		 * @method
		 * @public (method)
		 * @param   {object} markerSubStyle The new value.
		 * @returns {void}                  
		 */
		setMarkerSubStyle? (markerSubStyle: object): void;
		/** 
		 * Sets the value of [renderer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-renderer).
		 * @method
		 * @public (method)
		 * @param   {Function} renderer The new value.
		 * @returns {object}   
		 * The attributes that have been changed or added. Note: it is usually possible to
		 * add or modify the attributes directly into the `config` parameter and not return anything,
		 * but returning an object with only those attributes that have been changed may allow for
		 * optimizations in the rendering of some series. Example to draw every other marker in red:
		 * 
		 *     renderer: function (sprite, config, rendererData, index) {
		 *         if (config.type === 'marker') {
		 *             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };
		 *         }
		 *     }
		 * 
		 */
		setRenderer? (renderer: ExtGlobalFunction): object;
		/** 
		 * Sets the value of [showInLegend](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showInLegend).
		 * @method
		 * @public (method)
		 * @param   {boolean} showInLegend The new value.
		 * @returns {void}                 
		 */
		setShowInLegend? (showInLegend: boolean): void;
		/** 
		 * Sets the value of [showMarkers](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-showMarkers).
		 * @method
		 * @public (method)
		 * @param   {boolean} showMarkers The new value.
		 * @returns {void}                
		 */
		setShowMarkers? (showMarkers: boolean): void;
		/** 
		 * Sets the value of [splitStacks](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-splitStacks).
		 * @method
		 * @public (method)
		 * @param   {boolean} splitStacks The new value.
		 * @returns {void}                
		 */
		setSplitStacks? (splitStacks: boolean): void;
		/** 
		 * Sets the value of [stacked](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-stacked).
		 * @method
		 * @public (method)
		 * @param   {boolean} stacked The new value.
		 * @returns {void}            
		 */
		setStacked? (stacked: boolean): void;
		/** 
		 * Sets the value of [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-style).
		 * @method
		 * @public (method)
		 * @param   {object} style The new value.
		 * @returns {void}         
		 */
		setStyle? (style: object): void;
		/** 
		 * Sets the value of [subStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-subStyle).
		 * @method
		 * @public (method)
		 * @param   {object} subStyle The new value.
		 * @returns {void}            
		 */
		setSubStyle? (subStyle: object): void;
		/** 
		 * Sets the value of [title](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-title).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} title The new value.
		 * @returns {void}                  
		 */
		setTitle? (title: string | string[]): void;
		/** 
		 * Sets the value of [tooltip](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-tooltip).
		 * @method
		 * @public (method)
		 * @param   {object} tooltip The new value.
		 * @returns {void}           
		 */
		setTooltip? (tooltip: object): void;
		/** 
		 * Sets the value of [useDarkerStrokeColor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-useDarkerStrokeColor).
		 * @method
		 * @public (method)
		 * @param   {boolean|number} useDarkerStrokeColor The new value.
		 * @returns {void}                                
		 */
		setUseDarkerStrokeColor? (useDarkerStrokeColor: boolean | number): void;
		/** 
		 * Sets the value of [xAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} xAxis The new value.
		 * @returns {void}                                    
		 */
		setXAxis? (xAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [xField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-xField).
		 * @method
		 * @public (method)
		 * @param   {string} xField The new value.
		 * @returns {void}          
		 */
		setXField? (xField: string): void;
		/** 
		 * Sets the value of [yAxis](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yAxis).
		 * @method
		 * @public (method)
		 * @param   {Ext.chart.axis.Axis|number|string} yAxis The new value.
		 * @returns {void}                                    
		 */
		setYAxis? (yAxis: Ext.chart.axis.Axis | number | string): void;
		/** 
		 * Sets the value of [yField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html#cfg-yField).
		 * @method
		 * @public (method)
		 * @param   {string|string[]} yField The new value.
		 * @returns {void}                   
		 */
		setYField? (yField: string | string[]): void;
		/** 
		 * Returns the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getHighlightCfg? (): object;
		/** 
		 * Returns the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getItemInstancing? (): object;
		/** 
		 * Sets the value of [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * @method
		 * @protected (method)
		 * @param   {object} highlightCfg The new value.
		 * @returns {void}                
		 */
		setHighlightCfg? (highlightCfg: object): void;
		/** 
		 * Sets the value of [itemInstancing](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-itemInstancing).
		 * @method
		 * @protected (method)
		 * @param   {object} itemInstancing The new value.
		 * @returns {void}                  
		 */
		setItemInstancing? (itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getOverlaySurface? (): object;
		/** 
		 * Returns the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @returns {object}  
		 */
		getSurface? (): object;
		/** 
		 * Sets the value of [overlaySurface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-overlaySurface).
		 * @method
		 * @protected (method)
		 * @param   {object} overlaySurface The new value.
		 * @returns {void}                  
		 */
		setOverlaySurface? (overlaySurface: object): void;
		/** 
		 * Sets the value of [store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-store).
		 * @method
		 * @protected (method)
		 * @param   {object} store The new value.
		 * @returns {void}         
		 */
		setStore? (store: object): void;
		/** 
		 * Sets the value of [surface](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-surface).
		 * @method
		 * @protected (method)
		 * @param   {object} surface The new value.
		 * @returns {void}           
		 */
		setSurface? (surface: object): void;
		/** 
		 * Adds the 'itemhighlight' interaction to the chart that owns the series.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		addItemHighlight? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAnimation
		 * @param   {object} oldAnimation
		 * @returns {void}                
		 */
		applyAnimation? (newAnimation: object, oldAnimation: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} background
		 * @returns {void}              
		 */
		applyBackground? (background: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @param   {object} oldHighlight
		 * @returns {void}                
		 */
		applyHighlight? (highlight: object, oldHighlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		applyHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} instancing
		 * @param   {object} oldInstancing
		 * @returns {void}                 
		 */
		applyItemInstancing? (instancing: object, oldInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newLabel
		 * @param   {object} oldLabel
		 * @returns {void}            
		 */
		applyLabel? (newLabel: object, oldLabel: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarker? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} marker
		 * @param   {object} oldMarker
		 * @returns {void}             
		 */
		applyMarkerSubStyle? (marker: object, oldMarker: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} store
		 * @returns {void}         
		 */
		applyStore? (store: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} oldStyle
		 * @returns {void}            
		 */
		applyStyle? (style: object, oldStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} subStyle
		 * @param   {object} oldSubStyle
		 * @returns {void}               
		 */
		applySubStyle? (subStyle: object, oldSubStyle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @param   {object} oldTheme
		 * @returns {void}            
		 */
		applyThemeStyle? (theme: object, oldTheme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} tooltip
		 * @param   {object} oldTooltip
		 * @returns {void}              
		 */
		applyTooltip? (tooltip: object, oldTooltip: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyXAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newAxis
		 * @param   {object} oldAxis
		 * @returns {void}           
		 */
		applyYAxis? (newAxis: object, oldAxis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		clearSprites? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinate? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * This method will return an array containing data coordinated by a specific axis.
		 * @method
		 * @private (method)
		 * @param   {any[]}               items Store records.
		 * @param   {string}              field The field to fetch from each record.
		 * @param   {Ext.chart.axis.Axis} axis  The axis used to lay out the data.
		 * @returns {any[]}                     
		 */
		coordinateData? (items: any[], field: string, axis: Ext.chart.axis.Axis): any[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} direction
		 * @param   {object} directionOffset
		 * @param   {object} directionCount
		 * @returns {void}                   
		 */
		coordinateStacked? (direction: object, directionOffset: object, directionCount: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateX? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		coordinateY? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @param   {object} itemInstancing
		 * @returns {void}                  
		 */
		createItemInstancingSprite? (sprite: object, itemInstancing: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		createSprite? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		doUpdateStyles? (): void;
		/** 
		 * Given the list of axes in a certain direction and a list of series fields in that direction
		 * returns the first matching axis for the series in that direction,
		 * or undefined if a match wasn't found.
		 * @method
		 * @private (method)
		 * @param   {object} directionAxes
		 * @param   {object} directionFields
		 * @returns {void}                   
		 */
		findMatchingAxis? (directionAxes: object, directionFields: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getAnimation? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		getBBoxForItem? (item: object): void;
		/** 
		 * Returns the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getChart? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getDefaultSpriteConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fieldCategory
		 * @returns {void}                 
		 */
		getFields? (fieldCategory: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getItemId? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getMarkerStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} data
		 * @param   {object} range
		 * @returns {void}         
		 */
		getRangeOfData? (data: object, range: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStore? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		getStrokeColorsFromFillColors? (colors: object): void;
		/** 
		 * getMarkerSubStyleWithTheme: function() {
		 * 
		 *      var me = this,
		 *          theme = me.getThemeStyle(),
		 *          seriesThemeStyle = (theme &amp;&amp; theme.style) || {},
		 *          style = Ext.applyIf(Ext.apply({}, me.getMarkerSubStyle()), seriesThemeStyle);
		 *      return style;
		 * 
		 * },
		 * @method
		 * @private (method)
		 * @param   {object} i
		 * @returns {void}     
		 */
		getStyleByIndex? (i: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getStyleWithTheme? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getSubStyleWithTheme? (): void;
		/** 
		 * Returns the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @returns {object}  
		 */
		getThemeStyle? (): object;
		/** 
		 * Returns the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @returns {boolean}  
		 */
		getTriggerAfterDraw? (): boolean;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getXRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getYRange? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @returns {void}        
		 */
		hideTooltip? (item: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xtype
		 * @returns {void}         
		 */
		isXType? (xtype: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} skipThis
		 * @returns {void}            
		 */
		lookupViewModel? (skipThis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onAxesChange? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @returns {void}         
		 */
		onChartAttached? (chart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		onChartDetached? (oldChart: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		onDataChanged? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationEnd? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} sprite
		 * @returns {void}          
		 */
		onSpriteAnimationStart? (sprite: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} chart
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		onStoreChange? (chart: object, newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		processData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} defaultScope
		 * @returns {void}                
		 */
		resolveListenerScope? (defaultScope: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} change
		 * @returns {void}          
		 */
		setAttributesForItem? (item: object, change: object): void;
		/** 
		 * Sets the value of [chart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-chart).
		 * @method
		 * @private (method)
		 * @param   {object} chart The new value.
		 * @returns {void}         
		 */
		setChart? (chart: object): void;
		/** 
		 * Sets the value of [themeStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-themeStyle).
		 * @method
		 * @private (method)
		 * @param   {object} themeStyle The new value.
		 * @returns {void}              
		 */
		setThemeStyle? (themeStyle: object): void;
		/** 
		 * Sets the value of [triggerAfterDraw](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-triggerAfterDraw).
		 * @method
		 * @private (method)
		 * @param   {boolean} triggerAfterDraw The new value.
		 * @returns {void}                     
		 */
		setTriggerAfterDraw? (triggerAfterDraw: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} item
		 * @param   {object} xy
		 * @returns {void}        
		 */
		showTooltip? (item: object, xy: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} style
		 * @param   {object} i
		 * @returns {void}         
		 */
		styleDataForIndex? (style: object, i: object): void;
		/** 
		 * Returns the number of colors this series needs.
		 * A Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.
		 * An OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeColorCount? (): void;
		/** 
		 * Returns the number of markers this series needs.
		 * Currently, only the Line, Scatter and Radar series use markers - and they need just one each.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		themeMarkerCount? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newChart
		 * @param   {object} oldChart
		 * @returns {void}            
		 */
		updateChart? (newChart: object, oldChart: object): void;
		/** 
		 * When the chart's "colors" config changes, these colors are passed onto the series
		 * where they are used with the same priority as theme colors, i.e. they do not override
		 * the series' "colors" config, nor the series' "style" config, but they do override
		 * the colors from the theme's "seriesThemes" config.
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateChartColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} hidden
		 * @returns {void}          
		 */
		updateHidden? (hidden: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlight
		 * @returns {void}             
		 */
		updateHighlight? (highlight: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} highlightCfg
		 * @returns {void}                
		 */
		updateHighlightCfg? (highlightCfg: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newHighlightItem
		 * @param   {object} oldHighlightItem
		 * @returns {void}                    
		 */
		updateHighlightItem? (newHighlightItem: object, oldHighlightItem: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateLabelData? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} labelOverflowPadding
		 * @returns {void}                        
		 */
		updateLabelOverflowPadding? (labelOverflowPadding: object): void;
		/** 
		 * Updates chart's legend store when the value of the series' [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-hidden) config
		 * changes or when the [setHiddenByIndex](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#method-setHiddenByIndex) method is called.
		 * @method
		 * @private (method)
		 * @param   {object} hidden Whether series (or its component) should be hidden or not.
		 * @param   {object} index
		 * Used for stacked series.
		 *              If present, only the component with the specified index will change visibility.
		 * @returns {void}          
		 */
		updateLegendStore? (hidden: object, index: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} overlaySurface
		 * @returns {void}                  
		 */
		updateOverlaySurface? (overlaySurface: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} renderer
		 * @returns {void}            
		 */
		updateRenderer? (renderer: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} showMarkers
		 * @returns {void}               
		 */
		updateShowMarkers? (showMarkers: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSplitStacks? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStacked? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newStore
		 * @param   {object} oldStore
		 * @returns {void}            
		 */
		updateStore? (newStore: object, oldStore: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateSubStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} theme
		 * @returns {void}         
		 */
		updateTheme? (theme: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} colors
		 * @returns {void}          
		 */
		updateThemeColors? (colors: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateThemeStyle? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} newTitle
		 * @returns {void}            
		 */
		updateTitle? (newTitle: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		updateTooltip? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateXAxis? (axis: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} axis
		 * @returns {void}        
		 */
		updateYAxis? (axis: object): void;
	}
}
declare namespace Ext.chart.series.Area {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Area](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Area.html)
	 * Creates an Area Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2', 'data3'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 10,
	 *               data2: 12,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 7,
	 *               data2: 8,
	 *               data3: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 5,
	 *               data2: 2,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 2,
	 *               data2: 14,
	 *               data3: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 27,
	 *               data2: 38,
	 *               data3: 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name']
	 *       }],
	 *       series: {
	 *           type: 'area',
	 *           subStyle: {
	 *               fill: ['#0A3F50', '#30BDA7', '#96D4C6']
	 *           },
	 *           xField: 'name',
	 *           yField: ['data1', 'data2', 'data3']
	 *       }
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Area {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Area.Cfg}
		 */
		config?: Ext.chart.series.Area.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Bar {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Bar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar.html)
	 * Creates a Bar or Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar' series is meant to be used with the
	 * ['category'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['name', 'value'],
	 *           data: [{
	 *               name: 'metric one',
	 *               value: 10
	 *           }, {
	 *               name: 'metric two',
	 *               value: 7
	 *           }, {
	 *               name: 'metric three',
	 *               value: 5
	 *           }, {
	 *               name: 'metric four',
	 *               value: 2
	 *           }, {
	 *               name: 'metric five',
	 *               value: 27
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'value'
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar',
	 *           subStyle: {
	 *               fill: ['#388FAD'],
	 *               stroke: '#1F6D91'
	 *           },
	 *           xField: 'name',
	 *           yField: 'value'
	 *       }
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Bar {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Bar.Cfg}
		 */
		config?: Ext.chart.series.Bar.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Bar3D {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Bar3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html)
	 * Creates a 3D Bar or 3D Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar3d' series is meant to be used with the
	 * ['category3d'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: Ext.getBody(),
	 *       width: 600,
	 *       height: 400,
	 *       innerPadding: '0 10 0 10',
	 *       store: {
	 *           fields: ['name', 'apples', 'oranges'],
	 *           data: [{
	 *               name: 'Eric',
	 *               apples: 10,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Mary',
	 *               apples: 7,
	 *               oranges: 2
	 *           }, {
	 *               name: 'John',
	 *               apples: 5,
	 *               oranges: 2
	 *           }, {
	 *               name: 'Bob',
	 *               apples: 2,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Joe',
	 *               apples: 19,
	 *               oranges: 1
	 *           }, {
	 *               name: 'Macy',
	 *               apples: 13,
	 *               oranges: 4
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric3d',
	 *           position: 'left',
	 *           fields: ['apples', 'oranges'],
	 *           title: {
	 *               text: 'Inventory',
	 *               fontSize: 15
	 *           },
	 *           grid: {
	 *               odd: {
	 *                   fillStyle: 'rgba(255, 255, 255, 0.06)'
	 *               },
	 *               even: {
	 *                   fillStyle: 'rgba(0, 0, 0, 0.03)'
	 *               }
	 *           }
	 *       }, {
	 *           type: 'category3d',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'People',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar3d',
	 *           xField: 'name',
	 *           yField: ['apples', 'oranges']
	 *       }
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Bar3D {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Bar3D.Cfg}
		 */
		config?: Ext.chart.series.Bar3D.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.CandleStick {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.CandleStick](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html)
	 * Creates a candlestick or OHLC Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['time', 'open', 'high', 'low', 'close'],
	 *           data: [{
	 *               'time': new Date('Jan 1 2010').getTime(),
	 *               'open': 600,
	 *               'high': 614,
	 *               'low': 578,
	 *               'close': 590
	 *           }, {
	 *               'time': new Date('Jan 2 2010').getTime(),
	 *               'open': 590,
	 *               'high': 609,
	 *               'low': 580,
	 *               'close': 580
	 *           }, {
	 *               'time': new Date('Jan 3 2010').getTime(),
	 *               'open': 580,
	 *               'high': 602,
	 *               'low': 578,
	 *               'close': 602
	 *           }, {
	 *               'time': new Date('Jan 4 2010').getTime(),
	 *               'open': 602,
	 *               'high': 614,
	 *               'low': 586,
	 *               'close': 586
	 *           }, {
	 *               'time': new Date('Jan 5 2010').getTime(),
	 *               'open': 586,
	 *               'high': 602,
	 *               'low': 565,
	 *               'close': 565
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['open', 'high', 'low', 'close'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 560,
	 *           maximum: 640
	 *       }, {
	 *           type: 'time',
	 *           position: 'bottom',
	 *           fields: ['time'],
	 *           fromDate: new Date('Dec 31 2009'),
	 *           toDate: new Date('Jan 6 2010'),
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           style: {
	 *               axisLine: false
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'candlestick',
	 *           xField: 'time',
	 *           openField: 'open',
	 *           highField: 'high',
	 *           lowField: 'low',
	 *           closeField: 'close',
	 *           style: {
	 *               dropStyle: {
	 *                   fill: 'rgb(222, 87, 87)',
	 *                   stroke: 'rgb(222, 87, 87)',
	 *                   lineWidth: 3
	 *               },
	 *               raiseStyle: {
	 *                   fill: 'rgb(48, 189, 167)',
	 *                   stroke: 'rgb(48, 189, 167)',
	 *                   lineWidth: 3
	 *               }
	 *           }
	 *       }
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.CandleStick {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.CandleStick.Cfg}
		 */
		config?: Ext.chart.series.CandleStick.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Cartesian {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Cartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html)
	 * Common base class for series implementations that plot values using cartesian coordinates.
	 */
	interface Def extends Ext.chart.series.Cartesian {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Cartesian.Cfg}
		 */
		config?: Ext.chart.series.Cartesian.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Gauge {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Gauge](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html)
	 * Creates a Gauge Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['mph', 'fuel', 'temp', 'rpm'],
	 *           data: [{
	 *               mph: 65,
	 *               fuel: 50,
	 *               temp: 150,
	 *               rpm: 6000
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'gauge',
	 *           colors: ['#1F6D91', '#90BCC9'],
	 *           angleField: 'mph',
	 *           needle: true,
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Gauge {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Gauge.Cfg}
		 */
		config?: Ext.chart.series.Gauge.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Line {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Line](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html)
	 * Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different
	 * categories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.
	 * As with all other series, the Line Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the line series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: [{
	 *           type: 'line',
	 *           style: {
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2
	 *           },
	 *           xField: 'name',
	 *           yField: 'data1',
	 *           marker: {
	 *               type: 'path',
	 *               path: ['M', - 4, 0, 0, 4, 4, 0, 0, - 4, 'Z'],
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }, {
	 *           type: 'line',
	 *           fill: true,
	 *           style: {
	 *               fill: '#96D4C6',
	 *               fillOpacity: .6,
	 *               stroke: '#0A3F50',
	 *               strokeOpacity: .6,
	 *           },
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               radius: 4,
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }]
	 *    });
	 * 
	 * In this configuration we're adding two series (or lines), one bound to the `data1`
	 * property of the store and the other to `data3`. The type for both configurations is
	 * `line`. The `xField` for both series is the same, the `name` property of the store.
	 * Both line series share the same axis, the left axis. You can set particular marker
	 * configuration by adding properties onto the marker object. Both series have
	 * an object as highlight so that markers animate smoothly to the properties in highlight
	 * when hovered. The second series has `fill = true` which means that the line will also
	 * have an area below it of the same color.
	 * 
	 * **Note:** In the series definition remember to explicitly set the axis to bind the
	 * values of the line series to. This can be done by using the `axis` configuration property.
	 */
	interface Def extends Ext.chart.series.Line {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Line.Cfg}
		 */
		config?: Ext.chart.series.Line.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Pie {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Pie](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html)
	 * Creates a Pie Chart. A Pie Chart is a useful visualization technique to display
	 * quantitative information for different categories that also have a meaning as a whole.
	 * As with all other series, the Pie Series must be appended in the _series_ Chart array
	 * configuration. See the Chart documentation for more information. A typical configuration
	 * object for the pie series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar',
	 *       renderTo: document.body,
	 *       width: 400,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: ['rotate', 'itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie',
	 *           highlight: true,
	 *           angleField: 'data1',
	 *           label: {
	 *               field: 'name',
	 *               display: 'rotate'
	 *           },
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 * In this configuration we set `pie` as the type for the series, then set the `highlight` config
	 * to `true` (we can also specify an object with specific style properties for highlighting options)
	 * which is triggered when hovering or tapping elements.
	 * We set `data1` as the value of the `angleField` to determine the angle span for each pie slice.
	 * We also set a label configuration object where we set the name of the store field
	 * to be rendered as text for the label. The labels will also be displayed rotated.
	 * And finally, we specify the donut hole radius for the pie series in percentages of the series radius.
	 */
	interface Def extends Ext.chart.series.Pie {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Pie.Cfg}
		 */
		config?: Ext.chart.series.Pie.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Pie3D {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Pie3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html)
	 * Creates a 3D Pie Chart.
	 * 
	 * **Note:** Labels, legends, and lines are not currently available when using the
	 * 3D Pie chart series.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['data3'],
	 *           data: [{
	 *               'data3': 14
	 *           }, {
	 *               'data3': 16
	 *           }, {
	 *               'data3': 14
	 *           }, {
	 *               'data3': 6
	 *           }, {
	 *               'data3': 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie3d',
	 *           angleField: 'data3',
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Pie3D {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Pie3D.Cfg}
		 */
		config?: Ext.chart.series.Pie3D.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Polar {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Polar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html)
	 * Common base class for series implementations that plot values using polar coordinates.
	 */
	interface Def extends Ext.chart.series.Polar {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Polar.Cfg}
		 */
		config?: Ext.chart.series.Polar.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Radar {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Radar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Radar.html)
	 * Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for
	 * a constrained number of categories.
	 * As with all other series, the Radar series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the radar series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 500,
	 *       height: 400,
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 8
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 10
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 12
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 1
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 13
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'radar',
	 *           angleField: 'name',
	 *           radiusField: 'data1',
	 *           style: {
	 *               fillStyle: '#388FAD',
	 *               fillOpacity: .1,
	 *               strokeStyle: '#388FAD',
	 *               strokeOpacity: .8,
	 *               lineWidth: 1
	 *           }
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'radial',
	 *           fields: 'data1',
	 *           style: {
	 *               estStepSize: 10
	 *           },
	 *           grid: true
	 *       }, {
	 *           type: 'category',
	 *           position: 'angular',
	 *           fields: 'name',
	 *           style: {
	 *               estStepSize: 1
	 *           },
	 *           grid: true
	 *       }]
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Radar {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Radar.Cfg}
		 */
		config?: Ext.chart.series.Radar.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Scatter {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Scatter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Scatter.html)
	 * Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.
	 * These variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.
	 * As with all other series, the Scatter Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information on creating charts. A typical configuration object for the scatter could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       interactions: ['itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'scatter',
	 *           highlight: {
	 *               size: 12,
	 *               radius: 12,
	 *               fill: '#96D4C6',
	 *               stroke: '#30BDA7'
	 *           },
	 *           fill: true,
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               fill: '#30BDA7',
	 *               radius: 10,
	 *               lineWidth: 0
	 *           }
	 *       }
	 *    });
	 * 
	 * In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,
	 * `data1`, `data2` and `data3` respectively. All x-fields for the series must be the same field, in this case `name`.
	 * Each scatter series has a different styling configuration for markers, specified by the `marker` object. Finally we set the left axis as
	 * axis to show the current values of the elements.
	 */
	interface Def extends Ext.chart.series.Scatter {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Scatter.Cfg}
		 */
		config?: Ext.chart.series.Scatter.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Series {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.Series](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html)
	 * Series is the abstract class containing the common logic to all chart series. Series includes
	 * methods from Labels, Highlights, and Callouts mixins. This class implements the logic of
	 * animating, hiding, showing all elements and returning the color of the series to be used as a legend item.
	 * 
	 * ## Listeners
	 * 
	 * The series class supports listeners via the Observable syntax.
	 * 
	 * For example:
	 * 
	 *    Ext.create('Ext.chart.CartesianChart', {
	 *        plugins: {
	 *            ptype: 'chartitemevents',
	 *            moveEvents: true
	 *        },
	 *        store: {
	 *            fields: ['pet', 'households', 'total'],
	 *            data: [
	 *                {pet: 'Cats', households: 38, total: 93},
	 *                {pet: 'Dogs', households: 45, total: 79},
	 *                {pet: 'Fish', households: 13, total: 171}
	 *            ]
	 *        },
	 *        axes: [{
	 *            type: 'numeric',
	 *            position: 'left'
	 *        }, {
	 *            type: 'category',
	 *            position: 'bottom'
	 *        }],
	 *        series: [{
	 *            type: 'bar',
	 *            xField: 'pet',
	 *            yField: 'households',
	 *            listeners: {
	 *                itemmousemove: function (series, item, event) {
	 *                    console.log('itemmousemove', item.category, item.field);
	 *                }
	 *            }
	 *        }, {
	 *            type: 'line',
	 *            xField: 'pet',
	 *            yField: 'total',
	 *            marker: true
	 *        }]
	 *    });
	 * 
	 */
	interface Def extends Ext.chart.series.Series {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.Series.Cfg}
		 */
		config?: Ext.chart.series.Series.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.StackedCartesian {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.chart.series.StackedCartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html)
	 * Abstract class for all the stacked cartesian series including area series
	 * and bar series.
	 */
	interface Def extends Ext.chart.series.StackedCartesian {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.chart.series.StackedCartesian.Cfg}
		 */
		config?: Ext.chart.series.StackedCartesian.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.Base.Statics}  
		 * @type {object}
		 */
		statics?: (() => Ext.Base.Statics) | object | any;
	}
}
declare namespace Ext.chart.series.Area {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Area](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Area.html)
	 * Creates an Area Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2', 'data3'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 10,
	 *               data2: 12,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 7,
	 *               data2: 8,
	 *               data3: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 5,
	 *               data2: 2,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 2,
	 *               data2: 14,
	 *               data3: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 27,
	 *               data2: 38,
	 *               data3: 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name']
	 *       }],
	 *       series: {
	 *           type: 'area',
	 *           subStyle: {
	 *               fill: ['#0A3F50', '#30BDA7', '#96D4C6']
	 *           },
	 *           xField: 'name',
	 *           yField: ['data1', 'data2', 'data3']
	 *       }
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * If `true`, the height of a stacked bar is always the full height of the chart,
		 * with individual components viewed as shares of the whole determined by the
		 * [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal) config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		fullStack?: boolean;
		/** 
		 * If the [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack) config is set to `true`, this will determine
		 * the absolute total value of each stack.
		 * @configuration
		 * @optional
		 * @default 100
		 * @type {boolean}
		 */
		fullStackTotal?: boolean;
		/** 
		 * @configuration
		 * @optional
		 * @default []
		 * @type {any[]}
		 */
		hidden?: any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * `true` to stack negative/positive values in respective y-axis directions.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		splitStacks?: boolean;
		/** 
		 * `true` to display the series in its stacked configuration.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		stacked?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Bar {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Bar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar.html)
	 * Creates a Bar or Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar' series is meant to be used with the
	 * ['category'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['name', 'value'],
	 *           data: [{
	 *               name: 'metric one',
	 *               value: 10
	 *           }, {
	 *               name: 'metric two',
	 *               value: 7
	 *           }, {
	 *               name: 'metric three',
	 *               value: 5
	 *           }, {
	 *               name: 'metric four',
	 *               value: 2
	 *           }, {
	 *               name: 'metric five',
	 *               value: 27
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'value'
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar',
	 *           subStyle: {
	 *               fill: ['#388FAD'],
	 *               stroke: '#1F6D91'
	 *           },
	 *           xField: 'name',
	 *           yField: 'value'
	 *       }
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * If `true`, the height of a stacked bar is always the full height of the chart,
		 * with individual components viewed as shares of the whole determined by the
		 * [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal) config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		fullStack?: boolean;
		/** 
		 * If the [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack) config is set to `true`, this will determine
		 * the absolute total value of each stack.
		 * @configuration
		 * @optional
		 * @default 100
		 * @type {boolean}
		 */
		fullStackTotal?: boolean;
		/** 
		 * @configuration
		 * @optional
		 * @default []
		 * @type {any[]}
		 */
		hidden?: any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * Sprite template used for series.
		 * @configuration
		 * @optional
		 * @default {type: 'rect', fx: {customDurations: {x: 0, y: 0, width: 0, height: 0, radius: 0}}}
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * `true` to stack negative/positive values in respective y-axis directions.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		splitStacks?: boolean;
		/** 
		 * `true` to display the series in its stacked configuration.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		stacked?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Bar3D {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Bar3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html)
	 * Creates a 3D Bar or 3D Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar3d' series is meant to be used with the
	 * ['category3d'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: Ext.getBody(),
	 *       width: 600,
	 *       height: 400,
	 *       innerPadding: '0 10 0 10',
	 *       store: {
	 *           fields: ['name', 'apples', 'oranges'],
	 *           data: [{
	 *               name: 'Eric',
	 *               apples: 10,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Mary',
	 *               apples: 7,
	 *               oranges: 2
	 *           }, {
	 *               name: 'John',
	 *               apples: 5,
	 *               oranges: 2
	 *           }, {
	 *               name: 'Bob',
	 *               apples: 2,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Joe',
	 *               apples: 19,
	 *               oranges: 1
	 *           }, {
	 *               name: 'Macy',
	 *               apples: 13,
	 *               oranges: 4
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric3d',
	 *           position: 'left',
	 *           fields: ['apples', 'oranges'],
	 *           title: {
	 *               text: 'Inventory',
	 *               fontSize: 15
	 *           },
	 *           grid: {
	 *               odd: {
	 *                   fillStyle: 'rgba(255, 255, 255, 0.06)'
	 *               },
	 *               even: {
	 *                   fillStyle: 'rgba(0, 0, 0, 0.03)'
	 *               }
	 *           }
	 *       }, {
	 *           type: 'category3d',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'People',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar3d',
	 *           xField: 'name',
	 *           yField: ['apples', 'oranges']
	 *       }
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * If `true`, the height of a stacked bar is always the full height of the chart,
		 * with individual components viewed as shares of the whole determined by the
		 * [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal) config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		fullStack?: boolean;
		/** 
		 * If the [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack) config is set to `true`, this will determine
		 * the absolute total value of each stack.
		 * @configuration
		 * @optional
		 * @default 100
		 * @type {boolean}
		 */
		fullStackTotal?: boolean;
		/** 
		 * @configuration
		 * @optional
		 * @default []
		 * @type {any[]}
		 */
		hidden?: any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @default {opacity: 0.8}
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * Sprite template used for series.
		 * @configuration
		 * @optional
		 * @default {type: 'box', fx: {customDurations: {x: 0, y: 0, width: 0, height: 0, depth: 0}}}
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * `true` to stack negative/positive values in respective y-axis directions.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		splitStacks?: boolean;
		/** 
		 * `true` to display the series in its stacked configuration.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		stacked?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.CandleStick {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.CandleStick](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html)
	 * Creates a candlestick or OHLC Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['time', 'open', 'high', 'low', 'close'],
	 *           data: [{
	 *               'time': new Date('Jan 1 2010').getTime(),
	 *               'open': 600,
	 *               'high': 614,
	 *               'low': 578,
	 *               'close': 590
	 *           }, {
	 *               'time': new Date('Jan 2 2010').getTime(),
	 *               'open': 590,
	 *               'high': 609,
	 *               'low': 580,
	 *               'close': 580
	 *           }, {
	 *               'time': new Date('Jan 3 2010').getTime(),
	 *               'open': 580,
	 *               'high': 602,
	 *               'low': 578,
	 *               'close': 602
	 *           }, {
	 *               'time': new Date('Jan 4 2010').getTime(),
	 *               'open': 602,
	 *               'high': 614,
	 *               'low': 586,
	 *               'close': 586
	 *           }, {
	 *               'time': new Date('Jan 5 2010').getTime(),
	 *               'open': 586,
	 *               'high': 602,
	 *               'low': 565,
	 *               'close': 565
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['open', 'high', 'low', 'close'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 560,
	 *           maximum: 640
	 *       }, {
	 *           type: 'time',
	 *           position: 'bottom',
	 *           fields: ['time'],
	 *           fromDate: new Date('Dec 31 2009'),
	 *           toDate: new Date('Jan 6 2010'),
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           style: {
	 *               axisLine: false
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'candlestick',
	 *           xField: 'time',
	 *           openField: 'open',
	 *           highField: 'high',
	 *           lowField: 'low',
	 *           closeField: 'close',
	 *           style: {
	 *               dropStyle: {
	 *                   fill: 'rgb(222, 87, 87)',
	 *                   stroke: 'rgb(222, 87, 87)',
	 *                   lineWidth: 3
	 *               },
	 *               raiseStyle: {
	 *                   fill: 'rgb(48, 189, 167)',
	 *                   stroke: 'rgb(48, 189, 167)',
	 *                   lineWidth: 3
	 *               }
	 *           }
	 *       }
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * The store record field name that represents the closing value of the given period.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		closeField?: string;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The store record field name that represents the highest value of the time interval represented.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		highField?: string;
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The store record field name that represents the lowest value of the time interval represented.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		lowField?: string;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The store record field name that represents the opening value of the given period.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		openField?: string;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Cartesian {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Cartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html)
	 * Common base class for series implementations that plot values using cartesian coordinates.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Gauge {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Gauge](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html)
	 * Creates a Gauge Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['mph', 'fuel', 'temp', 'rpm'],
	 *           data: [{
	 *               mph: 65,
	 *               fuel: 50,
	 *               temp: 150,
	 *               rpm: 6000
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'gauge',
	 *           colors: ['#1F6D91', '#90BCC9'],
	 *           angleField: 'mph',
	 *           needle: true,
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The store record field name to be used for the gauge value.
		 * The values bound to this field name must be positive real numbers.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		angleField?: string;
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * @configuration
		 * @optional
		 * @default [0.5, 0.75]
		 * @type {any[]}
		 */
		center?: any[];
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used for the needle and the `sectors`.
		 * @configuration
		 * @required
		 * @type {any[]}
		 */
		colors: any[];
		/** 
		 * Percentage of the radius of the donut hole compared to the entire disk.
		 * @configuration
		 * @optional
		 * @default 30
		 * @type {number}
		 */
		donut?: number;
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The maximum value of the gauge.
		 * @configuration
		 * @optional
		 * @default 100
		 * @type {number}
		 */
		maximum?: number;
		/** 
		 * The minimum value of the gauge.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		minimum?: number;
		/** 
		 * If true, display the gauge as a needle, otherwise as a sector.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		needle?: boolean;
		/** 
		 * Percentage of the length of needle compared to the radius of the entire disk.
		 * @configuration
		 * @optional
		 * @default 90
		 * @type {number}
		 */
		needleLength?: number;
		/** 
		 * Width of the needle in pixels.
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		needleWidth?: number;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * @configuration
		 * @optional
		 * @default 0.5
		 * @type {number}
		 */
		radius?: number;
		/** 
		 * @configuration
		 * @optional
		 * @default [0, 0, 1, 1]
		 * @type {any[]}
		 */
		rect?: any[];
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		rotation?: number;
		/** 
		 * Allows to paint sectors of different colors in the background of the gauge,
		 * with optional labels.
		 * 
		 * It can be an array of numbers (each between `minimum` and `maximum`) that
		 * define the highest value of each sector. For N sectors, only (N-1) values are
		 * needed because it is assumed that the first sector starts at `minimum` and the
		 * last sector ends at `maximum`. Example: a water temperature gauge that is blue
		 * below 20C, red above 80C, gray in-between, and with an orange needle...
		 * 
		 *     minimum: 0,
		 *     maximum: 100,
		 *     sectors: [20, 80],
		 *     colors: ['orange', 'blue', 'lightgray', 'red']
		 * 
		 * It can be also an array of objects, each with the following properties:
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		sectors?: any[];
		/** 
		 * Whether to add the gauge chart elements as legend items.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * The size of the sector that the series will occupy.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		totalAngle?: number;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * Directly sets the displayed value of the gauge.
		 * It is ignored if [angleField](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html#cfg-angleField) is provided.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		value?: number;
		/** 
		 * Indicates whether to show the whole disk or only the marked part.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		wholeDisk?: boolean;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Line {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Line](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html)
	 * Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different
	 * categories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.
	 * As with all other series, the Line Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the line series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: [{
	 *           type: 'line',
	 *           style: {
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2
	 *           },
	 *           xField: 'name',
	 *           yField: 'data1',
	 *           marker: {
	 *               type: 'path',
	 *               path: ['M', - 4, 0, 0, 4, 4, 0, 0, - 4, 'Z'],
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }, {
	 *           type: 'line',
	 *           fill: true,
	 *           style: {
	 *               fill: '#96D4C6',
	 *               fillOpacity: .6,
	 *               stroke: '#0A3F50',
	 *               strokeOpacity: .6,
	 *           },
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               radius: 4,
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }]
	 *    });
	 * 
	 * In this configuration we're adding two series (or lines), one bound to the `data1`
	 * property of the store and the other to `data3`. The type for both configurations is
	 * `line`. The `xField` for both series is the same, the `name` property of the store.
	 * Both line series share the same axis, the left axis. You can set particular marker
	 * configuration by adding properties onto the marker object. Both series have
	 * an object as highlight so that markers animate smoothly to the properties in highlight
	 * when hovered. The second series has `fill = true` which means that the line will also
	 * have an area below it of the same color.
	 * 
	 * **Note:** In the series definition remember to explicitly set the axis to bind the
	 * values of the line series to. This can be done by using the `axis` configuration property.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * @configuration
		 * @optional
		 * @default {strategy: 'double'}
		 * @type {object}
		 */
		aggregator?: object;
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * If set to `true`, the area underneath the line is filled with the color defined as follows, listed by priority:
		 * 
		 * - The color that is configured for this series ([Ext.chart.series.Series.colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-colors)).
		 * - The color that is configured for this chart ([Ext.chart.AbstractChart.colors](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-colors)).
		 * - The fill color that is set in the [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-style) config.
		 * - The stroke color that is set in the [style](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html#cfg-style) config, or the same color as the line.
		 * 
		 * Note: Do not confuse `series.config.fill` (which is a boolean) with `series.style.fill' (which is an alias
		 * for the`fillStyle`property and contains a color). For compatibility with previous versions of the API,
		 * if`config.fill`is undefined but a`style.fill' color is provided, `config.fill` is considered true.
		 * So the default value below must be undefined, not false.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		fill?: boolean;
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * The offset distance from the cursor position to the line series to trigger events (then used for highlighting series, etc).
		 * @configuration
		 * @optional
		 * @default 20
		 * @type {number}
		 */
		selectionTolerance?: number;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * If set to `true` or a non-zero number, the line will be smoothed/rounded around its points; otherwise
		 * straight line segments will be drawn.
		 * 
		 * A numeric value is interpreted as a divisor of the horizontal distance between consecutive points in
		 * the line; larger numbers result in sharper curves while smaller numbers result in smoother curves.
		 * 
		 * If set to `true` then a default numeric value of 3 will be used.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|number}
		 */
		smooth?: boolean | number;
		/** 
		 * If set to `true`, the line uses steps instead of straight lines to connect the dots.
		 * It is ignored if `smooth` is true.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		step?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * An object containing styles for the visualization lines. These styles will override the theme styles.
		 * Some options contained within the style object will are described next.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Pie {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Pie](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html)
	 * Creates a Pie Chart. A Pie Chart is a useful visualization technique to display
	 * quantitative information for different categories that also have a meaning as a whole.
	 * As with all other series, the Pie Series must be appended in the _series_ Chart array
	 * configuration. See the Chart documentation for more information. A typical configuration
	 * object for the pie series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar',
	 *       renderTo: document.body,
	 *       width: 400,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: ['rotate', 'itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie',
	 *           highlight: true,
	 *           angleField: 'data1',
	 *           label: {
	 *               field: 'name',
	 *               display: 'rotate'
	 *           },
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 * In this configuration we set `pie` as the type for the series, then set the `highlight` config
	 * to `true` (we can also specify an object with specific style properties for highlighting options)
	 * which is triggered when hovering or tapping elements.
	 * We set `data1` as the value of the `angleField` to determine the angle span for each pie slice.
	 * We also set a label configuration object where we set the name of the store field
	 * to be rendered as text for the label. The labels will also be displayed rotated.
	 * And finally, we specify the donut hole radius for the pie series in percentages of the series radius.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The store record field name for the angular axes in radar charts,
		 * or the size of the slices in pie charts.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		angleField?: string;
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * for the polar series.
		 * @configuration
		 * @optional
		 * @default [0, 0]
		 * @type {any[]}
		 */
		center?: any[];
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * Whether the pie slices are displayed clockwise. Default's true.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		clockwise?: boolean;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * Specifies the radius of the donut hole, as a percentage of the chart's radius.
		 * Defaults to 0 (no donut hole).
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		donut?: number;
		/** 
		 * Determines which pie slices are hidden.
		 * @configuration
		 * @optional
		 * @default []
		 * @type {any[]}
		 */
		hidden?: any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * Default highlight config for the pie series.
		 * Slides highlighted pie sector outward by default.
		 * 
		 * highlightCfg accepts as its value a config object (or array of configs) for a
		 * [pie sprite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.sprite.PieSlice.html).
		 * 
		 * Example config:
		 * 
		 *    Ext.create('Ext.chart.PolarChart', {
		 *        renderTo: document.body,
		 *        width: 600,
		 *        height: 400,
		 *        innerPadding: 5,
		 *        store: {
		 *            fields: ['name', 'data1'],
		 *            data: [{
		 *                name: 'metric one',
		 *                data1: 10
		 *            }, {
		 *                name: 'metric two',
		 *                data1: 7
		 *            }, {
		 *                name: 'metric three',
		 *                data1: 5
		 *            }]
		 *        },
		 *        series: {
		 *            type: 'pie',
		 *            label: {
		 *                field: 'name',
		 *                display: 'rotate'
		 *            },
		 *            xField: 'data1',
		 *            donut: 30,
		 *            highlightCfg: {
		 *                margin: 10,
		 *                fillOpacity: .7
		 *            }
		 *        }
		 *    });
		 * 
		 * @configuration
		 * @optional
		 * @default {margin: 20}
		 * @type {Ext.chart.series.sprite.PieSlice|object}
		 */
		highlightCfg?: Ext.chart.series.sprite.PieSlice | object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The x-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetX?: number;
		/** 
		 * The y-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetY?: number;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * The radius of the polar series. Set to `null` will fit the polar series to the boundary.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		radius?: number;
		/** 
		 * Allows adjustment of the radius by a specific percentage.
		 * @configuration
		 * @optional
		 * @default 100
		 * @type {number}
		 */
		radiusFactor?: number;
		/** 
		 * The store record field name to be used for the pie slice lengths.
		 * The values bound to this field name must be positive real numbers.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		radiusField?: string;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * The starting angle of the pie slices.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		rotation?: number;
		/** 
		 * Whether to add the series elements as legend items.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * The total angle of the pie series.
		 * @configuration
		 * @optional
		 * @default 2*PI
		 * @type {number}
		 */
		totalAngle?: number;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		xAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		yAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		yField?: string;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Pie3D {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Pie3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html)
	 * Creates a 3D Pie Chart.
	 * 
	 * **Note:** Labels, legends, and lines are not currently available when using the
	 * 3D Pie chart series.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['data3'],
	 *           data: [{
	 *               'data3': 14
	 *           }, {
	 *               'data3': 16
	 *           }, {
	 *               'data3': 14
	 *           }, {
	 *               'data3': 6
	 *           }, {
	 *               'data3': 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie3d',
	 *           angleField: 'data3',
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The store record field name to be used for the pie angles.
		 * The values bound to this field name must be positive real numbers.
		 * @configuration
		 * @required
		 * @type {string}
		 */
		angleField: string;
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * for the polar series.
		 * @configuration
		 * @optional
		 * @default [0, 0]
		 * @type {any[]}
		 */
		center?: any[];
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default 0.5
		 * @type {number}
		 */
		distortion?: number;
		/** 
		 * Whether to set the pie chart as donut chart.
		 * Can be set to a particular percentage to set the radius
		 * of the donut chart.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|number}
		 */
		donut?: boolean | number;
		/** 
		 * Determines which pie slices are hidden.
		 * @configuration
		 * @optional
		 * @default []
		 * @type {any[]}
		 */
		hidden?: any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * Default [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html#cfg-highlight) config for the 3D pie series.
		 * Slides highlighted pie sector outward.
		 * @configuration
		 * @optional
		 * @default {margin: 20}
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The x-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetX?: number;
		/** 
		 * The y-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetY?: number;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * The radius of the polar series. Set to `null` will fit the polar series to the boundary.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		radius?: number;
		/** 
		 * Not supported.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		radiusField?: string;
		/** 
		 * @configuration
		 * @optional
		 * @default [0, 0, 0, 0]
		 * @type {any[]}
		 */
		rect?: any[];
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * The starting angle of the pie slices.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		rotation?: number;
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		shadow?: boolean | object;
		/** 
		 * Whether to add the series elements as legend items.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * @configuration
		 * @optional
		 * @default 35
		 * @type {number}
		 */
		thickness?: number;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		xAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		yAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		yField?: string;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Polar {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Polar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html)
	 * Common base class for series implementations that plot values using polar coordinates.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The store record field name for the angular axes in radar charts,
		 * or the size of the slices in pie charts.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		angleField?: string;
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * for the polar series.
		 * @configuration
		 * @optional
		 * @default [0, 0]
		 * @type {any[]}
		 */
		center?: any[];
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The x-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetX?: number;
		/** 
		 * The y-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetY?: number;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * The radius of the polar series. Set to `null` will fit the polar series to the boundary.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		radius?: number;
		/** 
		 * The store record field name for the radial axes in radar charts,
		 * or the radius of the slices in pie charts.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		radiusField?: string;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * The angle in degrees at which the first polar series item should start.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		rotation?: number;
		/** 
		 * Whether to add the series elements as legend items.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		xAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		yAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		yField?: string;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Radar {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Radar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Radar.html)
	 * Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for
	 * a constrained number of categories.
	 * As with all other series, the Radar series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the radar series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 500,
	 *       height: 400,
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 8
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 10
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 12
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 1
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 13
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'radar',
	 *           angleField: 'name',
	 *           radiusField: 'data1',
	 *           style: {
	 *               fillStyle: '#388FAD',
	 *               fillOpacity: .1,
	 *               strokeStyle: '#388FAD',
	 *               strokeOpacity: .8,
	 *               lineWidth: 1
	 *           }
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'radial',
	 *           fields: 'data1',
	 *           style: {
	 *               estStepSize: 10
	 *           },
	 *           grid: true
	 *       }, {
	 *           type: 'category',
	 *           position: 'angular',
	 *           fields: 'name',
	 *           style: {
	 *               estStepSize: 1
	 *           },
	 *           grid: true
	 *       }]
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The store record field name for the angular axes in radar charts,
		 * or the size of the slices in pie charts.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		angleField?: string;
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * for the polar series.
		 * @configuration
		 * @optional
		 * @default [0, 0]
		 * @type {any[]}
		 */
		center?: any[];
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The x-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetX?: number;
		/** 
		 * The y-offset of center of the polar series related to the center of the boundary.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		offsetY?: number;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * The radius of the polar series. Set to `null` will fit the polar series to the boundary.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		radius?: number;
		/** 
		 * The store record field name for the radial axes in radar charts,
		 * or the radius of the slices in pie charts.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		radiusField?: string;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * The angle in degrees at which the first polar series item should start.
		 * @configuration
		 * @optional
		 * @default 0
		 * @type {number}
		 */
		rotation?: number;
		/** 
		 * Whether to add the series elements as legend items.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		xAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		yAxis?: object;
		/** 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		yField?: string;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Scatter {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Scatter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Scatter.html)
	 * Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.
	 * These variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.
	 * As with all other series, the Scatter Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information on creating charts. A typical configuration object for the scatter could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       interactions: ['itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'scatter',
	 *           highlight: {
	 *               size: 12,
	 *               radius: 12,
	 *               fill: '#96D4C6',
	 *               stroke: '#30BDA7'
	 *           },
	 *           fill: true,
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               fill: '#30BDA7',
	 *               radius: 10,
	 *               lineWidth: 0
	 *           }
	 *       }
	 *    });
	 * 
	 * In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,
	 * `data1`, `data2` and `data3` respectively. All x-fields for the series must be the same field, in this case `name`.
	 * Each scatter series has a different styling configuration for markers, specified by the `marker` object. Finally we set the left axis as
	 * axis to show the current values of the elements.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @default {fx: {customDurations: {translationX: 0, translationY: 0}}}
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Series {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.Series](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html)
	 * Series is the abstract class containing the common logic to all chart series. Series includes
	 * methods from Labels, Highlights, and Callouts mixins. This class implements the logic of
	 * animating, hiding, showing all elements and returning the color of the series to be used as a legend item.
	 * 
	 * ## Listeners
	 * 
	 * The series class supports listeners via the Observable syntax.
	 * 
	 * For example:
	 * 
	 *    Ext.create('Ext.chart.CartesianChart', {
	 *        plugins: {
	 *            ptype: 'chartitemevents',
	 *            moveEvents: true
	 *        },
	 *        store: {
	 *            fields: ['pet', 'households', 'total'],
	 *            data: [
	 *                {pet: 'Cats', households: 38, total: 93},
	 *                {pet: 'Dogs', households: 45, total: 79},
	 *                {pet: 'Fish', households: 13, total: 171}
	 *            ]
	 *        },
	 *        axes: [{
	 *            type: 'numeric',
	 *            position: 'left'
	 *        }, {
	 *            type: 'category',
	 *            position: 'bottom'
	 *        }],
	 *        series: [{
	 *            type: 'bar',
	 *            xField: 'pet',
	 *            yField: 'households',
	 *            listeners: {
	 *                itemmousemove: function (series, item, event) {
	 *                    console.log('itemmousemove', item.category, item.field);
	 *                }
	 *            }
	 *        }, {
	 *            type: 'line',
	 *            xField: 'pet',
	 *            yField: 'total',
	 *            marker: true
	 *        }]
	 *    });
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|any[]}
		 */
		hidden?: boolean | any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.StackedCartesian {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.chart.series.StackedCartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html)
	 * Abstract class for all the stacked cartesian series including area series
	 * and bar series.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The series animation configuration.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		animation?: object;
		/** 
		 * Sets the background of the surface the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		background?: object;
		/** 
		 * The chart that the series is bound.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		chart?: object;
		/** 
		 * An array of color values which is used, in order of appearance, by the series. Each series
		 * can request one or more colors from the array. Radar, Scatter or Line charts require just
		 * one color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts
		 * and Stacked charts (like Column or Pie charts) require one color for each data category
		 * they represent, so one color for each slice of a Pie chart or each segment of a Column chart.
		 * It overrides the colors that are provided by the current theme.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		colors?: any[];
		/** 
		 * If `true`, the height of a stacked bar is always the full height of the chart,
		 * with individual components viewed as shares of the whole determined by the
		 * [fullStackTotal](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStackTotal) config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		fullStack?: boolean;
		/** 
		 * If the [fullStack](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html#cfg-fullStack) config is set to `true`, this will determine
		 * the absolute total value of each stack.
		 * @configuration
		 * @optional
		 * @default 100
		 * @type {boolean}
		 */
		fullStackTotal?: boolean;
		/** 
		 * @configuration
		 * @optional
		 * @default []
		 * @type {any[]}
		 */
		hidden?: any[];
		/** 
		 * The sprite attributes that will be applied to the highlighted items in the series.
		 * If set to 'true', the default highlight style from [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg) will be used.
		 * If the value of this config is an object, it will be merged with the [highlightCfg](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlightCfg).
		 * In case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,
		 * provide the 'highlightCfg' instead.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean|object}
		 */
		highlight?: boolean | object;
		/** 
		 * The default style for the highlighted item.
		 * Used when [highlight](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-highlight) config was simply set to 'true' instead of specifying a style.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightCfg?: object;
		/** 
		 * The item currently highlighted in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		highlightItem?: object;
		/** 
		 * The sprite template used to create sprite instances in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		itemInstancing?: object;
		/** 
		 * Object with the following properties:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		label?: object;
		/** 
		 * Extra distance value for which the labelOverflow listener is triggered.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		labelOverflowPadding?: number;
		/** 
		 * The sprite template used by marker instances on the series.
		 * If the value of the marker config is set to `true` or the type
		 * of the sprite instance is not specified, the [Ext.draw.sprite.Circle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.draw.sprite.Circle.html)
		 * sprite will be used.
		 * 
		 * Examples:
		 * 
		 *    marker: true
		 *    
		 *    marker: {
		 *        radius: 8
		 *    }
		 *    
		 *    marker: {
		 *        type: 'arrow',
		 *        fx: {
		 *            duration: 200,
		 *            easing: 'backOut'
		 *        }
		 *    }
		 * 
		 * @configuration
		 * @optional
		 * @type {object|boolean}
		 */
		marker?: object | boolean;
		/** 
		 * This is cyclic used if series have multiple marker sprites.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		markerSubStyle?: object;
		/** 
		 * The surface used to render series labels.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		overlaySurface?: object;
		/** 
		 * A function that can be provided to set custom styling properties to each rendered element.
		 * It receives `(sprite, config, rendererData, index)` as parameters.
		 * @configuration
		 * @optional
		 */
		renderer?: ExtGlobalFunction;
		/** 
		 * Whether to show this series in the legend.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showInLegend?: boolean;
		/** 
		 * Whether markers should be displayed at the data points along the line. If true,
		 * then the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) config item will determine the markers' styling.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		showMarkers?: boolean;
		/** 
		 * `true` to stack negative/positive values in respective y-axis directions.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		splitStacks?: boolean;
		/** 
		 * `true` to display the series in its stacked configuration.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		stacked?: boolean;
		/** 
		 * The store of values used in the series.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		store?: object;
		/** 
		 * Custom style configuration for the sprite used in the series.
		 * It overrides the style that is provided by the current theme.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		style?: object;
		/** 
		 * This is the cyclic used if the series has multiple sprites.
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		subStyle?: object;
		/** 
		 * The surface that the series is attached.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		surface?: object;
		/** 
		 * Style configuration that is provided by the current theme.
		 * It is composed of five objects:
		 * @configuration
		 * @optional
		 * @default {}
		 * @type {object}
		 */
		themeStyle?: object;
		/** 
		 * The human-readable name of the series (displayed in the legend).
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		title?: string | string[];
		/** 
		 * Add tooltips to the visualization's markers. The config options for the
		 * tooltip are the same configuration used with Ext.tip.ToolTip plus a
		 * `renderer` config option and a `scope` for the renderer. For example:
		 * 
		 *    tooltip: {
		 *      trackMouse: true,
		 *      width: 140,
		 *      height: 28,
		 *      renderer: function (toolTip, record, ctx) {
		 *          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');
		 *      }
		 *    }
		 * 
		 * Note that tooltips are shown for series markers and won't work
		 * if the [marker](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html#cfg-marker) is not configured.
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		tooltip?: object;
		/** 
		 * Trigger drawlistener flag
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		triggerAfterDraw?: boolean;
		/** 
		 * Colors for the series can be set directly through the 'colors' config, or indirectly
		 * with the current theme or the 'colors' config that is set onto the chart. These colors
		 * are used as "fill color". Set this config to true, if you want a darker color for the
		 * strokes. Set it to false if you want to use the same color as the fill color.
		 * Alternatively, you can set it to a number between 0 and 1 to control how much darker
		 * the strokes should be.
		 * Note: this should be initial config and cannot be changed later on.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean|number}
		 */
		useDarkerStrokeColor?: boolean | number;
		/** 
		 * xAxis The chart axis the series is bound to in the 'X' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple x-axes, this defines which x-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		xAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field used to access the x axis value from the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		xField?: string;
		/** 
		 * yAxis The chart axis the series is bound to in the 'Y' direction.
		 * Normally, this would be set automatically by the series.
		 * For charts with multiple y-axes, this defines which y-axis is used by the series.
		 * It refers to either axis' ID or the (zero-based) index of the axis
		 * in the chart's [axes](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html#cfg-axes) config.
		 * @configuration
		 * @optional
		 * @type {Ext.chart.axis.Axis|number|string}
		 */
		yAxis?: Ext.chart.axis.Axis | number | string;
		/** 
		 * The field(s) used to access the y-axis value(s) of the items from the data source.
		 * @configuration
		 * @optional
		 * @type {string|string[]}
		 */
		yField?: string | string[];
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}   config
		 * @returns {Ext.Base}        this
		 */
		initConfig? (config: object): Ext.Base;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object} name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}        [value] The value to set for the name parameter.
		 * @returns {Ext.Base}              this
		 */
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.Base.Statics}  
		 */
		statics? (): Ext.Base.Statics;
	}
}
declare namespace Ext.chart.series.Area {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Area](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Area.html)
	 * Creates an Area Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2', 'data3'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 10,
	 *               data2: 12,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 7,
	 *               data2: 8,
	 *               data3: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 5,
	 *               data2: 2,
	 *               data3: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 2,
	 *               data2: 14,
	 *               data3: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 27,
	 *               data2: 38,
	 *               data3: 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name']
	 *       }],
	 *       series: {
	 *           type: 'area',
	 *           subStyle: {
	 *               fill: ['#0A3F50', '#30BDA7', '#96D4C6']
	 *           },
	 *           xField: 'name',
	 *           yField: ['data1', 'data2', 'data3']
	 *       }
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Bar {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Bar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar.html)
	 * Creates a Bar or Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar' series is meant to be used with the
	 * ['category'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['name', 'value'],
	 *           data: [{
	 *               name: 'metric one',
	 *               value: 10
	 *           }, {
	 *               name: 'metric two',
	 *               value: 7
	 *           }, {
	 *               name: 'metric three',
	 *               value: 5
	 *           }, {
	 *               name: 'metric four',
	 *               value: 2
	 *           }, {
	 *               name: 'metric five',
	 *               value: 27
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'value'
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar',
	 *           subStyle: {
	 *               fill: ['#388FAD'],
	 *               stroke: '#1F6D91'
	 *           },
	 *           xField: 'name',
	 *           yField: 'value'
	 *       }
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Bar3D {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Bar3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Bar3D.html)
	 * Creates a 3D Bar or 3D Column Chart (depending on the value of the
	 * [flipXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.CartesianChart.html#cfg-flipXY) config).
	 * 
	 * Note: 'bar3d' series is meant to be used with the
	 * ['category3d'](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.axis.Category.html) axis as its x-axis.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: Ext.getBody(),
	 *       width: 600,
	 *       height: 400,
	 *       innerPadding: '0 10 0 10',
	 *       store: {
	 *           fields: ['name', 'apples', 'oranges'],
	 *           data: [{
	 *               name: 'Eric',
	 *               apples: 10,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Mary',
	 *               apples: 7,
	 *               oranges: 2
	 *           }, {
	 *               name: 'John',
	 *               apples: 5,
	 *               oranges: 2
	 *           }, {
	 *               name: 'Bob',
	 *               apples: 2,
	 *               oranges: 3
	 *           }, {
	 *               name: 'Joe',
	 *               apples: 19,
	 *               oranges: 1
	 *           }, {
	 *               name: 'Macy',
	 *               apples: 13,
	 *               oranges: 4
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric3d',
	 *           position: 'left',
	 *           fields: ['apples', 'oranges'],
	 *           title: {
	 *               text: 'Inventory',
	 *               fontSize: 15
	 *           },
	 *           grid: {
	 *               odd: {
	 *                   fillStyle: 'rgba(255, 255, 255, 0.06)'
	 *               },
	 *               even: {
	 *                   fillStyle: 'rgba(0, 0, 0, 0.03)'
	 *               }
	 *           }
	 *       }, {
	 *           type: 'category3d',
	 *           position: 'bottom',
	 *           title: {
	 *               text: 'People',
	 *               fontSize: 15
	 *           },
	 *           fields: 'name'
	 *       }],
	 *       series: {
	 *           type: 'bar3d',
	 *           xField: 'name',
	 *           yField: ['apples', 'oranges']
	 *       }
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.CandleStick {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.CandleStick](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.CandleStick.html)
	 * Creates a candlestick or OHLC Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['time', 'open', 'high', 'low', 'close'],
	 *           data: [{
	 *               'time': new Date('Jan 1 2010').getTime(),
	 *               'open': 600,
	 *               'high': 614,
	 *               'low': 578,
	 *               'close': 590
	 *           }, {
	 *               'time': new Date('Jan 2 2010').getTime(),
	 *               'open': 590,
	 *               'high': 609,
	 *               'low': 580,
	 *               'close': 580
	 *           }, {
	 *               'time': new Date('Jan 3 2010').getTime(),
	 *               'open': 580,
	 *               'high': 602,
	 *               'low': 578,
	 *               'close': 602
	 *           }, {
	 *               'time': new Date('Jan 4 2010').getTime(),
	 *               'open': 602,
	 *               'high': 614,
	 *               'low': 586,
	 *               'close': 586
	 *           }, {
	 *               'time': new Date('Jan 5 2010').getTime(),
	 *               'open': 586,
	 *               'high': 602,
	 *               'low': 565,
	 *               'close': 565
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['open', 'high', 'low', 'close'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 560,
	 *           maximum: 640
	 *       }, {
	 *           type: 'time',
	 *           position: 'bottom',
	 *           fields: ['time'],
	 *           fromDate: new Date('Dec 31 2009'),
	 *           toDate: new Date('Jan 6 2010'),
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           style: {
	 *               axisLine: false
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'candlestick',
	 *           xField: 'time',
	 *           openField: 'open',
	 *           highField: 'high',
	 *           lowField: 'low',
	 *           closeField: 'close',
	 *           style: {
	 *               dropStyle: {
	 *                   fill: 'rgb(222, 87, 87)',
	 *                   stroke: 'rgb(222, 87, 87)',
	 *                   lineWidth: 3
	 *               },
	 *               raiseStyle: {
	 *                   fill: 'rgb(48, 189, 167)',
	 *                   stroke: 'rgb(48, 189, 167)',
	 *                   lineWidth: 3
	 *               }
	 *           }
	 *       }
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Cartesian {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Cartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Cartesian.html)
	 * Common base class for series implementations that plot values using cartesian coordinates.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Gauge {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Gauge](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Gauge.html)
	 * Creates a Gauge Chart.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       store: {
	 *           fields: ['mph', 'fuel', 'temp', 'rpm'],
	 *           data: [{
	 *               mph: 65,
	 *               fuel: 50,
	 *               temp: 150,
	 *               rpm: 6000
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'gauge',
	 *           colors: ['#1F6D91', '#90BCC9'],
	 *           angleField: 'mph',
	 *           needle: true,
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Line {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Line](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Line.html)
	 * Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different
	 * categories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.
	 * As with all other series, the Line Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the line series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: [{
	 *           type: 'line',
	 *           style: {
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2
	 *           },
	 *           xField: 'name',
	 *           yField: 'data1',
	 *           marker: {
	 *               type: 'path',
	 *               path: ['M', - 4, 0, 0, 4, 4, 0, 0, - 4, 'Z'],
	 *               stroke: '#30BDA7',
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }, {
	 *           type: 'line',
	 *           fill: true,
	 *           style: {
	 *               fill: '#96D4C6',
	 *               fillOpacity: .6,
	 *               stroke: '#0A3F50',
	 *               strokeOpacity: .6,
	 *           },
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               radius: 4,
	 *               lineWidth: 2,
	 *               fill: 'white'
	 *           }
	 *       }]
	 *    });
	 * 
	 * In this configuration we're adding two series (or lines), one bound to the `data1`
	 * property of the store and the other to `data3`. The type for both configurations is
	 * `line`. The `xField` for both series is the same, the `name` property of the store.
	 * Both line series share the same axis, the left axis. You can set particular marker
	 * configuration by adding properties onto the marker object. Both series have
	 * an object as highlight so that markers animate smoothly to the properties in highlight
	 * when hovered. The second series has `fill = true` which means that the line will also
	 * have an area below it of the same color.
	 * 
	 * **Note:** In the series definition remember to explicitly set the axis to bind the
	 * values of the line series to. This can be done by using the `axis` configuration property.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Pie {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Pie](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie.html)
	 * Creates a Pie Chart. A Pie Chart is a useful visualization technique to display
	 * quantitative information for different categories that also have a meaning as a whole.
	 * As with all other series, the Pie Series must be appended in the _series_ Chart array
	 * configuration. See the Chart documentation for more information. A typical configuration
	 * object for the pie series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar',
	 *       renderTo: document.body,
	 *       width: 400,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: ['rotate', 'itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               name: 'metric one',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric two',
	 *               data1: 16
	 *           }, {
	 *               name: 'metric three',
	 *               data1: 14
	 *           }, {
	 *               name: 'metric four',
	 *               data1: 6
	 *           }, {
	 *               name: 'metric five',
	 *               data1: 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie',
	 *           highlight: true,
	 *           angleField: 'data1',
	 *           label: {
	 *               field: 'name',
	 *               display: 'rotate'
	 *           },
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 * In this configuration we set `pie` as the type for the series, then set the `highlight` config
	 * to `true` (we can also specify an object with specific style properties for highlighting options)
	 * which is triggered when hovering or tapping elements.
	 * We set `data1` as the value of the `angleField` to determine the angle span for each pie slice.
	 * We also set a label configuration object where we set the name of the store field
	 * to be rendered as text for the label. The labels will also be displayed rotated.
	 * And finally, we specify the donut hole radius for the pie series in percentages of the series radius.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Pie3D {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Pie3D](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Pie3D.html)
	 * Creates a 3D Pie Chart.
	 * 
	 * **Note:** Labels, legends, and lines are not currently available when using the
	 * 3D Pie chart series.
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       theme: 'green',
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['data3'],
	 *           data: [{
	 *               'data3': 14
	 *           }, {
	 *               'data3': 16
	 *           }, {
	 *               'data3': 14
	 *           }, {
	 *               'data3': 6
	 *           }, {
	 *               'data3': 36
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'pie3d',
	 *           angleField: 'data3',
	 *           donut: 30
	 *       }
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Polar {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Polar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Polar.html)
	 * Common base class for series implementations that plot values using polar coordinates.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Radar {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Radar](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Radar.html)
	 * Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for
	 * a constrained number of categories.
	 * As with all other series, the Radar series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information. A typical configuration object for the radar series could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'polar', 
	 *       renderTo: document.body,
	 *       width: 500,
	 *       height: 400,
	 *       interactions: 'rotate',
	 *       store: {
	 *           fields: ['name', 'data1'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 8
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 10
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 12
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 1
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 13
	 *           }]
	 *       },
	 *       series: {
	 *           type: 'radar',
	 *           angleField: 'name',
	 *           radiusField: 'data1',
	 *           style: {
	 *               fillStyle: '#388FAD',
	 *               fillOpacity: .1,
	 *               strokeStyle: '#388FAD',
	 *               strokeOpacity: .8,
	 *               lineWidth: 1
	 *           }
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'radial',
	 *           fields: 'data1',
	 *           style: {
	 *               estStepSize: 10
	 *           },
	 *           grid: true
	 *       }, {
	 *           type: 'category',
	 *           position: 'angular',
	 *           fields: 'name',
	 *           style: {
	 *               estStepSize: 1
	 *           },
	 *           grid: true
	 *       }]
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Scatter {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Scatter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Scatter.html)
	 * Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.
	 * These variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.
	 * As with all other series, the Scatter Series must be appended in the _series_ Chart array configuration. See the Chart
	 * documentation for more information on creating charts. A typical configuration object for the scatter could be:
	 * 
	 *    Ext.create({
	 *       xtype: 'cartesian', 
	 *       renderTo: document.body,
	 *       width: 600,
	 *       height: 400,
	 *       insetPadding: 40,
	 *       interactions: ['itemhighlight'],
	 *       store: {
	 *           fields: ['name', 'data1', 'data2'],
	 *           data: [{
	 *               'name': 'metric one',
	 *               'data1': 10,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric two',
	 *               'data1': 7,
	 *               'data2': 16
	 *           }, {
	 *               'name': 'metric three',
	 *               'data1': 5,
	 *               'data2': 14
	 *           }, {
	 *               'name': 'metric four',
	 *               'data1': 2,
	 *               'data2': 6
	 *           }, {
	 *               'name': 'metric five',
	 *               'data1': 27,
	 *               'data2': 36
	 *           }]
	 *       },
	 *       axes: [{
	 *           type: 'numeric',
	 *           position: 'left',
	 *           fields: ['data1'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           },
	 *           grid: true,
	 *           minimum: 0
	 *       }, {
	 *           type: 'category',
	 *           position: 'bottom',
	 *           fields: ['name'],
	 *           title: {
	 *               text: 'Sample Values',
	 *               fontSize: 15
	 *           }
	 *       }],
	 *       series: {
	 *           type: 'scatter',
	 *           highlight: {
	 *               size: 12,
	 *               radius: 12,
	 *               fill: '#96D4C6',
	 *               stroke: '#30BDA7'
	 *           },
	 *           fill: true,
	 *           xField: 'name',
	 *           yField: 'data2',
	 *           marker: {
	 *               type: 'circle',
	 *               fill: '#30BDA7',
	 *               radius: 10,
	 *               lineWidth: 0
	 *           }
	 *       }
	 *    });
	 * 
	 * In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,
	 * `data1`, `data2` and `data3` respectively. All x-fields for the series must be the same field, in this case `name`.
	 * Each scatter series has a different styling configuration for markers, specified by the `marker` object. Finally we set the left axis as
	 * axis to show the current values of the elements.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.Series {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.Series](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.Series.html)
	 * Series is the abstract class containing the common logic to all chart series. Series includes
	 * methods from Labels, Highlights, and Callouts mixins. This class implements the logic of
	 * animating, hiding, showing all elements and returning the color of the series to be used as a legend item.
	 * 
	 * ## Listeners
	 * 
	 * The series class supports listeners via the Observable syntax.
	 * 
	 * For example:
	 * 
	 *    Ext.create('Ext.chart.CartesianChart', {
	 *        plugins: {
	 *            ptype: 'chartitemevents',
	 *            moveEvents: true
	 *        },
	 *        store: {
	 *            fields: ['pet', 'households', 'total'],
	 *            data: [
	 *                {pet: 'Cats', households: 38, total: 93},
	 *                {pet: 'Dogs', households: 45, total: 79},
	 *                {pet: 'Fish', households: 13, total: 171}
	 *            ]
	 *        },
	 *        axes: [{
	 *            type: 'numeric',
	 *            position: 'left'
	 *        }, {
	 *            type: 'category',
	 *            position: 'bottom'
	 *        }],
	 *        series: [{
	 *            type: 'bar',
	 *            xField: 'pet',
	 *            yField: 'households',
	 *            listeners: {
	 *                itemmousemove: function (series, item, event) {
	 *                    console.log('itemmousemove', item.category, item.field);
	 *                }
	 *            }
	 *        }, {
	 *            type: 'line',
	 *            xField: 'pet',
	 *            yField: 'total',
	 *            marker: true
	 *        }]
	 *    });
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}
declare namespace Ext.chart.series.StackedCartesian {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.chart.series.StackedCartesian](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.series.StackedCartesian.html)
	 * Abstract class for all the stacked cartesian series including area series
	 * and bar series.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been attached to this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartattached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when the [Ext.chart.AbstractChart](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.AbstractChart.html) has been detached from this series.
		 * @event
		 * @param   {Ext.chart.AbstractChart} chart
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		chartdetached? (chart: Ext.chart.AbstractChart, series: Ext.chart.series.Series, eOpts: object): void;
		/** 
		 * Fires when a click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a double click event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemdblclick? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mousedown event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousedown? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse is moved on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmousemove? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse exits a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseout? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the mouse enters a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseover? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a mouseup event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemmouseup? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when a tap event occurs on a series item.
		 * _Note_: This event requires the [chartitemevents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.chart.plugin.ItemEvents.html)
		 * plugin be added to the chart.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {object}                  item
		 * @param   {Event}                   event
		 * @param   {object}                  eOpts  The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		itemtap? (series: Ext.chart.series.Series, item: object, event: Event, eOpts: object): void;
		/** 
		 * Fires when the store of the series changes.
		 * @event
		 * @param   {Ext.chart.series.Series} series
		 * @param   {Ext.data.Store}          newStore
		 * @param   {Ext.data.Store}          oldStore
		 * @param   {object}                  eOpts    The options object passed to Ext.util.Observable.addListener.
		 * @returns {void}                    
		 */
		storechange? (series: Ext.chart.series.Series, newStore: Ext.data.Store, oldStore: Ext.data.Store, eOpts: object): void;
	}
}

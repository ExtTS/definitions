declare namespace Ext.dom {
	/** 
	 * A special [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) used by Buttons.  Since buttons use `display:table` elements
	 * for their layout, some special adjustments are needed when the width switches from
	 * auto to fixed width and back.
	 * 
	 * When the button has a width other than `auto`, and a right-aligned arrow, long button
	 * text will cause the arrow to disappear off the right edge of the button if the btnWrap
	 * element has table-layout:auto.  To prevent this, we need to set table-layout:fixed
	 * on the btnWrap when the button has a width, however, when the button is shrinkwrap
	 * width the btnWrap cannot have table-layout:fixed because its width:100% style will
	 * cause the button to expand outward.
	 * 
	 * Additionally, in shrinkWrap height mode, the button css sets a height on the btnEl
	 * element, but if the height is being stretched, the btnEl's height will cause the contents
	 * to be incorrectly vertically centered, so we dynamically set the btnEl's height to
	 * "auto" in fixed-height mode.
	 * @private (class)
	 */
	class ButtonElement extends Ext.dom.Element {}
	/** 
	 * [Ext.dom.CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The methods from
	 * these classes will be performed on all the elements in this collection.
	 * 
	 * All methods return _this_ and can be chained.
	 * 
	 * Usage:
	 * 
	 *     var els = Ext.select("#some-el div.some-class", true);
	 *     // or select directly from an existing element
	 *     var el = Ext.get('some-el');
	 *     el.select('div.some-class', true);
	 *    
	 *     els.setWidth(100); // all elements become 100 width
	 *     els.hide(true); // all elements fade out and hide
	 *     // or
	 *     els.setWidth(100).hide(true);
	 * 
	 */
	class CompositeElement extends Ext.dom.CompositeElementLite {
		/** 
		 * Get the reference to the current class from which this object was instantiated. Unlike [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics),
		 * `this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics)
		 * for a detailed comparison
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            alert(this.self.speciesName); // dependent on 'this'
		 *        },
		 *    
		 *        clone: function() {
		 *            return new this.self();
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *        statics: {
		 *            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                     // alerts 'Cat'
		 *    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'
		 * 
		 * @property
		 * @protected (property)
		 * @default Ext.Base
		 * @type {Ext.dom.CompositeElement.Statics}
		 */
		self?: Ext.dom.CompositeElement.Statics | Ext.dom.CompositeElementLite.Statics | Ext.Base.Statics;
		/** 
		 * @property
		 * @private (property)
		 * @default false
		 * @type {boolean}
		 */
		isLite?: boolean;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         members    The members to add to this class.
		 * @param   {boolean}                                                        [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                                        [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}            
		 */
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.CompositeElement;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.CompositeElementLite;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         members
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}         this
		 */
		static addStatics? (members: object): typeof Ext.dom.CompositeElement;
		static addStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		static addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		static createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		static fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		static fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		static get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		static getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		static getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		static getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		static getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		static getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		static getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		static getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		static getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		static getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		static normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		static override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		static parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		static parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		static query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		static select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		static serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		static unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		static create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		static create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		static _onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static _onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		static addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         members
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}         
		 */
		static addInheritableStatics? (members: object): typeof Ext.dom.CompositeElement;
		static addInheritableStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		static addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         name
		 * @param   {object}                                                         member
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}        
		 */
		static addMember? (name: object, member: object): typeof Ext.dom.CompositeElement;
		static addMember? (name: object, member: object): typeof Ext.dom.CompositeElementLite;
		static addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		static addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		static borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  
		 */
		static detach? (): typeof Ext.dom.CompositeElement;
		static detach? (): typeof Ext.dom.CompositeElementLite;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		static extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		static getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		static mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         fn
		 * @param   {object}                                                         scope
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}       
		 */
		static onExtended? (fn: object, scope: object): typeof Ext.dom.CompositeElement;
		static onExtended? (fn: object, scope: object): typeof Ext.dom.CompositeElementLite;
		static onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static triggerExtended? (): void;
		/** 
		 * Creates new Element directly by passing an id or the HTMLElement.  This
		 * constructor should not be called directly.  Always use [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)
		 * or [Ext#fly()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) instead.
		 * 
		 * In older versions of Ext JS and Sencha Touch this constructor checked to see if
		 * there was already an instance of this element in the cache and if so, returned
		 * the same instance. As of version 5 this behavior has been removed in order to
		 * avoid a redundant cache lookup since the most common path is for the Element
		 * constructor to be called from [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get), which has already
		 * checked for a cache entry.
		 * 
		 * Correct way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or retrieving it from the cache):
		 * 
		 *    var el = Ext.get('foo'); // by id
		 *    
		 *    var el = Ext.get(document.getElementById('foo')); // by DOM reference
		 * 
		 * Incorrect way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * 
		 *    var el = new Ext.dom.Element('foo');
		 * 
		 * For quick and easy access to [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods use a flyweight:
		 * 
		 *    Ext.fly('foo').addCls('foo-hovered');
		 * 
		 * This simply attaches the DOM node with id='foo' to the global flyweight Element
		 * instance to avoid allocating an extra [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance.  If, however,
		 * the Element instance has already been cached by a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)(),
		 * then [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)() will return the cached Element instance.  For more info see
		 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly).
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement} element
		 */
		constructor (element: string | HTMLElement);
		/** 
		 * Adds elements to this Composite object.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {HTMLElement[]|Ext.dom.CompositeElementLite}            els
		 * Either an Array of DOM elements to add, or another Composite
		 * object who's elements should be added.
		 * @param   {HTMLElement|string}                                    [root] The root element of the query or id of the root.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        This Composite object.
		 */
		add? (els: HTMLElement[] | Ext.dom.CompositeElementLite, root?: HTMLElement | string): Ext.dom.CompositeElement;
		add? (els: HTMLElement[] | Ext.dom.CompositeElementLite, root?: HTMLElement | string): Ext.dom.CompositeElementLite;
		/** 
		 * Alias for [onAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addAfterListener? (): void;
		/** 
		 * Alias for [onBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addBeforeListener? (): void;
		/** 
		 * Adds the given CSS class(es) to this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}                                       names
		 * The CSS classes to add separated by space,
		 * or an array of classes
		 * @param   {string}                                                [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}                                                [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}          this
		 */
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.CompositeElement;
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.CompositeElementLite;
		/** 
		 * The addManagedListener method is used when some object (call it "A") is listening
		 * to an event on another observable object ("B") and you want to remove that listener
		 * from "B" when "A" is destroyed. This is not an issue when "B" is destroyed because
		 * all of its listeners will be removed at that time.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Foo', {
		 *        extend: 'Ext.Component',
		 *    
		 *        initComponent: function () {
		 *            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);
		 *            this.callParent();
		 *        }
		 *    });
		 * 
		 * As you can see, when an instance of Foo is destroyed, it ensures that the 'show'
		 * listener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.
		 * 
		 * As of version 5.1 it is no longer necessary to use this method in most cases because
		 * listeners are automatically managed if the scope object provided to
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) is an Observable instance.
		 * However, if the observable instance and scope are not the same object you
		 * still need to use `mon` or `addManagedListener` if you want the listener to be
		 * managed.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Aligns the element with another element relative to the specified anchor points. If
		 * the other element is the document it aligns it to the viewport. The position
		 * parameter is optional, and can be specified in any one of the following formats:
		 * 
		 * - **Blank**: Defaults to aligning the element's top-left corner to the target's
		 *   bottom-left corner ("tl-bl").
		 * - **One anchor (deprecated)**: The passed anchor position is used as the target
		 *   element's anchor point.  The element being aligned will position its top-left
		 *   corner (tl) to that point. _This method has been deprecated in favor of the newer
		 *   two anchor syntax below_.
		 * - **Two anchors**: If two values from the table below are passed separated by a dash,
		 *   the first value is used as the element's anchor point, and the second value is
		 *   used as the target's anchor point.
		 * 
		 * In addition to the anchor points, the position parameter also supports the "?"
		 * character. If "?" is passed at the end of the position string, the element will
		 * attempt to align as specified, but the position will be adjusted to constrain to
		 * the viewport if necessary. Note that the element being aligned might be swapped to
		 * align to a different position than that specified in order to enforce the viewport
		 * constraints. Following are all of the supported anchor positions:
		 * 
		 *    Value  Description
		 *    -----  -----------------------------
		 *    tl     The top left corner (default)
		 *    t      The center of the top edge
		 *    tr     The top right corner
		 *    l      The center of the left edge
		 *    c      In the center of the element
		 *    r      The center of the right edge
		 *    bl     The bottom left corner
		 *    b      The center of the bottom edge
		 *    br     The bottom right corner
		 * 
		 * Example Usage:
		 * 
		 *    // align el to other-el using the default positioning
		 *    // ("tl-bl", non-constrained)
		 *    el.alignTo("other-el");
		 *    
		 *    // align the top left corner of el with the top right corner of other-el
		 *    // (constrained to viewport)
		 *    el.alignTo("other-el", "tr?");
		 *    
		 *    // align the bottom right corner of el with the center left edge of other-el
		 *    el.alignTo("other-el", "br-l?");
		 *    
		 *    // align the center of el with the bottom left corner of other-el and
		 *    // adjust the x position by -6 pixels (and the y position by 0)
		 *    el.alignTo("other-el", "c-bl", [-6, 0]);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.util.Positionable|HTMLElement|string}              element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                                [position] The position to align to
		 * @param   {number[]}                                              [offsets]
		 * Offset the positioning by [x, y]
		 * Element animation config object
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}            this
		 */
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.CompositeElement;
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.CompositeElementLite;
		/** 
		 * Appends the passed element(s) to this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).
		 */
		appendChild? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends this element to the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element}                    el
		 * The new parent element.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}    This element.
		 */
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElement;
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElementLite;
		/** 
		 * More flexible version of [setStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setStyle) for setting style properties.
		 * 
		 * Styles in object form should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    el.applyStyles('color: white;');
		 *    
		 *    el.applyStyles({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 *    
		 *    el.applyStyles(function () {
		 *        if (name.initialConfig.html === 'Phineas Flynn') {
		 *            return 'font-style: italic;';
		 *            // OR return { fontStyle: 'italic' };
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string|object}                                styles
		 * A style specification string, e.g. "width:100px", or object in the form `{width:"100px"}`, or
		 * a function which returns such a specification.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.CompositeElement;
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.CompositeElementLite;
		/** 
		 * Tries to blur the element. Any exceptions are caught and ignored.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  this
		 */
		blur? (): Ext.dom.CompositeElement;
		blur? (): Ext.dom.CompositeElementLite;
		/** 
		 * When an element is moved around in the DOM, or is hidden using `display:none`, it loses layout, and therefore
		 * all scroll positions of all descendant elements are lost.
		 * 
		 * This function caches them, and returns a function, which when run will restore the cached positions.
		 * In the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:
		 * 
		 *    var restoreScroll = myPanel.el.cacheScrollValues();
		 *    myOtherContainer.add(myPanel);
		 *    restoreScroll();
		 * 
		 * @method
		 * @public (method)
		 * @returns {Function} 
		 * A function which will restore all descendant elements of this Element to their scroll
		 * positions recorded when this function was executed. Be aware that the returned function is a closure which has
		 * captured the scope of `cacheScrollValues`, so take care to dereference it as soon as not needed - if is it is a `var`
		 * it will drop out of scope, and the reference will be freed.
		 */
		cacheScrollValues? (): ExtGlobalFunction;
		/** 
		 * Centers the Element in either the viewport, or another Element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} centerIn
		 * element in
		 * which to center the element.
		 * @returns {Ext.dom.Element}                             This element
		 */
		center? (centerIn: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Selects a single _direct_ child based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		child? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Removes all elements from this Composite.
		 * @method
		 * @public (method)
		 * @param   {boolean} [removeDom] True to also remove the elements from the document.
		 * @returns {void}                
		 */
		clear? (removeDom?: boolean): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearListeners? (): void;
		/** 
		 * Removes all managed listeners for this object.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearManagedListeners? (): void;
		/** 
		 * Clone this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                     [deep]      `true` if the children of the node should also be cloned.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The newly cloned [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`).
		 */
		clone? (deep?: boolean, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Returns `true` if this composite contains the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|number} el
		 * The id of an element, or an [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or an HtmlElement to
		 * find within the composite collection.
		 * @returns {boolean}                                      
		 */
		contains? (el: string | HTMLElement | Ext.dom.Element | number): boolean;
		/** 
		 * Creates the passed DomHelper config and appends it to this element or optionally
		 * inserts it before the passed child element.
		 * @method
		 * @public (method)
		 * @param   {object}                      config
		 * DomHelper element config object.  If no tag is specified
		 * (e.g., {tag:'input'}) then a div will be automatically generated with the specified
		 * attributes.
		 * @param   {HTMLElement}                 [insertBefore] a child element of this element
		 * @param   {boolean}                     [returnDom]
		 * true to return the dom node instead of creating
		 * an Element
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_)
		 */
		createChild? (config: object, insertBefore?: HTMLElement, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Translates an element using CSS 3 in 2D.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		cssTranslate? (): void;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		down? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Calls the passed function for each element in this composite.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function}                                              fn         The function to call.
		 * @param   {Ext.dom.Element}                                       [fn.el]
		 * The current Element in the iteration. **This is the flyweight
		 * (shared) [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance, so if you require a a reference to the dom node, use el.dom.**
		 * @param   {Ext.dom.CompositeElementLite}                          [fn.c]     This Composite object.
		 * @param   {number}                                                [fn.index] The zero-based index in the iteration.
		 * @param   {void}                                                  fn.returns
		 * @param   {object}                                                [scope]
		 * The scope (this reference) in which the function is executed.
		 * Defaults to the Element.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}            this
		 */
		each? (fn: ((el?: Ext.dom.Element, c?: Ext.dom.CompositeElementLite, index?: number) => void) | ExtGlobalFunction, scope?: object): Ext.dom.CompositeElement;
		each? (fn: ((el?: Ext.dom.Element, c?: Ext.dom.CompositeElementLite, index?: number) => void) | ExtGlobalFunction, scope?: object): Ext.dom.CompositeElementLite;
		/** 
		 * Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if
		 * present. There is no implementation in the Observable base class.
		 * 
		 * This is commonly used by Ext.Components to bubble events to owner Containers.
		 * See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget). The default implementation in [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) returns the
		 * Component's immediate owner. But if a known target is required, this can be overridden to access the
		 * required target more quickly.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Ext.overrides.form.field.Base', {
		 *        override: 'Ext.form.field.Base',
		 *    
		 *        //  Add functionality to Field's initComponent to enable the change event to bubble
		 *        initComponent: function () {
		 *            this.callParent();
		 *            this.enableBubble('change');
		 *        }
		 *    });
		 *    
		 *    var myForm = Ext.create('Ext.form.Panel', {
		 *        title: 'User Details',
		 *        items: [{
		 *            ...
		 *        }],
		 *        listeners: {
		 *            change: function() {
		 *                // Title goes red if form has been modified.
		 *                myForm.header.setStyle('color', 'red');
		 *            }
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|string[]} eventNames The event name to bubble, or an Array of event names.
		 * @returns {void}                       
		 */
		enableBubble? (eventNames: string | string[]): void;
		/** 
		 * Clears this Composite and adds the elements passed.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {HTMLElement[]|Ext.dom.CompositeElementLite}            els
		 * Either an array of DOM elements, or another Composite from which
		 * to fill this Composite.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}     this
		 */
		fill? (els: HTMLElement[] | Ext.dom.CompositeElementLite): Ext.dom.CompositeElement;
		fill? (els: HTMLElement[] | Ext.dom.CompositeElementLite): Ext.dom.CompositeElementLite;
		/** 
		 * Filters this composite to only elements that match the passed selector.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string}                                       selector
		 * A string CSS selector or a comparison function. The comparison function will be
		 * called with the following arguments:
		 * @param   {Ext.dom.Element}                                       [selector.el]    The current DOM element.
		 * @param   {number}                                                [selector.index] The current index within the collection.
		 * @param   {void}                                                  selector.returns
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}                  this
		 */
		filter? (selector: ((el?: Ext.dom.Element, index?: number) => void) | ExtGlobalFunction | string): Ext.dom.CompositeElement;
		filter? (selector: ((el?: Ext.dom.Element, index?: number) => void) | ExtGlobalFunction | string): Ext.dom.CompositeElementLite;
		/** 
		 * Looks at this node and then at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParent? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Looks at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParentNode? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * By default, the action function will be executed after any "before" event handlers
		 * (as specified using the `order` option of
		 * [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)), but before any other
		 * handlers are fired.  This gives the "before" handlers an opportunity to
		 * cancel the event by returning `false`, and prevent the action function from
		 * being called.
		 * 
		 * The action can also be configured to run after normal handlers, but before any "after"
		 * handlers (as specified using the `order` event option) by passing `'after'`
		 * as the `order` parameter.  This configuration gives any event handlers except
		 * for "after" handlers the opportunity to cancel the event and prevent the action
		 * function from being called.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {any[]}    args      Arguments to pass to handlers and to the action function.
		 * @param   {Function} fn        The action function.
		 * @param   {object}   [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object}   [options]
		 * Event options for the action function.  Accepts any
		 * of the options of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * @param   {string}   [order]
		 * The order to call the action function relative
		 * too the event handlers (`'before'` or `'after'`).  Note that this option is
		 * simply used to sort the action function relative to the event handlers by "priority".
		 * An order of `'before'` is equivalent to a priority of `99.5`, while an order of
		 * `'after'` is equivalent to a priority of `-99.5`.  See the `priority` option
		 * of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) for more details.
		 * @returns {void}               
		 */
		fireAction? (eventName: string, args: any[], fn: ExtGlobalFunction, scope?: object, options?: object, order?: string): void;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to fire.
		 * @returns {boolean}           returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string): boolean;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}    eventName The name of the event to fire.
		 * @param   {...object} args      Variable number of parameters are passed to handlers.
		 * @returns {boolean}             returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string, ...args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameter list.
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {object[]} args      An array of parameters which are passed to handlers.
		 * @returns {boolean}            returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEventArgs? (eventName: string, args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * Evented Actions will automatically dispatch a 'before' event passing. This event will
		 * be given a special controller that allows for pausing/resuming of the event flow.
		 * 
		 * By pausing the controller the updater and events will not run until resumed. Pausing,
		 * however, will not stop the processing of any other before events.
		 * @method
		 * @public (method)
		 * @param   {string}          eventName The name of the event to fire.
		 * @param   {any[]}           args      Arguments to pass to handlers and to the action function.
		 * @param   {Function|string} fn        The action function.
		 * @param   {object}          [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {any[]|boolean}   [fnArgs]
		 * Optional arguments for the action `fn`. If not
		 * given, the normal `args` will be used to call `fn`. If `false` is passed, the
		 * `args` are used but if the first argument is this instance it will be removed
		 * from the args passed to the action function.
		 * @returns {void}                      
		 */
		fireEventedAction? (eventName: string, args: any[], fn: ExtGlobalFunction | string, scope?: object, fnArgs?: any[] | boolean): void;
		/** 
		 * Returns the first Element
		 * @method
		 * @public (method)
		 * @returns {Ext.dom.Element}  
		 */
		first? (): Ext.dom.Element;
		/** 
		 * Try to focus the element either immediately or after a timeout
		 * if `defer` argument is specified.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                [defer] Milliseconds to defer the focus
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}         this
		 */
		focus? (defer?: number): Ext.dom.CompositeElement;
		focus? (defer?: number): Ext.dom.CompositeElementLite;
		/** 
		 * Gets the x,y coordinates to align this element with another element. See
		 * [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for more info on the supported position values.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]  Offset the positioning by [x, y]
		 * @returns {number[]}                                            [x, y]
		 */
		getAlignToXY? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): number[];
		/** 
		 * Gets the x,y coordinates specified by the anchor position on the element.
		 * @method
		 * @public (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}  [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorXY? (anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the value of an attribute from the element's underlying DOM node.
		 * @method
		 * @public (method)
		 * @param   {string} name        The attribute name.
		 * @param   {string} [namespace] The namespace in which to look for the attribute.
		 * @returns {string}             The attribute value.
		 */
		getAttribute? (name: string, namespace?: string): string;
		/** 
		 * Returns an object containing a map of all attributes of this element's DOM node.
		 * @method
		 * @public (method)
		 * @returns {object}  Key/value pairs of attribute names and their values.
		 */
		getAttributes? (): object;
		/** 
		 * Gets the width of the border(s) for the specified side(s)
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the border **l**eft
		 * width + the border **r**ight width.
		 * @returns {number}      The width of the sides passed added together
		 */
		getBorderWidth? (side: string): number;
		/** 
		 * Gets the bottom Y coordinate of the element (element Y position + element height)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinate
		 * @returns {number}        
		 */
		getBottom? (local: boolean): number;
		/** 
		 * Return an object defining the area of this Element which can be passed to
		 * [setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentBox]
		 * If true a box for the content of the element is
		 * returned.
		 * @param   {boolean} [local]
		 * If true the element's left and top relative to its
		 * `offsetParent` are returned instead of page x/y.
		 * @returns {object}               An object in the format
		 */
		getBox? (contentBox?: boolean, local?: boolean): object;
		/** 
		 * Returns a child element of this element given its `id`.
		 * @method
		 * @public (method)
		 * @param   {string}                      id      The id of the desired child element.
		 * @param   {boolean}                     [asDom]
		 * True to return the DOM element, false to return a
		 * wrapped Element object.
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The child element (or HTMLElement if
		 * _asDom_ is _true_).  Or null if no match was found.
		 */
		getById? (id: string, asDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns a region object that defines the client area of this element.
		 * 
		 * That is, the area _within_ any scrollbars.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getClientRegion? (): Ext.util.Region;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the content region of this element for purposes of constraining floating
		 * children.  That is the region within the borders and scrollbars, but not within the padding.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getConstrainRegion? (): void;
		/** 
		 * Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best
		 * attempt to constrain within the passed constraint. Returns `false` if the element
		 * does not need to be moved.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * The constraint may either be an existing element into which the element is to be
		 * constrained, or a [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) into which this element is to be
		 * constrained.
		 * 
		 * By default, any extra shadow around the element is **not** included in the constrain calculations - the edges
		 * of the element are used as the element bounds. To constrain the shadow within the constrain region, set the
		 * `constrainShadow` property on this element to `true`.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string|Ext.util.Region} [constrainTo]
		 * The
		 * Positionable, HTMLElement, element id, or Region into which the element is to be
		 * constrained.
		 * @param   {number[]}                                                 [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to produce a vector for instead of using the element's current position
		 * @param   {number[]}                                                 [proposedSize]
		 * A proposed `[width, height]` size to constrain
		 * instead of using the element's current size
		 * @returns {number[]|boolean}                                         
		 * **If** the element _needs_ to be translated, an `[X, Y]`
		 * vector by which this element must be translated. Otherwise, `false`.
		 */
		getConstrainVector? (constrainTo?: Ext.util.Positionable | HTMLElement | string | Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]): number[] | boolean;
		/** 
		 * Returns the number of elements in this Composite.
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getCount? (): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHTML? (): string;
		/** 
		 * Returns the offset height of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentHeight] `true` to get the height minus borders and padding.
		 * @returns {number}                  The element's height.
		 */
		getHeight? (contentHeight?: boolean): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHtml? (): string;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Gets the left X coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of
		 * page coordinate
		 * @returns {number}        
		 */
		getLeft? (local: boolean): number;
		/** 
		 * Returns the x coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local x coordinate
		 */
		getLocalX? (): number;
		/** 
		 * Returns the x and y coordinates of this element relative to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number[]}  The local XY position of the element
		 */
		getLocalXY? (): number[];
		/** 
		 * Returns the y coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local y coordinate
		 */
		getLocalY? (): number;
		/** 
		 * Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
		 * then it returns the calculated width of the sides (see [getPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-getPadding)).
		 * @method
		 * @public (method)
		 * @param   {string}        [sides] Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		 * @returns {object|number}         
		 */
		getMargin? (sides?: string): object | number;
		/** 
		 * Returns the offsets of this element from the passed element. The element must both
		 * be part of the DOM tree and not have display:none to have page coordinates.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} offsetsTo
		 * The Positionable,
		 * HTMLElement, or element id to get get the offsets from.
		 * @returns {number[]}                                           The XY page offsets (e.g. `[100, -200]`)
		 */
		getOffsetsTo? (offsetsTo: Ext.util.Positionable | HTMLElement | string): number[];
		/** 
		 * Retrieves the height of the element account for the top and bottom margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterHeight? (): void;
		/** 
		 * Retrieves the width of the element accounting for the left and right margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterWidth? (): void;
		/** 
		 * Gets the width of the padding(s) for the specified side(s).
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the padding **l**eft +
		 * the padding **r**ight.
		 * @returns {number}      The padding of the sides passed added together.
		 */
		getPadding? (side: string): number;
		/** 
		 * Returns an object defining the area of this Element which can be passed to
		 * [Ext.util.Positionable.setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                [asRegion] If true an [Ext.util.Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) will be returned
		 * @returns {object|Ext.util.Region} 
		 * box An object in the following format:
		 * 
		 *    {
		 *        left: &lt;Element's X position&gt;,
		 *        top: &lt;Element's Y position&gt;,
		 *        width: &lt;Element's width&gt;,
		 *        height: &lt;Element's height&gt;,
		 *        bottom: &lt;Element's lower bound&gt;,
		 *        right: &lt;Element's rightmost bound&gt;
		 *    }
		 * 
		 * The returned object may also be addressed as an Array where index 0 contains
		 * the X position and index 1 contains the Y position. So the result may also be
		 * used for [setXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setXY)
		 */
		getPageBox? (asRegion?: boolean): object | Ext.util.Region;
		/** 
		 * Returns a region object that defines the area of this element.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getRegion? (): Ext.util.Region;
		/** 
		 * Gets the right X coordinate of the element (element X position + element width)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getRight? (local: boolean): number;
		/** 
		 * Returns the current scroll position of the element.
		 * @method
		 * @public (method)
		 * @returns {object} 
		 * An object containing the scroll position in the format
		 * `{left: (scrollLeft), top: (scrollTop)}`
		 */
		getScroll? (): object;
		/** 
		 * Gets the left scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The left scroll position
		 */
		getScrollLeft? (): number;
		/** 
		 * Gets the Scroller instance of the first parent that has one.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getScrollParent? (): void;
		/** 
		 * Gets the top scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The top scroll position
		 */
		getScrollTop? (): number;
		/** 
		 * Returns the size of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentSize] `true` to get the width/size minus borders and padding.
		 * @returns {object}                An object containing the element's size:
		 */
		getSize? (contentSize?: boolean): object;
		/** 
		 * Returns a named style property based on computed/currentStyle (primary) and
		 * inline-style if primary is not available.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} property
		 * The style property (or multiple property names
		 * in an array) whose value is returned.
		 * @param   {boolean}         [inline] if `true` only inline styles will be returned.
		 * @returns {string|object}   
		 * The current value of the style property for this element
		 * (or a hash of named style values if multiple property arguments are requested).
		 */
		getStyle? (property: string | string[], inline?: boolean): string | object;
		/** 
		 * Returns the width in pixels of the passed text, or the width of the text in this Element.
		 * @method
		 * @public (method)
		 * @param   {string} text  The text to measure. Defaults to the innerHTML of the element.
		 * @param   {number} [min] The minumum value to return.
		 * @param   {number} [max] The maximum value to return.
		 * @returns {number}       The text width in pixels.
		 */
		getTextWidth? (text: string, min?: number, max?: number): number;
		/** 
		 * Gets the top Y coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getTop? (local: boolean): number;
		/** 
		 * Returns the value of the `value` attribute.
		 * @method
		 * @public (method)
		 * @param   {boolean}       asNumber `true` to parse the value as a number.
		 * @returns {string|number}          
		 */
		getValue? (asNumber: boolean): string | number;
		/** 
		 * Returns the **content** region of this element. That is the region within the borders
		 * and padding.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" member data.
		 */
		getViewRegion? (): Ext.util.Region;
		/** 
		 * Returns the dimensions of the element available to lay content out in.  For
		 * most elements this is the clientHeight/clientWidth.  If the element is
		 * the document/document.body the window's innerHeight/innerWidth is returned
		 * 
		 * If the element (or any ancestor element) has CSS style `display: none`, the
		 * dimensions will be zero.
		 * @method
		 * @public (method)
		 * @returns {object}  Object describing width and height.
		 */
		getViewSize? (): object;
		/** 
		 * Returns the offset width of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentWidth] `true` to get the width minus borders and padding.
		 * @returns {number}                 The element's width.
		 */
		getWidth? (contentWidth?: boolean): number;
		/** 
		 * Gets element X position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getX? (): number;
		/** 
		 * Gets element X and Y positions in page coordinates
		 * @method
		 * @public (method)
		 * @returns {any[]}  [x, y]
		 */
		getXY? (): any[];
		/** 
		 * Gets element Y position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getY? (): number;
		/** 
		 * Returns this element's z-index
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getZIndex? (): number;
		/** 
		 * Checks if the specified CSS class exists on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string}  name The CSS class to check for.
		 * @returns {boolean}      `true` if the class exists, else `false`.
		 */
		hasCls? (name: string): boolean;
		/** 
		 * Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
		 * indicates whether the event needs firing or not.
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to check for
		 * @returns {boolean}           `true` if the event is being listened for or bubbles, else `false`
		 */
		hasListener? (eventName: string): boolean;
		/** 
		 * Hide this element - Uses display mode to determine whether to use "display",
		 * "visibility", or "offsets". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  this
		 */
		hide? (): Ext.dom.CompositeElement;
		hide? (): Ext.dom.CompositeElementLite;
		/** 
		 * Find the index of the passed element within the composite collection.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|number} el
		 * The id of an element, or an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or an HtmlElement
		 * to find within the composite collection.
		 * @returns {number}                                       The index of the passed [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) in the composite collection, or -1 if not found.
		 */
		indexOf? (el: string | HTMLElement | Ext.dom.Element | number): number;
		/** 
		 * Inserts this element after the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element}                    el
		 * The element to insert after.
		 * The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}    This element.
		 */
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElement;
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElementLite;
		/** 
		 * Inserts this element before the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element}                    el
		 * The element before which this element will be inserted.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}    This element.
		 */
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElement;
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElementLite;
		/** 
		 * Inserts (or creates) an element as the first child of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config to create and insert
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_).
		 */
		insertFirst? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Inserts an html fragment into this element
		 * @method
		 * @public (method)
		 * @param   {string}                      where
		 * Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
		 * See [Ext.dom.Helper.insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml) for details.
		 * @param   {string}                      html       The HTML fragment
		 * @param   {boolean}                     [returnEl] True to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}            The inserted node (or nearest related if more than 1 inserted)
		 */
		insertHtml? (where: string, html: string, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object|any[]} el
		 * The id, element to insert or a DomHelper config
		 * to create and insert _or_ an array of any of those.
		 * @param   {string}                                          [where]     'before' or 'after'
		 * @param   {boolean}                                         [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}                     
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_). If an array is passed, the last
		 * inserted element is returned.
		 */
		insertSibling? (el: string | HTMLElement | Ext.dom.Element | object | any[], where?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns `true` if this element matches the passed simple selector
		 * (e.g. 'div.some-class' or 'span:first-child').
		 * @method
		 * @public (method)
		 * @param   {Function|string} selector
		 * The simple selector to test or a function which is passed
		 * candidate nodes, and should return `true` for nodes which match.
		 * @returns {boolean}                  `true` if this element matches the selector, else `false`.
		 */
		is? (selector: ExtGlobalFunction | string): boolean;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element or id of the element
		 * to search for in this elements descendants.
		 * @returns {boolean}                               
		 */
		isAncestor? (el: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Determines if this element is a descendant of the passed in Element.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		isDescendent? (): void;
		/** 
		 * Returns true if this element is scrollable.
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		isScrollable? (): boolean;
		/** 
		 * Checks if the current value of a style is equal to a given value.
		 * @method
		 * @public (method)
		 * @param   {string}  style property whose value is returned.
		 * @param   {string}  value to check against.
		 * @returns {boolean}       `true` for when the current value equals the given value.
		 */
		isStyle? (style: string, value: string): boolean;
		/** 
		 * Checks if all events, or a specific event, is suspended.
		 * @method
		 * @public (method)
		 * @param   {string}  [event] The name of the specific event to check
		 * @returns {boolean}         `true` if events are suspended
		 */
		isSuspended? (event?: string): boolean;
		/** 
		 * Returns `true` if the value of the given property is visually transparent. This
		 * may be due to a 'transparent' style value or an rgba value with 0 in the alpha
		 * component.
		 * @method
		 * @public (method)
		 * @param   {string}  prop The style property whose value is to be tested.
		 * @returns {boolean}      `true` if the style property is visually transparent.
		 */
		isTransparent? (prop: string): boolean;
		/** 
		 * Checks whether the element is currently visible using both visibility and display properties.
		 * @method
		 * @public (method)
		 * @param   {boolean} [deep]
		 * True to walk the dom and see if parent elements are hidden.
		 * If false, the function only checks the visibility of the element itself and it may return
		 * `true` even though a parent is not visible.
		 * @returns {boolean}        `true` if the element is currently visible, else `false`
		 */
		isVisible? (deep?: boolean): boolean;
		/** 
		 * Returns a flyweight Element of the dom element object at the specified index.
		 * @method
		 * @public (method)
		 * @param   {number}          index
		 * @returns {Ext.dom.Element}       
		 */
		item? (index: number): Ext.dom.Element;
		/** 
		 * Returns the last Element
		 * @method
		 * @public (method)
		 * @returns {Ext.dom.Element}  
		 */
		last? (): Ext.dom.Element;
		/** 
		 * Shorthand for [addManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		mon? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Move the element relative to its current position.
		 * @method
		 * @public (method)
		 * @param   {string} direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number} distance  How far to move the element in pixels
		 * @returns {void}             
		 */
		move? (direction: string, distance: number): void;
		/** 
		 * Shorthand for [removeManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		mun? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Gets the next sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The next sibling [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _asDom_ is _true_).  Or null if no match is found.
		 */
		next? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends an after-event handler.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Appends a before-event handler.  Returning `false` from the handler will stop the event.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Gets the parent node for this element, optionally chaining up trying to match a selector
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find a parent node that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] True to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The parent node ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		parent? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Initializes positioning on this element. If a desired position is not passed,
		 * it will make the the element positioned relative IF it is not already positioned.
		 * @method
		 * @public (method)
		 * @param   {string} [pos]    Positioning to use "relative", "absolute" or "fixed"
		 * @param   {number} [zIndex] The zIndex to apply
		 * @param   {number} [x]      Set the page X position
		 * @param   {number} [y]      Set the page Y position
		 * @returns {void}            
		 */
		position? (pos?: string, zIndex?: number, x?: number, y?: number): void;
		/** 
		 * Gets the previous sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The previous sibling ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		prev? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		purgeAllListeners? (): void;
		/** 
		 * Selects child nodes based on the passed CSS selector.
		 * Delegates to document.querySelectorAll. More information can be found at
		 * [http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)
		 * 
		 * All selectors, attribute filters and pseudos below can be combined infinitely
		 * in any order. For example `div.foo:nth-child(odd)[@foo=bar].bar:first` would be
		 * a perfectly valid selector.
		 * 
		 * ## Element Selectors:
		 * 
		 * - * any element
		 * - E an element with the tag E
		 * - E F All descendant elements of E that have the tag F
		 * - E > F or E/F all direct children elements of E that have the tag F
		 * - E + F all elements with the tag F that are immediately preceded by an element with the tag E
		 * - E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
		 * 
		 * ## Attribute Selectors:
		 * 
		 * The use of  and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
		 * 
		 * - E[foo] has an attribute "foo"
		 * - E[foo=bar] has an attribute "foo" that equals "bar"
		 * - E[foo^=bar] has an attribute "foo" that starts with "bar"
		 * - E[foo$=bar] has an attribute "foo" that ends with "bar"
		 * - E[foo*=bar] has an attribute "foo" that contains the substring "bar"
		 * - E[foo%=2] has an attribute "foo" that is evenly divisible by 2
		 * - E[foo!=bar] has an attribute "foo" that does not equal "bar"
		 * 
		 * ## Pseudo Classes:
		 * 
		 * - E:first-child E is the first child of its parent
		 * - E:last-child E is the last child of its parent
		 * - E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
		 * - E:nth-child(odd) E is an odd child of its parent
		 * - E:nth-child(even) E is an even child of its parent
		 * - E:only-child E is the only child of its parent
		 * - E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
		 * - E:first the first E in the resultset
		 * - E:last the last E in the resultset
		 * - E:nth(n) the nth E in the resultset (1 based)
		 * - E:odd shortcut for :nth-child(odd)
		 * - E:even shortcut for :nth-child(even)
		 * - E:not(S) an E element that does not match simple selector S
		 * - E:has(S) an E element that has a descendant that matches simple selector S
		 * - E:next(S) an E element whose next sibling matches simple selector S
		 * - E:prev(S) an E element whose previous sibling matches simple selector S
		 * - E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\
		 * 
		 * ## CSS Value Selectors:
		 * 
		 * - E{display=none} CSS value "display" that equals "none"
		 * - E{display^=none} CSS value "display" that starts with "none"
		 * - E{display$=none} CSS value "display" that ends with "none"
		 * - E{display*=none} CSS value "display" that contains the substring "none"
		 * - E{display%=2} CSS value "display" that is evenly divisible by 2
		 * - E{display!=none} CSS value "display" that does not equal "none"
		 * @method
		 * @public (method)
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements (
		 * HTMLElement or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _asDom_ is _false_) that match the selector.<br/>
		 * If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}                                       className The CSS class to add, or an array of classes.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}           this
		 */
		radioCls? (className: string | string[]): Ext.dom.CompositeElement;
		radioCls? (className: string | string[]): Ext.dom.CompositeElementLite;
		/** 
		 * Relays selected events from the specified Observable as if the events were fired by `this`.
		 * 
		 * For example if you are extending Grid, you might decide to forward some events from store.
		 * So you can do this inside your initComponent:
		 * 
		 *    this.relayEvents(this.getStore(), ['load']);
		 * 
		 * The grid instance will then have an observable 'load' event which will be passed
		 * the parameters of the store's load event and any function fired with the grid's
		 * load event would have access to the grid using the this keyword (unless the event
		 * is handled by a controller's control/listen event listener in which case 'this'
		 * will be the controller rather than the grid).
		 * @method
		 * @public (method)
		 * @param   {object}          origin   The Observable whose events this object is to relay.
		 * @param   {string[]|object} events
		 * Array of event names to relay or an Object with key/value
		 * pairs translating to ActualEventName/NewEventName respectively. For example:
		 *     this.relayEvents(this, {add:'push', remove:'pop'});
		 * 
		 * Would now redispatch the add event of this as a push event and the remove event as a pop event.
		 * @param   {string}          [prefix]
		 * A common prefix to prepend to the event names. For example:
		 * 
		 *    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
		 * @returns {object}          
		 * A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:
		 * 
		 *    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Can be undone by calling
		 * 
		 *    Ext.destroy(this.storeRelayers);
		 * 
		 * or
		 *     this.store.relayers.destroy();
		 */
		relayEvents? (origin: object, events: string[] | object, prefix?: string): object;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		remove? (): void;
		/** 
		 * Alias for [unAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAfterListener? (): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAllListeners? (): void;
		/** 
		 * Alias for [unBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeBeforeListener? (): void;
		/** 
		 * Removes the given CSS class(es) from this Element.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} names
		 * The CSS classes to remove separated by space,
		 * or an array of classes
		 * @param   {string}          [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}          [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * return {[Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)} this
		 * @returns {void}                     
		 */
		removeCls? (names: string | string[], prefix?: string, suffix?: string): void;
		/** 
		 * Removes the specified element(s).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element|number}             el
		 * The id of an element, the Element itself, the index of the
		 * element in this composite or an array of any of those.
		 * @param   {boolean}                                               [removeDom] `true` to also remove the element from the document
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}             this
		 */
		removeElement? (el: string | HTMLElement | Ext.dom.Element | number, removeDom?: boolean): Ext.dom.CompositeElement;
		removeElement? (el: string | HTMLElement | Ext.dom.Element | number, removeDom?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Removes an event handler.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		removeListener? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes listeners that were added by the [mon](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-mon) method.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		removeManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Forces the browser to repaint this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  this
		 */
		repaint? (): Ext.dom.CompositeElement;
		repaint? (): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces the passed element with this element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element}                    el
		 * The element to replace.
		 * The id of the node, a DOM Node or an existing Element.
		 * @param   {boolean}                                               [destroy]
		 * `false` to prevent destruction of the replaced
		 * element
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}           This element
		 */
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.CompositeElement;
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces a CSS class on the element with another.
		 * If the old name does not exist, the new name will simply be added.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                                                oldName  The CSS class to replace.
		 * @param   {string}                                                newName  The replacement CSS class.
		 * @param   {string}                                                [prefix] Prefix to prepend to each class to be replaced.
		 * @param   {string}                                                [suffix] Suffix to append to each class to be replaced.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}          this
		 */
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.CompositeElement;
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces the specified element with the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element|number}             el
		 * The id of an element, the Element itself, the index of the
		 * element in this composite to replace.
		 * @param   {string|Ext.dom.Element}                                replacement  The id of an element or the Element itself.
		 * @param   {boolean}                                               [domReplace] `true` to remove and replace the element in the document too.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}              this
		 */
		replaceElement? (el: string | HTMLElement | Ext.dom.Element | number, replacement: string | Ext.dom.Element, domReplace?: boolean): Ext.dom.CompositeElement;
		replaceElement? (el: string | HTMLElement | Ext.dom.Element | number, replacement: string | Ext.dom.Element, domReplace?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces this element with the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The new element (id of the
		 * node, a DOM Node or an existing Element) or a DomHelper config of an element to create
		 * @returns {Ext.dom.Element}                              This element
		 */
		replaceWith? (el: string | HTMLElement | Ext.dom.Element | object): Ext.dom.Element;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		resumeEvent? (): void;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to resume.
		 * @returns {void}                
		 */
		resumeEvent? (...eventName: string[]): void;
		/** 
		 * Resumes firing events (see [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents)).
		 * 
		 * If events were suspended using the `queueSuspended` parameter, then all events fired
		 * during event suspension will be sent to any listeners now.
		 * @method
		 * @public (method)
		 * @param   {boolean} [discardQueue]
		 * `true` to prevent any previously queued events from firing
		 * while we were suspended. See [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents).
		 * @returns {void}                   
		 */
		resumeEvents? (discardQueue?: boolean): void;
		/** 
		 * Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
		 * within this element's scrollable range.
		 * @method
		 * @public (method)
		 * @param   {string}         direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number}         distance  How far to scroll the element in pixels
		 * @param   {boolean|object} [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {boolean}        
		 * Returns true if a scroll was triggered or false if the element
		 * was scrolled as far as it could go.
		 */
		scroll? (direction: string, distance: number, animate?: boolean | object): boolean;
		/** 
		 * Scrolls this element by the passed delta values, optionally animating.
		 * 
		 * All of the following are equivalent:
		 * 
		 *     el.scrollBy(10, 10, true);
		 *     el.scrollBy([10, 10], true);
		 *     el.scrollBy({ x: 10, y: 10 }, true);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|number[]|object}                                deltaX
		 * Either the x delta, an Array specifying x and y deltas or
		 * an object with "x" and "y" properties.
		 * @param   {number|boolean|object}                                 deltaY  Either the y delta, or an animate flag or config object.
		 * @param   {boolean|object}                                        animate Animate flag/config object if the delta values were passed separately.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}         this
		 */
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.CompositeElement;
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.CompositeElementLite;
		/** 
		 * Scrolls this element into view within the passed container.
		 * 
		 *      Ext.create('Ext.data.Store', {
		 *          storeId:'simpsonsStore',
		 *          fields:['name', 'email', 'phone'],
		 *          data:{'items':[
		 *              { 'name': 'Lisa',  "email":"lisa@simpsons.com",  "phone":"555-111-1224"  },
		 *              { 'name': 'Bart',  "email":"bart@simpsons.com",  "phone":"555-222-1234" },
		 *              { 'name': 'Homer', "email":"homer@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Marge', "email":"marge@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Milhouse', "email":"milhouse@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Willy', "email":"willy@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Skinner', "email":"skinner@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Hank (last row)', "email":"hank@simpsons.com", "phone":"555-222-1254"  }
		 *          ]},
		 *          proxy: {
		 *              type: 'memory',
		 *              reader: {
		 *                  type: 'json',
		 *                  rootProperty: 'items'
		 *              }
		 *          }
		 *      });
		 *    
		 *      var grid = Ext.create('Ext.grid.Panel', {
		 *          title: 'Simpsons',
		 *          store: Ext.data.StoreManager.lookup('simpsonsStore'),
		 *          columns: [
		 *              { text: 'Name',  dataIndex: 'name', width: 125 },
		 *              { text: 'Email', dataIndex: 'email', flex: 1 },
		 *              { text: 'Phone', dataIndex: 'phone' }
		 *          ],
		 *          height: 190,
		 *          width: 400,
		 *          renderTo: Ext.getBody(),
		 *          tbar: [{
		 *              text: 'Scroll row 7 into view',
		 *              handler: function () {
		 *                  var view = grid.getView();
		 *    
		 *                  Ext.get(view.getRow(7)).scrollIntoView(view.getEl(), null, true);
		 *              }
		 *          }]
		 *      });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.Element}                        [container]
		 * The container element
		 * to scroll.  Should be a string (id), dom node, or [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @param   {boolean}                                               [hscroll]   False to disable horizontal scroll.
		 * @param   {boolean|object}                                        [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @param   {boolean}                                               [highlight] true to highlight the element when it is in view.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}             this
		 */
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.CompositeElement;
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Scrolls this element the specified scroll point. It does NOT do bounds checking so
		 * if you scroll to a weird value it will try to do it. For auto bounds checking, use [scroll](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#event-scroll).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                                                side      Either "left" for scrollLeft values or "top" for scrollTop values.
		 * @param   {number}                                                value     The new scroll value
		 * @param   {boolean|object}                                        [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}           this
		 */
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.CompositeElement;
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.CompositeElementLite;
		/** 
		 * Selects descendant elements of this element based on the passed CSS selector to
		 * enable [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement[]}                                  selector  The CSS selector or an array of elements
		 * @param   {boolean}                                               composite
		 * Return a CompositeElement as opposed to a
		 * CompositeElementLite. Defaults to false.
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}           
		 */
		select? (selector: string | HTMLElement[], composite: boolean): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Selects a single descendant element of this element using a CSS selector
		 * (see [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector The selector query
		 * @param   {boolean}                     [asDom]  `false` to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element} 
		 * The DOM element (or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if
		 * _asDom_ is _false_) which matched the selector.
		 */
		selectNode? (selector: string, asDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Sets the passed attributes as attributes of this element (a `style` attribute
		 * can be a string, object or function).
		 * 
		 * Example component (though any [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) would suffice):
		 * 
		 *    var cmp = Ext.create({
		 *        xtype: 'component',
		 *        html: 'test',
		 *        renderTo: Ext.getBody()
		 *    });
		 * 
		 * Once the component is rendered, you can fetch a reference to its outer
		 * element to use `set`:
		 * 
		 *    cmp.el.set({
		 *        foo: 'bar'
		 *    });
		 * 
		 * This sets an attribute on the element of **foo="bar"**:
		 * 
		 *    &lt;div class="x-component x-component-default x-border-box" id="component-1009" foo="bar"&gt;test&lt;/div&gt;
		 * 
		 * To remove the attribute pass a value of **undefined**:
		 * 
		 *    cmp.el.set({
		 *        foo: undefined
		 *    });
		 * 
		 * **Note:**
		 * 
		 * - You cannot remove an attribute by passing `undefined` when the
		 *   `expandos` param is set to **false**.
		 * - Passing an attribute of `style` results in the request being handed off to
		 *   [applyStyles](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-applyStyles).
		 * - Passing an attribute of `cls` results in the element's dom's
		 *   [className](http://www.w3schools.com/jsref/prop_html_classname.asp) property
		 *   being set directly.  For additional flexibility when setting / removing
		 *   classes see:
		 *   <ul>
		 *   <li>[addCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-addCls)
		 * - [removeCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-removeCls)
		 * - [replaceCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-replaceCls)
		 * - [setCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setCls)
		 * - [toggleCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggleCls)
		 * 
		 * </li>
		 * </ul>
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                                                attributes The object with the attributes.
		 * @param   {boolean}                                               [useSet]
		 * `false` to override the default `setAttribute`
		 * to use [expandos](http://help.dottoro.com/ljvovanq.php).
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}            this
		 */
		set? (attributes: object, useSet?: boolean): Ext.dom.CompositeElement;
		set? (attributes: object, useSet?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's CSS bottom style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         bottom
		 * Number of pixels or CSS string value to set as
		 * the bottom CSS property value
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		setBottom? (bottom: number | string): Ext.dom.CompositeElement;
		setBottom? (bottom: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's box.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                                                box The box to fill {x, y, width, height}
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}     this
		 */
		setBox? (box: object): Ext.dom.CompositeElement;
		setBox? (box: object): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the specified CSS class on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} className The CSS class to set on this element.
		 * @returns {void}                      
		 */
		setCls? (className: string | string[]): void;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                                                  name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                                                         [value] The value to set for the name parameter.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.CompositeElement;
		setConfig? (name: string | object, value?: object): Ext.dom.CompositeElementLite;
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Sets the CSS display property. Uses originalDisplay if the specified value is a
		 * boolean true.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean|string}                                        value
		 * Boolean value to display the element using its
		 * default display, or a string to set the display directly.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}       this
		 */
		setDisplayed? (value: boolean | string): Ext.dom.CompositeElement;
		setDisplayed? (value: boolean | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                                                html The new HTML.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}      this
		 */
		setHTML? (html: string): Ext.dom.CompositeElement;
		setHTML? (html: string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         height The new height.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		setHeight? (height: number | string): Ext.dom.CompositeElement;
		setHeight? (height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                                                html The new HTML.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}      this
		 */
		setHtml? (html: string): Ext.dom.CompositeElement;
		setHtml? (html: string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's left position directly using CSS style
		 * (instead of [setX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setX)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         left
		 * Number of pixels or CSS string value to
		 * set as the left CSS property value
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}      this
		 */
		setLeft? (left: number | string): Ext.dom.CompositeElement;
		setLeft? (left: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * An alias for [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).  In
		 * versions prior to 5.1, [listeners](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#cfg-listeners) had a generated setter which could
		 * be called to add listeners.  In 5.1 the listeners config is not processed
		 * using the config system and has no generated setter, so this method is
		 * provided for backward compatibility.  The preferred way of adding listeners
		 * is to use the [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method.
		 * @method
		 * @public (method)
		 * @param   {object} listeners The listeners
		 * @returns {void}             
		 */
		setListeners? (listeners: object): void;
		/** 
		 * Sets the local x coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalX), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                x The x coordinate. A value of `null` sets the left style to 'auto'.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}   this
		 */
		setLocalX? (x: number): Ext.dom.CompositeElement;
		setLocalX? (x: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the local x and y coordinates of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalXY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|any[]}                                          x
		 * The x coordinate or an array containing [x, y]. A value of
		 * `null` sets the left style to 'auto'
		 * @param   {number}                                                [y]
		 * The y coordinate, required if x is not an array. A value of
		 * `null` sets the top style to 'auto'
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}     this
		 */
		setLocalXY? (x: number | any[], y?: number): Ext.dom.CompositeElement;
		setLocalXY? (x: number | any[], y?: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the local y coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                y The y coordinate. A value of `null` sets the top style to 'auto'.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}   this
		 */
		setLocalY? (y: number): Ext.dom.CompositeElement;
		setLocalY? (y: number): Ext.dom.CompositeElementLite;
		/** 
		 * Set the maximum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         height The new maximum height.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		setMaxHeight? (height: number | string): Ext.dom.CompositeElement;
		setMaxHeight? (height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the maximum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         width The new maximum width.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}       this
		 */
		setMaxWidth? (width: number | string): Ext.dom.CompositeElement;
		setMaxWidth? (width: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the minimum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         height The new minimum height.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		setMinHeight? (height: number | string): Ext.dom.CompositeElement;
		setMinHeight? (height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the minimum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         width The new minimum width.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}       this
		 */
		setMinWidth? (width: number | string): Ext.dom.CompositeElement;
		setMinWidth? (width: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the opacity of the element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}         this
		 */
		setOpacity? (opacity: number): Ext.dom.CompositeElement;
		setOpacity? (opacity: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's CSS right style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         right
		 * Number of pixels or CSS string value to
		 * set as the right CSS property value
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}       this
		 */
		setRight? (right: number | string): Ext.dom.CompositeElement;
		setRight? (right: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the left scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                left The left scroll position
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}      this
		 */
		setScrollLeft? (left: number): Ext.dom.CompositeElement;
		setScrollLeft? (left: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the top scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                top The top scroll position
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}     this
		 */
		setScrollTop? (top: number): Ext.dom.CompositeElement;
		setScrollTop? (top: number): Ext.dom.CompositeElementLite;
		/** 
		 * Set the size of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         width
		 * The new width. This may be one of:
		 * 
		 * - A Number specifying the new width in pixels.
		 * - A String used to set the CSS width style. Animation may **not** be used.
		 * - A size object in the format `{width: widthValue, height: heightValue}`.
		 * @param   {number|string}                                         height
		 * The new height. This may be one of:
		 * 
		 * - A Number specifying the new height in pixels.
		 * - A String used to set the CSS height style. Animation may **not** be used.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		setSize? (width: number | string, height: number | string): Ext.dom.CompositeElement;
		setSize? (width: number | string, height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Wrapper for setting style properties, also takes single object parameter of
		 * multiple styles.
		 * 
		 * Styles should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    // two-param syntax
		 *    el.setStyle('color', 'white');
		 *    
		 *    // single-param syntax
		 *    el.setStyle({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                                         property
		 * The style property to be set, or an object of
		 * multiple styles.
		 * @param   {string}                                                [value]
		 * The value to apply to the given property, or null if
		 * an object was passed.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}          this
		 */
		setStyle? (property: string | object, value?: string): Ext.dom.CompositeElement;
		setStyle? (property: string | object, value?: string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's top position directly using CSS style
		 * (instead of [setY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setY)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         top
		 * Number of pixels or CSS string value to
		 * set as the top CSS property value
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}     this
		 */
		setTop? (top: number | string): Ext.dom.CompositeElement;
		setTop? (top: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's top and left positions directly using CSS style.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		setTopLeft? (): void;
		/** 
		 * Use this to change the visibility mode between [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY),
		 * [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY), [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS), or [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.dom.Element.VISIBILITY|Ext.dom.Element.DISPLAY|Ext.dom.Element.OFFSETS|Ext.dom.Element.CLIP|number} mode
		 * The method by which the element will be [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-hide) (you can
		 * also use the [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible) or [toggle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggle) method to toggle element
		 * visibility).
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}                                                       this
		 */
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.CompositeElement;
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the visibility of the element based on the current visibility mode. Use
		 * [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode) to switch between the following visibility modes:
		 * 
		 * - [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY) (the default)
		 * - [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY)
		 * - [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS)
		 * - [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP)
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean}                                               visible Whether the element is visible.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}         this
		 */
		setVisible? (visible: boolean): Ext.dom.CompositeElement;
		setVisible? (visible: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Set the width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                                         width The new width.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}       this
		 */
		setWidth? (width: number | string): Ext.dom.CompositeElement;
		setWidth? (width: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets this Element's page-level x coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                x
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}   this
		 */
		setX? (x: number): Ext.dom.CompositeElement;
		setX? (x: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets this Element's page-level x and y coordinates
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number[]}                                              xy
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}    this
		 */
		setXY? (xy: number[]): Ext.dom.CompositeElement;
		setXY? (xy: number[]): Ext.dom.CompositeElementLite;
		/** 
		 * Sets this Element's page-level y coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                y
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}   this
		 */
		setY? (y: number): Ext.dom.CompositeElement;
		setY? (y: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the z-index of this Element and synchronizes the z-index of shadow and/or
		 * shim if present.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                                                zindex The new z-index to set
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}        this
		 */
		setZIndex? (zindex: number): Ext.dom.CompositeElement;
		setZIndex? (zindex: number): Ext.dom.CompositeElementLite;
		/** 
		 * Show this element - Uses display mode to determine whether to use "display",
		 * "visibility", "offsets", or "clip". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  this
		 */
		show? (): Ext.dom.CompositeElement;
		show? (): Ext.dom.CompositeElementLite;
		/** 
		 * Gets a range nodes.
		 * @method
		 * @public (method)
		 * @param   {number}        [start] The index of the first node in the range
		 * @param   {number}        [end]   The index of the last node in the range
		 * @returns {HTMLElement[]}         An array of nodes
		 */
		slice? (start?: number, end?: number): HTMLElement[];
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		suspendEvent? (): void;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to suspend.
		 * @returns {void}                
		 */
		suspendEvent? (...eventName: string[]): void;
		/** 
		 * Suspends the firing of all events. (see [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents))
		 * @method
		 * @public (method)
		 * @param   {boolean} queueSuspended
		 * `true` to queue up suspended events to be fired
		 * after the [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) call instead of discarding all suspended events.
		 * @returns {void}                   
		 */
		suspendEvents? (queueSuspended: boolean): void;
		/** 
		 * Toggles the element's visibility, depending on visibility mode.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  this
		 */
		toggle? (): Ext.dom.CompositeElement;
		toggle? (): Ext.dom.CompositeElementLite;
		/** 
		 * Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                                                className The CSS class to toggle.
		 * @param   {boolean}                                               [state]
		 * If specified as `true`, causes the class to be added. If specified as `false`, causes
		 * the class to be removed.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}           this
		 */
		toggleCls? (className: string, state?: boolean): Ext.dom.CompositeElement;
		toggleCls? (className: string, state?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Translates the passed page coordinates into left/top css values for the element
		 * @method
		 * @public (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with left and top properties. e.g.
		 * {left: (value), top: (value)}
		 */
		translatePoints? (x: number | any[], y?: number): object;
		/** 
		 * Shorthand for [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		un? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * .
		 * Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 'div.some-class' or 'span:first-child').
		 * This is a shortcut for findParentNode() that always returns an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector    The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element that causes the upward
		 * traversal to stop and is **not** considered for inclusion as the result.
		 * (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnDom] True to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The matching DOM node (or HTMLElement if
		 * _returnDom_ is _true_).  Or null if no match was found.
		 */
		up? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                                                html The new HTML.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}      this
		 */
		update? (html: string): Ext.dom.CompositeElement;
		update? (html: string): Ext.dom.CompositeElementLite;
		/** 
		 * Creates and wraps this element with another element
		 * @method
		 * @public (method)
		 * @param   {object}                      [config]    DomHelper element config object for the wrapper element or null for an empty div
		 * @param   {boolean}                     [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {string}                      [selector]  A CSS selector to select a descendant node within the created element to use as the wrapping element.
		 * @returns {HTMLElement|Ext.dom.Element}             The newly created wrapper element
		 */
		wrap? (config?: object, returnDom?: boolean, selector?: string): HTMLElement | Ext.dom.Element;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                                                         config
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}        this
		 */
		initConfig? (config: object): Ext.dom.CompositeElement;
		initConfig? (config: object): Ext.dom.CompositeElementLite;
		initConfig? (config: object): Ext.Base;
		/** 
		 * Gets the default scope for firing late bound events (string names with
		 * no scope attached) at runtime.
		 * @method
		 * @protected (method)
		 * @param   {object} [defaultScope] The default scope to return if none is found.
		 * @returns {object}                The default event scope
		 */
		resolveListenerScope? (defaultScope?: object): object;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.CompositeElement.Statics|Ext.dom.CompositeElementLite.Statics|Ext.Base.Statics}  
		 */
		statics? (): Ext.dom.CompositeElement.Statics;
		statics? (): Ext.dom.CompositeElementLite.Statics;
		statics? (): Ext.Base.Statics;
		/** 
		 * Adds declarative listeners as nested arrays of listener objects.
		 * @method
		 * @private (method)
		 * @param   {any[]}   listeners
		 * @returns {boolean}           `true` if any listeners were added
		 */
		_addDeclaredListeners? (listeners: any[]): boolean;
		/** 
		 * Returns the publisher for a given event
		 * @method
		 * @private (method)
		 * @param   {string}                        eventName
		 * @returns {Ext.event.publisher.Publisher}           
		 */
		_getPublisher? (eventName: string): Ext.event.publisher.Publisher;
		/** 
		 * This method applies a versioned, deprecation declaration to this class. This
		 * is typically called by the `deprecated` config.
		 * @method
		 * @private (method)
		 * @param   {object} deprecations
		 * @returns {void}                
		 */
		addDeprecations? (deprecations: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {object}                                                els
		 * @param   {object}                                                root
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}      this
		 */
		addElements? (els: object, root: object): Ext.dom.CompositeElement;
		addElements? (els: object, root: object): Ext.dom.CompositeElementLite;
		/** 
		 * Returns the fractional portion of this element's measurement in the given dimension.
		 * (IE9+ only)
		 * @method
		 * @private (method)
		 * @param   {object} dimension
		 * @returns {number}           
		 */
		adjustDirect2DDimension? (dimension: object): number;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xy
		 * @param   {object} parent
		 * @returns {void}          
		 */
		adjustForConstraints? (xy: object, parent: object): void;
		/** 
		 * Stub implementation called after positioning.
		 * May be implemented in subclasses. Component has an implementation.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		afterSetPosition? (): void;
		/** 
		 * Calculates x,y coordinates specified by the anchor position on the element, adding
		 * extraX and extraY values.
		 * @method
		 * @private (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {number}   [extraX] value to be added to the x coordinate
		 * @param   {number}   [extraY] value to be added to the y coordinate
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		calculateAnchorXY? (anchor?: string, extraX?: number, extraY?: number, size?: object): number[];
		/** 
		 * Calculates the new [x,y] position to move this Positionable into a constrain region.
		 * 
		 * By default, this Positionable is constrained to be within the container it was added to, or the element it was
		 * rendered to.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * An alternative constraint may be passed.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|Ext.util.Region} [constrainTo]
		 * The Element or [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html)
		 * into which this Component is to be constrained. Defaults to the element into which this Positionable
		 * was rendered, or this Component's {@link [Ext.Component.constrainTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#cfg-constrainTo).
		 * @param   {number[]}                                           [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to coerce into constraints instead of using this Positionable's current position.
		 * @param   {boolean}                                            [local]            The proposedPosition is local _(relative to floatParent if a floating Component)_
		 * @param   {number[]}                                           [proposedSize]
		 * A proposed `[width, height]` size to use when calculating
		 * constraints instead of using this Positionable's current size.
		 * @returns {number[]}                                           
		 * **If** the element _needs_ to be translated, the new `[X, Y]` position within
		 * constraints if possible, giving priority to keeping the top and left edge in the constrain region.
		 * Otherwise, `false`.
		 */
		calculateConstrainedPosition? (constrainTo?: string | HTMLElement | Ext.dom.Element | Ext.util.Region, proposedPosition?: number[], local?: boolean, proposedSize?: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} o
		 * @param   {object} fn
		 * @param   {object} scope
		 * @returns {void}         
		 */
		captureArgs? (o: object, fn: object, scope: object): void;
		/** 
		 * Removes the element from the cache and removes listeners.
		 * Used for cleaning up orphaned elements after they have been removed from the dom.
		 * Similar to [destroy](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy) except it assumes the element has already been
		 * removed from the dom.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		collect? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} box
		 * @returns {void}       
		 */
		constrainBox? (box: object): void;
		/** 
		 * Creates an event handling function which re-fires the event from this object as the passed event name.
		 * @method
		 * @private (method)
		 * @param   {string}   newName    The name under which to re-fire the passed parameters.
		 * @param   {any[]}    [beginEnd] The caller can specify on which indices to slice.
		 * @returns {Function}            
		 */
		createRelayer? (newName: string, beginEnd?: any[]): ExtGlobalFunction;
		/** 
		 * Disables the shadow element created by [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShadow? (): void;
		/** 
		 * Disables the shim element created by [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShim? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchContextMenu? (): void;
		/** 
		 * Disables native scrolling of an overflowing element using touch-screen input
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchScroll? (): void;
		/** 
		 * Continue to fire event.
		 * @method
		 * @private (method)
		 * @param   {string}  eventName
		 * @param   {any[]}   args
		 * @param   {boolean} bubbles
		 * @returns {void}              
		 */
		doFireEvent? (eventName: string, args: any[], bubbles: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} element
		 * @returns {void}           
		 */
		doReplaceWith? (element: object): void;
		/** 
		 * A scrollIntoView implementation for scrollIntoView/rtlScrollIntoView to call
		 * after current scrollX has been determined.
		 * @method
		 * @private (method)
		 * @param   {object} container
		 * @param   {object} hscroll
		 * @param   {object} animate
		 * @param   {object} highlight
		 * @param   {object} getScrollX
		 * @param   {object} scrollTo
		 * @returns {void}              
		 */
		doScrollIntoView? (container: object, hscroll: object, animate: object, highlight: object, getScrollX: object, scrollTo: object): void;
		/** 
		 * Enables an iframe shim for this element to keep windowed objects from
		 * showing through.  The position, size, and visibility of the shim will be
		 * automatically synchronized as the position, size, and visibility of this
		 * Element are changed.
		 * @method
		 * @private (method)
		 * @param   {object}          [options] Configuration options for the shim
		 * @returns {Ext.dom.Element}           The new shim element
		 */
		enableShim? (options?: object): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates of an element specified by the anchor position on the
		 * element.
		 * @method
		 * @private (method)
		 * @param   {Ext.dom.Element} el       The element
		 * @param   {string}          [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}         [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}          [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}                 [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorToXY? (el: Ext.dom.Element, anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the size of the element's borders and padding.
		 * @method
		 * @private (method)
		 * @returns {object} 
		 * an object with the following numeric properties
		 * 
		 * - beforeX
		 * - afterX
		 * - beforeY
		 * - afterY
		 */
		getBorderPadding? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getBorders? (): void;
		/** 
		 * Gets the bubbling parent for an Observable
		 * @method
		 * @private (method)
		 * @returns {Ext.util.Observable}  The bubble parent. null is returned if no bubble target exists
		 */
		getBubbleParent? (): Ext.util.Observable;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getCurrentConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} el
		 * @returns {void}      
		 */
		getElement? (el: object): void;
		/** 
		 * Gets the x and y coordinates needed for scrolling an element into view within
		 * a given container.  These coordinates translate into the scrollLeft and scrollTop
		 * positions that will need to be set on an ancestor of the element in order to make
		 * this element visible within its container.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.Element} container The container
		 * @param   {number}                         scrollX   The container's current scroll position on the x axis
		 * @param   {number}                         scrollY   The container's current scroll position on the y axis
		 * @returns {object}                                   An object with "x" and "y" properties
		 */
		getScrollIntoViewXY? (container: string | HTMLElement | Ext.Element, scrollX: number, scrollY: number): object;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} config
		 * @returns {void}          
		 */
		hasConfig? (config: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} index
		 * @param   {object} nodes
		 * @returns {void}         
		 */
		insert? (index: object, nodes: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fn
		 * @param   {object} args
		 * @returns {void}        
		 */
		invoke? (fn: object, args: object): void;
		/** 
		 * Adds a "destroyable" object to an internal list of objects that will be destroyed
		 * when this instance is destroyed (via [`destroy`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-destroy)).
		 * @method
		 * @private (method)
		 * @param   {string} name
		 * @param   {object} value
		 * @returns {object}       The `value` passed.
		 */
		link? (name: string, value: object): object;
		/** 
		 * Mask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		maskIframes? (): void;
		/** 
		 * Prepares a given class for observable instances. This method is called when a
		 * class derives from this class or uses this class as a mixin.
		 * @method
		 * @private (method)
		 * @param   {Function}            T     The class constructor to prepare.
		 * @param   {Ext.util.Observable} mixin The mixin if being used as a mixin.
		 * @param   {object}              data  The raw class creation data if this is an extend.
		 * @returns {void}                      
		 */
		prepareClass? (T: ExtGlobalFunction, mixin: Ext.util.Observable, data: object): void;
		/** 
		 * Remove a single managed listener item
		 * @method
		 * @private (method)
		 * @param   {boolean} isClear         True if this is being called during a clear
		 * @param   {object}  managedListener
		 * The managed listener item
		 * See removeManagedListener for other args
		 * @returns {void}                    
		 */
		removeManagedListenerItem? (isClear: boolean, managedListener: object): void;
		/** 
		 * Converts local coordinates into page-level coordinates
		 * @method
		 * @private (method)
		 * @param   {number[]} xy The local x and y coordinates
		 * @returns {number[]}    The translated coordinates
		 */
		reverseTranslateXY? (xy: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} child
		 * @param   {object} hscroll
		 * @returns {void}           
		 */
		scrollChildIntoView? (child: object, hscroll: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} isVisible
		 * @returns {void}             
		 */
		setVisibility? (isVisible: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {string}  firstClass
		 * @param   {string}  secondClass
		 * @param   {boolean} flag
		 * @param   {string}  prefix
		 * @returns {any}                 
		 */
		swapCls? (firstClass: string, secondClass: string, flag: boolean, prefix: string): any;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		syncUnderlays? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		synchronize? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} el
		 * @returns {void}      
		 */
		transformElement? (el: object): void;
		/** 
		 * Translates the passed page coordinates into x and y css values for the element
		 * @method
		 * @private (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with x and y properties. e.g.
		 * {x: (value), y: (value)}
		 */
		translateXY? (x: number | any[], y?: number): object;
		/** 
		 * Destroys a given set of [`linked`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-link) objects. This is only needed if
		 * the linked object is being destroyed before this instance.
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {string[]}                                                       names The names of the linked objects to destroy.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}       this
		 */
		unlink? (names: string[]): Ext.dom.CompositeElement;
		unlink? (names: string[]): Ext.dom.CompositeElementLite;
		unlink? (names: string[]): Ext.Base;
		/** 
		 * Unmask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		unmaskIframes? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  this
		 */
		unwrap? (): Ext.dom.CompositeElement;
		unwrap? (): Ext.dom.CompositeElementLite;
	}
	/** 
	 * [Ext.dom.CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The
	 * methods from these classes will be performed on all the elements in this collection.
	 * 
	 * Example:
	 * 
	 *    var els = Ext.select("#some-el div.some-class");
	 *    // or select directly from an existing element
	 *    var el = Ext.get('some-el');
	 *    el.select('div.some-class');
	 *    
	 *    els.setWidth(100); // all elements become 100 width
	 *    els.hide(true); // all elements fade out and hide
	 *    // or
	 *    els.setWidth(100).hide(true);
	 * 
	 */
	class CompositeElementLite extends Ext.Base {
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS `clip` property to reduce element's dimensions to 0px by 0px, effectively
		 * making it hidden while not being truly invisible. This is useful when an element
		 * needs to be published to the Assistive Technologies such as screen readers.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 4
		 * @type {number}
		 */
		static readonly CLIP?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'display' property to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 2
		 * @type {number}
		 */
		static readonly DISPLAY?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS absolute positioning and top/left offsets to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 3
		 * @type {number}
		 */
		static readonly OFFSETS?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'visibility' property to hide the element.
		 * 
		 * Note that in this mode, [isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible) may return true
		 * for an element even though it actually has a parent element that is hidden. For this
		 * reason, and in most cases, using the [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS) mode is a better choice.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 1
		 * @type {number}
		 */
		static readonly VISIBILITY?: number;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @type {object}
		 */
		static cache?: object;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @default 'input,textarea,[contenteditable="true"]'
		 * @type {string}
		 */
		static editableSelector?: string;
		/** 
		 * This property indicates a minimum threshold of vertical resize movement for
		 * virtual keyboard detection.
		 * 
		 * On some mobile browsers the framework needs to keep track of whether window
		 * resize events were triggered by the opening or closing of a virtual keyboard
		 * so that it can prevent unnecessary re-layout of the viewport.  It does this
		 * by detecting resize events in the horizontal direction that occur immediately
		 * after an editable element is focused or blurred.
		 * @property
		 * @private (property)
		 * @static
		 * @default 100
		 * @type {number}
		 */
		static minKeyboardHeight?: number;
		/** 
		 * True to globally disable the delegated event system.  The results of
		 * setting this to false are unpredictable since the Gesture publisher relies
		 * on delegated events in order to work correctly.  Disabling delegated events
		 * may cause Gestures to function incorrectly or to stop working completely.
		 * Use at your own risk!
		 * @property
		 * @private (property)
		 * @static
		 * @default true
		 * @type {boolean}
		 */
		static useDelegatedEvents?: boolean;
		/** 
		 * The list of valid nodeTypes that are allowed to be wrapped
		 * @property
		 * @private (property)
		 * @static
		 * @default {1: 1, 9: 1}
		 * @type {object}
		 */
		static validNodeTypes?: object;
		/** 
		 * A reference to the `Component` that owns this element. This is `null` if there
		 * is no direct owner.
		 * @property
		 * @public (property)
		 * @type {Ext.Component}
		 */
		component?: Ext.Component;
		/** 
		 * The Array of DOM elements which this CompositeElement encapsulates.
		 * 
		 * This will not _usually_ be accessed in developers' code, but developers wishing to augment the capabilities
		 * of the CompositeElementLite class may use it when adding methods to the class.
		 * 
		 * For example to add the `nextAll` method to the class to **add** all following siblings of selected elements,
		 * the code would be
		 * 
		 *    Ext.override(Ext.dom.CompositeElementLite, {
		 *        nextAll: function() {
		 *            var elements = this.elements, i, l = elements.length, n, r = [], ri = -1;
		 *    
		 *            // Loop through all elements in this Composite, accumulating
		 *            // an Array of all siblings.
		 *            for (i = 0; i &lt; l; i++) {
		 *                for (n = elements[i].nextSibling; n; n = n.nextSibling) {
		 *                    r[++ri] = n;
		 *                }
		 *            }
		 *    
		 *            // Add all found siblings to this Composite
		 *            return this.add(r);
		 *        }
		 *    });
		 * 
		 * @property
		 * @public (property)
		 * @readonly
		 * @type {HTMLElement[]}
		 */
		readonly elements?: HTMLElement[];
		/** 
		 * This object holds a key for any event that has a listener. The listener may be set
		 * directly on the instance, or on its class or a super class (via [observe](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#static-method-observe)) or
		 * on the [MVC EventBus](https://docs.sencha.com/extjs/6.0.1/classic/Ext.app.EventBus.html). The values of this object are truthy
		 * (a non-zero number) and falsy (0 or undefined). They do not represent an exact count
		 * of listeners. The value for an event is truthy if the event must be fired and is
		 * falsy if there is no need to fire the event.
		 * 
		 * The intended use of this property is to avoid the expense of fireEvent calls when
		 * there are no listeners. This can be particularly helpful when one would otherwise
		 * have to call fireEvent hundreds or thousands of times. It is used like this:
		 * 
		 *     if (this.hasListeners.foo) {
		 *         this.fireEvent('foo', this, arg1);
		 *     }
		 * 
		 * @property
		 * @public (property)
		 * @readonly
		 * @type {object}
		 */
		readonly hasListeners?: object;
		/** 
		 * `true` in this class to identify an object as an instantiated CompositeElement, or subclass thereof.
		 * @property
		 * @public (property)
		 * @default true
		 * @type {boolean}
		 */
		isComposite?: boolean;
		/** 
		 * `true` in this class to identify an object as an instantiated Observable, or subclass thereof.
		 * @property
		 * @public (property)
		 * @default true
		 * @type {boolean}
		 */
		isObservable?: boolean;
		/** 
		 * Get the reference to the current class from which this object was instantiated. Unlike [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics),
		 * `this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics)
		 * for a detailed comparison
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            alert(this.self.speciesName); // dependent on 'this'
		 *        },
		 *    
		 *        clone: function() {
		 *            return new this.self();
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *        statics: {
		 *            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                     // alerts 'Cat'
		 *    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'
		 * 
		 * @property
		 * @protected (property)
		 * @default Ext.Base
		 * @type {Ext.dom.CompositeElementLite.Statics}
		 */
		self?: Ext.dom.CompositeElementLite.Statics | Ext.Base.Statics;
		/** 
		 * Matches options property names within a listeners specification object  - property names which are never used as event names.
		 * @property
		 * @private (property)
		 * @default {scope: 1, delay: 1, buffer: 1, onFrame: 1, single: 1, args: 1, destroyable: 1, priority: 1, order: 1}
		 * @type {object}
		 */
		$eventOptions?: object;
		/** 
		 * @property
		 * @private (property)
		 * @default /^([a-z]+)-([a-z]+)([?!])?$/
		 * @type {RegExp}
		 */
		_alignRe?: RegExp;
		/** 
		 * @property
		 * @private (property)
		 * @default ['position', 'top', 'left']
		 * @type {any[]}
		 */
		_positionTopLeft?: any[];
		/** 
		 * By default this method does nothing but return the position spec passed to it. In
		 * rtl mode it is overridden to convert "l" to "r" and vice versa when required.
		 * @property
		 * @private (property)
		 * @type {object}
		 */
		convertPositionSpec?: object;
		/** 
		 * Initial suspended call count. Incremented when [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents) is called, decremented when [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) is called.
		 * @property
		 * @private (property)
		 * @default 0
		 * @type {number}
		 */
		eventsSuspended?: number;
		/** 
		 * Returns the `X,Y` position of this element without regard to any RTL
		 * direction settings.
		 * @property
		 * @private (property)
		 * @type {object}
		 */
		getTrueXY?: object;
		/** 
		 * @property
		 * @private (property)
		 * @default true
		 * @type {boolean}
		 */
		isLite?: boolean;
		/** 
		 * @property
		 * @private (property)
		 * @default 'positionable'
		 * @type {string}
		 */
		mixinId?: string;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                members    The members to add to this class.
		 * @param   {boolean}                               [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                               [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}            
		 */
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.CompositeElementLite;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                members
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}         this
		 */
		static addStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		static addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		static createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		static fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		static fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		static get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		static getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		static getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		static getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		static getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		static getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		static getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		static getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		static getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		static getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		static normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		static override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		static parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		static parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		static query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		static select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		static serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		static unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		static create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		static create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		static _onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static _onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		static addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                members
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}         
		 */
		static addInheritableStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		static addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                name
		 * @param   {object}                                member
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}        
		 */
		static addMember? (name: object, member: object): typeof Ext.dom.CompositeElementLite;
		static addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		static addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		static borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  
		 */
		static detach? (): typeof Ext.dom.CompositeElementLite;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		static extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		static getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		static mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                fn
		 * @param   {object}                                scope
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}       
		 */
		static onExtended? (fn: object, scope: object): typeof Ext.dom.CompositeElementLite;
		static onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static triggerExtended? (): void;
		/** 
		 * Creates new Element directly by passing an id or the HTMLElement.  This
		 * constructor should not be called directly.  Always use [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)
		 * or [Ext#fly()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) instead.
		 * 
		 * In older versions of Ext JS and Sencha Touch this constructor checked to see if
		 * there was already an instance of this element in the cache and if so, returned
		 * the same instance. As of version 5 this behavior has been removed in order to
		 * avoid a redundant cache lookup since the most common path is for the Element
		 * constructor to be called from [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get), which has already
		 * checked for a cache entry.
		 * 
		 * Correct way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or retrieving it from the cache):
		 * 
		 *    var el = Ext.get('foo'); // by id
		 *    
		 *    var el = Ext.get(document.getElementById('foo')); // by DOM reference
		 * 
		 * Incorrect way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * 
		 *    var el = new Ext.dom.Element('foo');
		 * 
		 * For quick and easy access to [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods use a flyweight:
		 * 
		 *    Ext.fly('foo').addCls('foo-hovered');
		 * 
		 * This simply attaches the DOM node with id='foo' to the global flyweight Element
		 * instance to avoid allocating an extra [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance.  If, however,
		 * the Element instance has already been cached by a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)(),
		 * then [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)() will return the cached Element instance.  For more info see
		 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly).
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement} element
		 */
		constructor (element: string | HTMLElement);
		/** 
		 * Adds elements to this Composite object.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {HTMLElement[]|Ext.dom.CompositeElementLite} els
		 * Either an Array of DOM elements to add, or another Composite
		 * object who's elements should be added.
		 * @param   {HTMLElement|string}                         [root] The root element of the query or id of the root.
		 * @returns {Ext.dom.CompositeElementLite}                      This Composite object.
		 */
		add? (els: HTMLElement[] | Ext.dom.CompositeElementLite, root?: HTMLElement | string): Ext.dom.CompositeElementLite;
		/** 
		 * Alias for [onAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addAfterListener? (): void;
		/** 
		 * Alias for [onBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addBeforeListener? (): void;
		/** 
		 * Adds the given CSS class(es) to this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}              names
		 * The CSS classes to add separated by space,
		 * or an array of classes
		 * @param   {string}                       [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}                       [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * @returns {Ext.dom.CompositeElementLite}          this
		 */
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.CompositeElementLite;
		/** 
		 * The [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method is shorthand for
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * 
		 * Appends an event handler to this object.  For example:
		 * 
		 *    myGridPanel.on("itemclick", this.onItemClick, this);
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple events. For example:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: this.onCellClick,
		 *        select: this.onSelect,
		 *        viewready: this.onViewReady,
		 *        scope: this // Important. Ensure "this" is correct during handler execution
		 *    });
		 * 
		 * One can also specify options for each event handler separately:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: this.onCellClick, scope: this, single: true},
		 *        viewready: {fn: panel.onViewReady, scope: panel}
		 *    });
		 * 
		 * _Names_ of methods in a specified scope may also be used:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: 'onCellClick', scope: this, single: true},
		 *        viewready: {fn: 'onViewReady', scope: panel}
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|object}                                                        eventName
		 * The name of the event to listen for.
		 * May also be an object who's property names are event names.
		 * @param   {Function|string}                                                      [fn]
		 * The method the event invokes or the _name_ of
		 * the method within the specified `scope`.  Will be called with arguments
		 * given to [Ext.util.Observable.fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) plus the `options` parameter described
		 * below.
		 * @param   {object}                                                               [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object|Ext.dom.CompositeElementLite.methodParams.addListener.Options} [options]
		 * An object containing handler configuration.
		 * 
		 * **Note:** The options object will also be passed as the last argument to every
		 * event handler.
		 * 
		 * This object may contain any of the following properties:
		 * @param   {string}                                                               [order]
		 * A shortcut for the `order` event option.  Provided for backward compatibility.
		 *   Please use the `priority` event option instead.
		 * 
		 * **Combining Options**
		 * 
		 * Using the options argument, it is possible to combine different types of listeners:
		 * 
		 * A delayed, one-time listener.
		 * 
		 *    myPanel.on('hide', this.handleClick, this, {
		 *        single: true,
		 *        delay: 100
		 *    });
		 * 
		 * **Attaching multiple handlers in 1 call**
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple handlers and handler configs.
		 * 
		 *    grid.on({
		 *        itemclick: 'onItemClick',
		 *        itemcontextmenu: grid.onItemContextmenu,
		 *        destroy: {
		 *            fn: function () {
		 *                // function called within the 'altCmp' scope instead of grid
		 *            },
		 *            scope: altCmp // unique scope for the destroy handler
		 *        },
		 *        scope: grid       // default scope - provided for example clarity
		 *    });
		 * 
		 * **Delegate**
		 * 
		 * This is a configuration option that you can pass along when registering a handler for
		 * an event to assist with event delegation. By setting this configuration option
		 * to a simple selector, the target element will be filtered to look for a
		 * descendant of the target. For example:
		 * 
		 *    var panel = Ext.create({
		 *        xtype: 'panel',
		 *        renderTo: document.body,
		 *        title: 'Delegate Handler Example',
		 *        frame: true,
		 *        height: 220,
		 *        width: 220,
		 *        html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content'
		 *    });
		 *    
		 *    // The click handler will only be called when the click occurs on the
		 *    // delegate: h1.myTitle ("h1" tag with class "myTitle")
		 *    panel.on({
		 *        click: function (e) {
		 *            console.log(e.getTarget().innerHTML);
		 *        },
		 *        element: 'body',
		 *        delegate: 'h1.myTitle'
		 *     });
		 * 
		 * @returns {object}                                                               
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes
		 *  all listeners added in this call. For example:
		 * 
		 *    this.btnListeners =  = myButton.on({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addListener? (eventName: string | object, fn?: ExtGlobalFunction | string, scope?: object, options?: object | Ext.dom.CompositeElementLite.methodParams.addListener.Options, order?: string): object;
		/** 
		 * The addManagedListener method is used when some object (call it "A") is listening
		 * to an event on another observable object ("B") and you want to remove that listener
		 * from "B" when "A" is destroyed. This is not an issue when "B" is destroyed because
		 * all of its listeners will be removed at that time.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Foo', {
		 *        extend: 'Ext.Component',
		 *    
		 *        initComponent: function () {
		 *            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);
		 *            this.callParent();
		 *        }
		 *    });
		 * 
		 * As you can see, when an instance of Foo is destroyed, it ensures that the 'show'
		 * listener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.
		 * 
		 * As of version 5.1 it is no longer necessary to use this method in most cases because
		 * listeners are automatically managed if the scope object provided to
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) is an Observable instance.
		 * However, if the observable instance and scope are not the same object you
		 * still need to use `mon` or `addManagedListener` if you want the listener to be
		 * managed.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Aligns the element with another element relative to the specified anchor points. If
		 * the other element is the document it aligns it to the viewport. The position
		 * parameter is optional, and can be specified in any one of the following formats:
		 * 
		 * - **Blank**: Defaults to aligning the element's top-left corner to the target's
		 *   bottom-left corner ("tl-bl").
		 * - **One anchor (deprecated)**: The passed anchor position is used as the target
		 *   element's anchor point.  The element being aligned will position its top-left
		 *   corner (tl) to that point. _This method has been deprecated in favor of the newer
		 *   two anchor syntax below_.
		 * - **Two anchors**: If two values from the table below are passed separated by a dash,
		 *   the first value is used as the element's anchor point, and the second value is
		 *   used as the target's anchor point.
		 * 
		 * In addition to the anchor points, the position parameter also supports the "?"
		 * character. If "?" is passed at the end of the position string, the element will
		 * attempt to align as specified, but the position will be adjusted to constrain to
		 * the viewport if necessary. Note that the element being aligned might be swapped to
		 * align to a different position than that specified in order to enforce the viewport
		 * constraints. Following are all of the supported anchor positions:
		 * 
		 *    Value  Description
		 *    -----  -----------------------------
		 *    tl     The top left corner (default)
		 *    t      The center of the top edge
		 *    tr     The top right corner
		 *    l      The center of the left edge
		 *    c      In the center of the element
		 *    r      The center of the right edge
		 *    bl     The bottom left corner
		 *    b      The center of the bottom edge
		 *    br     The bottom right corner
		 * 
		 * Example Usage:
		 * 
		 *    // align el to other-el using the default positioning
		 *    // ("tl-bl", non-constrained)
		 *    el.alignTo("other-el");
		 *    
		 *    // align the top left corner of el with the top right corner of other-el
		 *    // (constrained to viewport)
		 *    el.alignTo("other-el", "tr?");
		 *    
		 *    // align the bottom right corner of el with the center left edge of other-el
		 *    el.alignTo("other-el", "br-l?");
		 *    
		 *    // align the center of el with the bottom left corner of other-el and
		 *    // adjust the x position by -6 pixels (and the y position by 0)
		 *    el.alignTo("other-el", "c-bl", [-6, 0]);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]
		 * Offset the positioning by [x, y]
		 * Element animation config object
		 * @returns {Ext.dom.CompositeElementLite}                        this
		 */
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.CompositeElementLite;
		/** 
		 * Appends the passed element(s) to this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).
		 */
		appendChild? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends this element to the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The new parent element.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.CompositeElementLite}          This element.
		 */
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElementLite;
		/** 
		 * More flexible version of [setStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setStyle) for setting style properties.
		 * 
		 * Styles in object form should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    el.applyStyles('color: white;');
		 *    
		 *    el.applyStyles({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 *    
		 *    el.applyStyles(function () {
		 *        if (name.initialConfig.html === 'Phineas Flynn') {
		 *            return 'font-style: italic;';
		 *            // OR return { fontStyle: 'italic' };
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string|object}       styles
		 * A style specification string, e.g. "width:100px", or object in the form `{width:"100px"}`, or
		 * a function which returns such a specification.
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.CompositeElementLite;
		/** 
		 * Tries to blur the element. Any exceptions are caught and ignored.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  this
		 */
		blur? (): Ext.dom.CompositeElementLite;
		/** 
		 * When an element is moved around in the DOM, or is hidden using `display:none`, it loses layout, and therefore
		 * all scroll positions of all descendant elements are lost.
		 * 
		 * This function caches them, and returns a function, which when run will restore the cached positions.
		 * In the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:
		 * 
		 *    var restoreScroll = myPanel.el.cacheScrollValues();
		 *    myOtherContainer.add(myPanel);
		 *    restoreScroll();
		 * 
		 * @method
		 * @public (method)
		 * @returns {Function} 
		 * A function which will restore all descendant elements of this Element to their scroll
		 * positions recorded when this function was executed. Be aware that the returned function is a closure which has
		 * captured the scope of `cacheScrollValues`, so take care to dereference it as soon as not needed - if is it is a `var`
		 * it will drop out of scope, and the reference will be freed.
		 */
		cacheScrollValues? (): ExtGlobalFunction;
		/** 
		 * Centers the Element in either the viewport, or another Element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} centerIn
		 * element in
		 * which to center the element.
		 * @returns {Ext.dom.Element}                             This element
		 */
		center? (centerIn: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Selects a single _direct_ child based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		child? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Removes all elements from this Composite.
		 * @method
		 * @public (method)
		 * @param   {boolean} [removeDom] True to also remove the elements from the document.
		 * @returns {void}                
		 */
		clear? (removeDom?: boolean): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearListeners? (): void;
		/** 
		 * Removes all managed listeners for this object.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearManagedListeners? (): void;
		/** 
		 * Clone this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                     [deep]      `true` if the children of the node should also be cloned.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The newly cloned [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`).
		 */
		clone? (deep?: boolean, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Returns `true` if this composite contains the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|number} el
		 * The id of an element, or an [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or an HtmlElement to
		 * find within the composite collection.
		 * @returns {boolean}                                      
		 */
		contains? (el: string | HTMLElement | Ext.dom.Element | number): boolean;
		/** 
		 * Creates the passed DomHelper config and appends it to this element or optionally
		 * inserts it before the passed child element.
		 * @method
		 * @public (method)
		 * @param   {object}                      config
		 * DomHelper element config object.  If no tag is specified
		 * (e.g., {tag:'input'}) then a div will be automatically generated with the specified
		 * attributes.
		 * @param   {HTMLElement}                 [insertBefore] a child element of this element
		 * @param   {boolean}                     [returnDom]
		 * true to return the dom node instead of creating
		 * an Element
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_)
		 */
		createChild? (config: object, insertBefore?: HTMLElement, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Translates an element using CSS 3 in 2D.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		cssTranslate? (): void;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		down? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Calls the passed function for each element in this composite.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function}                     fn         The function to call.
		 * @param   {Ext.dom.Element}              [fn.el]
		 * The current Element in the iteration. **This is the flyweight
		 * (shared) [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance, so if you require a a reference to the dom node, use el.dom.**
		 * @param   {Ext.dom.CompositeElementLite} [fn.c]     This Composite object.
		 * @param   {number}                       [fn.index] The zero-based index in the iteration.
		 * @param   {void}                         fn.returns
		 * @param   {object}                       [scope]
		 * The scope (this reference) in which the function is executed.
		 * Defaults to the Element.
		 * @returns {Ext.dom.CompositeElementLite}            this
		 */
		each? (fn: ((el?: Ext.dom.Element, c?: Ext.dom.CompositeElementLite, index?: number) => void) | ExtGlobalFunction, scope?: object): Ext.dom.CompositeElementLite;
		/** 
		 * Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if
		 * present. There is no implementation in the Observable base class.
		 * 
		 * This is commonly used by Ext.Components to bubble events to owner Containers.
		 * See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget). The default implementation in [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) returns the
		 * Component's immediate owner. But if a known target is required, this can be overridden to access the
		 * required target more quickly.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Ext.overrides.form.field.Base', {
		 *        override: 'Ext.form.field.Base',
		 *    
		 *        //  Add functionality to Field's initComponent to enable the change event to bubble
		 *        initComponent: function () {
		 *            this.callParent();
		 *            this.enableBubble('change');
		 *        }
		 *    });
		 *    
		 *    var myForm = Ext.create('Ext.form.Panel', {
		 *        title: 'User Details',
		 *        items: [{
		 *            ...
		 *        }],
		 *        listeners: {
		 *            change: function() {
		 *                // Title goes red if form has been modified.
		 *                myForm.header.setStyle('color', 'red');
		 *            }
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|string[]} eventNames The event name to bubble, or an Array of event names.
		 * @returns {void}                       
		 */
		enableBubble? (eventNames: string | string[]): void;
		/** 
		 * Clears this Composite and adds the elements passed.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {HTMLElement[]|Ext.dom.CompositeElementLite} els
		 * Either an array of DOM elements, or another Composite from which
		 * to fill this Composite.
		 * @returns {Ext.dom.CompositeElementLite}                   this
		 */
		fill? (els: HTMLElement[] | Ext.dom.CompositeElementLite): Ext.dom.CompositeElementLite;
		/** 
		 * Filters this composite to only elements that match the passed selector.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string}              selector
		 * A string CSS selector or a comparison function. The comparison function will be
		 * called with the following arguments:
		 * @param   {Ext.dom.Element}              [selector.el]    The current DOM element.
		 * @param   {number}                       [selector.index] The current index within the collection.
		 * @param   {void}                         selector.returns
		 * @returns {Ext.dom.CompositeElementLite}                  this
		 */
		filter? (selector: ((el?: Ext.dom.Element, index?: number) => void) | ExtGlobalFunction | string): Ext.dom.CompositeElementLite;
		/** 
		 * Looks at this node and then at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParent? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Looks at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParentNode? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * By default, the action function will be executed after any "before" event handlers
		 * (as specified using the `order` option of
		 * [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)), but before any other
		 * handlers are fired.  This gives the "before" handlers an opportunity to
		 * cancel the event by returning `false`, and prevent the action function from
		 * being called.
		 * 
		 * The action can also be configured to run after normal handlers, but before any "after"
		 * handlers (as specified using the `order` event option) by passing `'after'`
		 * as the `order` parameter.  This configuration gives any event handlers except
		 * for "after" handlers the opportunity to cancel the event and prevent the action
		 * function from being called.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {any[]}    args      Arguments to pass to handlers and to the action function.
		 * @param   {Function} fn        The action function.
		 * @param   {object}   [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object}   [options]
		 * Event options for the action function.  Accepts any
		 * of the options of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * @param   {string}   [order]
		 * The order to call the action function relative
		 * too the event handlers (`'before'` or `'after'`).  Note that this option is
		 * simply used to sort the action function relative to the event handlers by "priority".
		 * An order of `'before'` is equivalent to a priority of `99.5`, while an order of
		 * `'after'` is equivalent to a priority of `-99.5`.  See the `priority` option
		 * of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) for more details.
		 * @returns {void}               
		 */
		fireAction? (eventName: string, args: any[], fn: ExtGlobalFunction, scope?: object, options?: object, order?: string): void;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to fire.
		 * @returns {boolean}           returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string): boolean;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}    eventName The name of the event to fire.
		 * @param   {...object} args      Variable number of parameters are passed to handlers.
		 * @returns {boolean}             returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string, ...args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameter list.
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {object[]} args      An array of parameters which are passed to handlers.
		 * @returns {boolean}            returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEventArgs? (eventName: string, args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * Evented Actions will automatically dispatch a 'before' event passing. This event will
		 * be given a special controller that allows for pausing/resuming of the event flow.
		 * 
		 * By pausing the controller the updater and events will not run until resumed. Pausing,
		 * however, will not stop the processing of any other before events.
		 * @method
		 * @public (method)
		 * @param   {string}          eventName The name of the event to fire.
		 * @param   {any[]}           args      Arguments to pass to handlers and to the action function.
		 * @param   {Function|string} fn        The action function.
		 * @param   {object}          [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {any[]|boolean}   [fnArgs]
		 * Optional arguments for the action `fn`. If not
		 * given, the normal `args` will be used to call `fn`. If `false` is passed, the
		 * `args` are used but if the first argument is this instance it will be removed
		 * from the args passed to the action function.
		 * @returns {void}                      
		 */
		fireEventedAction? (eventName: string, args: any[], fn: ExtGlobalFunction | string, scope?: object, fnArgs?: any[] | boolean): void;
		/** 
		 * Returns the first Element
		 * @method
		 * @public (method)
		 * @returns {Ext.dom.Element}  
		 */
		first? (): Ext.dom.Element;
		/** 
		 * Try to focus the element either immediately or after a timeout
		 * if `defer` argument is specified.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       [defer] Milliseconds to defer the focus
		 * @returns {Ext.dom.CompositeElementLite}         this
		 */
		focus? (defer?: number): Ext.dom.CompositeElementLite;
		/** 
		 * Gets the x,y coordinates to align this element with another element. See
		 * [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for more info on the supported position values.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]  Offset the positioning by [x, y]
		 * @returns {number[]}                                            [x, y]
		 */
		getAlignToXY? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): number[];
		/** 
		 * Gets the x,y coordinates specified by the anchor position on the element.
		 * @method
		 * @public (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}  [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorXY? (anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the value of an attribute from the element's underlying DOM node.
		 * @method
		 * @public (method)
		 * @param   {string} name        The attribute name.
		 * @param   {string} [namespace] The namespace in which to look for the attribute.
		 * @returns {string}             The attribute value.
		 */
		getAttribute? (name: string, namespace?: string): string;
		/** 
		 * Returns an object containing a map of all attributes of this element's DOM node.
		 * @method
		 * @public (method)
		 * @returns {object}  Key/value pairs of attribute names and their values.
		 */
		getAttributes? (): object;
		/** 
		 * Gets the width of the border(s) for the specified side(s)
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the border **l**eft
		 * width + the border **r**ight width.
		 * @returns {number}      The width of the sides passed added together
		 */
		getBorderWidth? (side: string): number;
		/** 
		 * Gets the bottom Y coordinate of the element (element Y position + element height)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinate
		 * @returns {number}        
		 */
		getBottom? (local: boolean): number;
		/** 
		 * Return an object defining the area of this Element which can be passed to
		 * [setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentBox]
		 * If true a box for the content of the element is
		 * returned.
		 * @param   {boolean} [local]
		 * If true the element's left and top relative to its
		 * `offsetParent` are returned instead of page x/y.
		 * @returns {object}               An object in the format
		 */
		getBox? (contentBox?: boolean, local?: boolean): object;
		/** 
		 * Returns a child element of this element given its `id`.
		 * @method
		 * @public (method)
		 * @param   {string}                      id      The id of the desired child element.
		 * @param   {boolean}                     [asDom]
		 * True to return the DOM element, false to return a
		 * wrapped Element object.
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The child element (or HTMLElement if
		 * _asDom_ is _true_).  Or null if no match was found.
		 */
		getById? (id: string, asDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns a region object that defines the client area of this element.
		 * 
		 * That is, the area _within_ any scrollbars.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getClientRegion? (): Ext.util.Region;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the content region of this element for purposes of constraining floating
		 * children.  That is the region within the borders and scrollbars, but not within the padding.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getConstrainRegion? (): void;
		/** 
		 * Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best
		 * attempt to constrain within the passed constraint. Returns `false` if the element
		 * does not need to be moved.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * The constraint may either be an existing element into which the element is to be
		 * constrained, or a [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) into which this element is to be
		 * constrained.
		 * 
		 * By default, any extra shadow around the element is **not** included in the constrain calculations - the edges
		 * of the element are used as the element bounds. To constrain the shadow within the constrain region, set the
		 * `constrainShadow` property on this element to `true`.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string|Ext.util.Region} [constrainTo]
		 * The
		 * Positionable, HTMLElement, element id, or Region into which the element is to be
		 * constrained.
		 * @param   {number[]}                                                 [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to produce a vector for instead of using the element's current position
		 * @param   {number[]}                                                 [proposedSize]
		 * A proposed `[width, height]` size to constrain
		 * instead of using the element's current size
		 * @returns {number[]|boolean}                                         
		 * **If** the element _needs_ to be translated, an `[X, Y]`
		 * vector by which this element must be translated. Otherwise, `false`.
		 */
		getConstrainVector? (constrainTo?: Ext.util.Positionable | HTMLElement | string | Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]): number[] | boolean;
		/** 
		 * Returns the number of elements in this Composite.
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getCount? (): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHTML? (): string;
		/** 
		 * Returns the offset height of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentHeight] `true` to get the height minus borders and padding.
		 * @returns {number}                  The element's height.
		 */
		getHeight? (contentHeight?: boolean): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHtml? (): string;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Gets the left X coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of
		 * page coordinate
		 * @returns {number}        
		 */
		getLeft? (local: boolean): number;
		/** 
		 * Returns the x coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local x coordinate
		 */
		getLocalX? (): number;
		/** 
		 * Returns the x and y coordinates of this element relative to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number[]}  The local XY position of the element
		 */
		getLocalXY? (): number[];
		/** 
		 * Returns the y coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local y coordinate
		 */
		getLocalY? (): number;
		/** 
		 * Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
		 * then it returns the calculated width of the sides (see [getPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-getPadding)).
		 * @method
		 * @public (method)
		 * @param   {string}        [sides] Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		 * @returns {object|number}         
		 */
		getMargin? (sides?: string): object | number;
		/** 
		 * Returns the offsets of this element from the passed element. The element must both
		 * be part of the DOM tree and not have display:none to have page coordinates.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} offsetsTo
		 * The Positionable,
		 * HTMLElement, or element id to get get the offsets from.
		 * @returns {number[]}                                           The XY page offsets (e.g. `[100, -200]`)
		 */
		getOffsetsTo? (offsetsTo: Ext.util.Positionable | HTMLElement | string): number[];
		/** 
		 * Retrieves the height of the element account for the top and bottom margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterHeight? (): void;
		/** 
		 * Retrieves the width of the element accounting for the left and right margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterWidth? (): void;
		/** 
		 * Gets the width of the padding(s) for the specified side(s).
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the padding **l**eft +
		 * the padding **r**ight.
		 * @returns {number}      The padding of the sides passed added together.
		 */
		getPadding? (side: string): number;
		/** 
		 * Returns an object defining the area of this Element which can be passed to
		 * [Ext.util.Positionable.setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                [asRegion] If true an [Ext.util.Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) will be returned
		 * @returns {object|Ext.util.Region} 
		 * box An object in the following format:
		 * 
		 *    {
		 *        left: &lt;Element's X position&gt;,
		 *        top: &lt;Element's Y position&gt;,
		 *        width: &lt;Element's width&gt;,
		 *        height: &lt;Element's height&gt;,
		 *        bottom: &lt;Element's lower bound&gt;,
		 *        right: &lt;Element's rightmost bound&gt;
		 *    }
		 * 
		 * The returned object may also be addressed as an Array where index 0 contains
		 * the X position and index 1 contains the Y position. So the result may also be
		 * used for [setXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setXY)
		 */
		getPageBox? (asRegion?: boolean): object | Ext.util.Region;
		/** 
		 * Returns a region object that defines the area of this element.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getRegion? (): Ext.util.Region;
		/** 
		 * Gets the right X coordinate of the element (element X position + element width)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getRight? (local: boolean): number;
		/** 
		 * Returns the current scroll position of the element.
		 * @method
		 * @public (method)
		 * @returns {object} 
		 * An object containing the scroll position in the format
		 * `{left: (scrollLeft), top: (scrollTop)}`
		 */
		getScroll? (): object;
		/** 
		 * Gets the left scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The left scroll position
		 */
		getScrollLeft? (): number;
		/** 
		 * Gets the Scroller instance of the first parent that has one.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getScrollParent? (): void;
		/** 
		 * Gets the top scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The top scroll position
		 */
		getScrollTop? (): number;
		/** 
		 * Returns the size of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentSize] `true` to get the width/size minus borders and padding.
		 * @returns {object}                An object containing the element's size:
		 */
		getSize? (contentSize?: boolean): object;
		/** 
		 * Returns a named style property based on computed/currentStyle (primary) and
		 * inline-style if primary is not available.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} property
		 * The style property (or multiple property names
		 * in an array) whose value is returned.
		 * @param   {boolean}         [inline] if `true` only inline styles will be returned.
		 * @returns {string|object}   
		 * The current value of the style property for this element
		 * (or a hash of named style values if multiple property arguments are requested).
		 */
		getStyle? (property: string | string[], inline?: boolean): string | object;
		/** 
		 * Returns the width in pixels of the passed text, or the width of the text in this Element.
		 * @method
		 * @public (method)
		 * @param   {string} text  The text to measure. Defaults to the innerHTML of the element.
		 * @param   {number} [min] The minumum value to return.
		 * @param   {number} [max] The maximum value to return.
		 * @returns {number}       The text width in pixels.
		 */
		getTextWidth? (text: string, min?: number, max?: number): number;
		/** 
		 * Gets the top Y coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getTop? (local: boolean): number;
		/** 
		 * Returns the value of the `value` attribute.
		 * @method
		 * @public (method)
		 * @param   {boolean}       asNumber `true` to parse the value as a number.
		 * @returns {string|number}          
		 */
		getValue? (asNumber: boolean): string | number;
		/** 
		 * Returns the **content** region of this element. That is the region within the borders
		 * and padding.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" member data.
		 */
		getViewRegion? (): Ext.util.Region;
		/** 
		 * Returns the dimensions of the element available to lay content out in.  For
		 * most elements this is the clientHeight/clientWidth.  If the element is
		 * the document/document.body the window's innerHeight/innerWidth is returned
		 * 
		 * If the element (or any ancestor element) has CSS style `display: none`, the
		 * dimensions will be zero.
		 * @method
		 * @public (method)
		 * @returns {object}  Object describing width and height.
		 */
		getViewSize? (): object;
		/** 
		 * Returns the offset width of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentWidth] `true` to get the width minus borders and padding.
		 * @returns {number}                 The element's width.
		 */
		getWidth? (contentWidth?: boolean): number;
		/** 
		 * Gets element X position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getX? (): number;
		/** 
		 * Gets element X and Y positions in page coordinates
		 * @method
		 * @public (method)
		 * @returns {any[]}  [x, y]
		 */
		getXY? (): any[];
		/** 
		 * Gets element Y position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getY? (): number;
		/** 
		 * Returns this element's z-index
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getZIndex? (): number;
		/** 
		 * Checks if the specified CSS class exists on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string}  name The CSS class to check for.
		 * @returns {boolean}      `true` if the class exists, else `false`.
		 */
		hasCls? (name: string): boolean;
		/** 
		 * Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
		 * indicates whether the event needs firing or not.
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to check for
		 * @returns {boolean}           `true` if the event is being listened for or bubbles, else `false`
		 */
		hasListener? (eventName: string): boolean;
		/** 
		 * Hide this element - Uses display mode to determine whether to use "display",
		 * "visibility", or "offsets". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  this
		 */
		hide? (): Ext.dom.CompositeElementLite;
		/** 
		 * Find the index of the passed element within the composite collection.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|number} el
		 * The id of an element, or an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or an HtmlElement
		 * to find within the composite collection.
		 * @returns {number}                                       The index of the passed [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) in the composite collection, or -1 if not found.
		 */
		indexOf? (el: string | HTMLElement | Ext.dom.Element | number): number;
		/** 
		 * Inserts this element after the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to insert after.
		 * The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.CompositeElementLite}          This element.
		 */
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElementLite;
		/** 
		 * Inserts this element before the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element before which this element will be inserted.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.CompositeElementLite}          This element.
		 */
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.CompositeElementLite;
		/** 
		 * Inserts (or creates) an element as the first child of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config to create and insert
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_).
		 */
		insertFirst? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Inserts an html fragment into this element
		 * @method
		 * @public (method)
		 * @param   {string}                      where
		 * Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
		 * See [Ext.dom.Helper.insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml) for details.
		 * @param   {string}                      html       The HTML fragment
		 * @param   {boolean}                     [returnEl] True to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}            The inserted node (or nearest related if more than 1 inserted)
		 */
		insertHtml? (where: string, html: string, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object|any[]} el
		 * The id, element to insert or a DomHelper config
		 * to create and insert _or_ an array of any of those.
		 * @param   {string}                                          [where]     'before' or 'after'
		 * @param   {boolean}                                         [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}                     
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_). If an array is passed, the last
		 * inserted element is returned.
		 */
		insertSibling? (el: string | HTMLElement | Ext.dom.Element | object | any[], where?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns `true` if this element matches the passed simple selector
		 * (e.g. 'div.some-class' or 'span:first-child').
		 * @method
		 * @public (method)
		 * @param   {Function|string} selector
		 * The simple selector to test or a function which is passed
		 * candidate nodes, and should return `true` for nodes which match.
		 * @returns {boolean}                  `true` if this element matches the selector, else `false`.
		 */
		is? (selector: ExtGlobalFunction | string): boolean;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element or id of the element
		 * to search for in this elements descendants.
		 * @returns {boolean}                               
		 */
		isAncestor? (el: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Determines if this element is a descendant of the passed in Element.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		isDescendent? (): void;
		/** 
		 * Returns true if this element is scrollable.
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		isScrollable? (): boolean;
		/** 
		 * Checks if the current value of a style is equal to a given value.
		 * @method
		 * @public (method)
		 * @param   {string}  style property whose value is returned.
		 * @param   {string}  value to check against.
		 * @returns {boolean}       `true` for when the current value equals the given value.
		 */
		isStyle? (style: string, value: string): boolean;
		/** 
		 * Checks if all events, or a specific event, is suspended.
		 * @method
		 * @public (method)
		 * @param   {string}  [event] The name of the specific event to check
		 * @returns {boolean}         `true` if events are suspended
		 */
		isSuspended? (event?: string): boolean;
		/** 
		 * Returns `true` if the value of the given property is visually transparent. This
		 * may be due to a 'transparent' style value or an rgba value with 0 in the alpha
		 * component.
		 * @method
		 * @public (method)
		 * @param   {string}  prop The style property whose value is to be tested.
		 * @returns {boolean}      `true` if the style property is visually transparent.
		 */
		isTransparent? (prop: string): boolean;
		/** 
		 * Checks whether the element is currently visible using both visibility and display properties.
		 * @method
		 * @public (method)
		 * @param   {boolean} [deep]
		 * True to walk the dom and see if parent elements are hidden.
		 * If false, the function only checks the visibility of the element itself and it may return
		 * `true` even though a parent is not visible.
		 * @returns {boolean}        `true` if the element is currently visible, else `false`
		 */
		isVisible? (deep?: boolean): boolean;
		/** 
		 * Returns a flyweight Element of the dom element object at the specified index.
		 * @method
		 * @public (method)
		 * @param   {number}          index
		 * @returns {Ext.dom.Element}       
		 */
		item? (index: number): Ext.dom.Element;
		/** 
		 * Returns the last Element
		 * @method
		 * @public (method)
		 * @returns {Ext.dom.Element}  
		 */
		last? (): Ext.dom.Element;
		/** 
		 * Shorthand for [addManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		mon? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Move the element relative to its current position.
		 * @method
		 * @public (method)
		 * @param   {string} direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number} distance  How far to move the element in pixels
		 * @returns {void}             
		 */
		move? (direction: string, distance: number): void;
		/** 
		 * Shorthand for [removeManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		mun? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Gets the next sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The next sibling [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _asDom_ is _true_).  Or null if no match is found.
		 */
		next? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * The [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method is shorthand for
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * 
		 * Appends an event handler to this object.  For example:
		 * 
		 *    myGridPanel.on("itemclick", this.onItemClick, this);
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple events. For example:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: this.onCellClick,
		 *        select: this.onSelect,
		 *        viewready: this.onViewReady,
		 *        scope: this // Important. Ensure "this" is correct during handler execution
		 *    });
		 * 
		 * One can also specify options for each event handler separately:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: this.onCellClick, scope: this, single: true},
		 *        viewready: {fn: panel.onViewReady, scope: panel}
		 *    });
		 * 
		 * _Names_ of methods in a specified scope may also be used:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: 'onCellClick', scope: this, single: true},
		 *        viewready: {fn: 'onViewReady', scope: panel}
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|object}                                               eventName
		 * The name of the event to listen for.
		 * May also be an object who's property names are event names.
		 * @param   {Function|string}                                             [fn]
		 * The method the event invokes or the _name_ of
		 * the method within the specified `scope`.  Will be called with arguments
		 * given to [Ext.util.Observable.fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) plus the `options` parameter described
		 * below.
		 * @param   {object}                                                      [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object|Ext.dom.CompositeElementLite.methodParams.on.Options} [options]
		 * An object containing handler configuration.
		 * 
		 * **Note:** The options object will also be passed as the last argument to every
		 * event handler.
		 * 
		 * This object may contain any of the following properties:
		 * @param   {string}                                                      [order]
		 * A shortcut for the `order` event option.  Provided for backward compatibility.
		 *   Please use the `priority` event option instead.
		 * 
		 * **Combining Options**
		 * 
		 * Using the options argument, it is possible to combine different types of listeners:
		 * 
		 * A delayed, one-time listener.
		 * 
		 *    myPanel.on('hide', this.handleClick, this, {
		 *        single: true,
		 *        delay: 100
		 *    });
		 * 
		 * **Attaching multiple handlers in 1 call**
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple handlers and handler configs.
		 * 
		 *    grid.on({
		 *        itemclick: 'onItemClick',
		 *        itemcontextmenu: grid.onItemContextmenu,
		 *        destroy: {
		 *            fn: function () {
		 *                // function called within the 'altCmp' scope instead of grid
		 *            },
		 *            scope: altCmp // unique scope for the destroy handler
		 *        },
		 *        scope: grid       // default scope - provided for example clarity
		 *    });
		 * 
		 * **Delegate**
		 * 
		 * This is a configuration option that you can pass along when registering a handler for
		 * an event to assist with event delegation. By setting this configuration option
		 * to a simple selector, the target element will be filtered to look for a
		 * descendant of the target. For example:
		 * 
		 *    var panel = Ext.create({
		 *        xtype: 'panel',
		 *        renderTo: document.body,
		 *        title: 'Delegate Handler Example',
		 *        frame: true,
		 *        height: 220,
		 *        width: 220,
		 *        html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content'
		 *    });
		 *    
		 *    // The click handler will only be called when the click occurs on the
		 *    // delegate: h1.myTitle ("h1" tag with class "myTitle")
		 *    panel.on({
		 *        click: function (e) {
		 *            console.log(e.getTarget().innerHTML);
		 *        },
		 *        element: 'body',
		 *        delegate: 'h1.myTitle'
		 *     });
		 * 
		 * @returns {object}                                                      
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes
		 *  all listeners added in this call. For example:
		 * 
		 *    this.btnListeners =  = myButton.on({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		on? (eventName: string | object, fn?: ExtGlobalFunction | string, scope?: object, options?: object | Ext.dom.CompositeElementLite.methodParams.on.Options, order?: string): object;
		/** 
		 * Appends an after-event handler.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Appends a before-event handler.  Returning `false` from the handler will stop the event.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Gets the parent node for this element, optionally chaining up trying to match a selector
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find a parent node that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] True to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The parent node ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		parent? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Initializes positioning on this element. If a desired position is not passed,
		 * it will make the the element positioned relative IF it is not already positioned.
		 * @method
		 * @public (method)
		 * @param   {string} [pos]    Positioning to use "relative", "absolute" or "fixed"
		 * @param   {number} [zIndex] The zIndex to apply
		 * @param   {number} [x]      Set the page X position
		 * @param   {number} [y]      Set the page Y position
		 * @returns {void}            
		 */
		position? (pos?: string, zIndex?: number, x?: number, y?: number): void;
		/** 
		 * Gets the previous sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The previous sibling ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		prev? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		purgeAllListeners? (): void;
		/** 
		 * Selects child nodes based on the passed CSS selector.
		 * Delegates to document.querySelectorAll. More information can be found at
		 * [http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)
		 * 
		 * All selectors, attribute filters and pseudos below can be combined infinitely
		 * in any order. For example `div.foo:nth-child(odd)[@foo=bar].bar:first` would be
		 * a perfectly valid selector.
		 * 
		 * ## Element Selectors:
		 * 
		 * - * any element
		 * - E an element with the tag E
		 * - E F All descendant elements of E that have the tag F
		 * - E > F or E/F all direct children elements of E that have the tag F
		 * - E + F all elements with the tag F that are immediately preceded by an element with the tag E
		 * - E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
		 * 
		 * ## Attribute Selectors:
		 * 
		 * The use of  and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
		 * 
		 * - E[foo] has an attribute "foo"
		 * - E[foo=bar] has an attribute "foo" that equals "bar"
		 * - E[foo^=bar] has an attribute "foo" that starts with "bar"
		 * - E[foo$=bar] has an attribute "foo" that ends with "bar"
		 * - E[foo*=bar] has an attribute "foo" that contains the substring "bar"
		 * - E[foo%=2] has an attribute "foo" that is evenly divisible by 2
		 * - E[foo!=bar] has an attribute "foo" that does not equal "bar"
		 * 
		 * ## Pseudo Classes:
		 * 
		 * - E:first-child E is the first child of its parent
		 * - E:last-child E is the last child of its parent
		 * - E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
		 * - E:nth-child(odd) E is an odd child of its parent
		 * - E:nth-child(even) E is an even child of its parent
		 * - E:only-child E is the only child of its parent
		 * - E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
		 * - E:first the first E in the resultset
		 * - E:last the last E in the resultset
		 * - E:nth(n) the nth E in the resultset (1 based)
		 * - E:odd shortcut for :nth-child(odd)
		 * - E:even shortcut for :nth-child(even)
		 * - E:not(S) an E element that does not match simple selector S
		 * - E:has(S) an E element that has a descendant that matches simple selector S
		 * - E:next(S) an E element whose next sibling matches simple selector S
		 * - E:prev(S) an E element whose previous sibling matches simple selector S
		 * - E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\
		 * 
		 * ## CSS Value Selectors:
		 * 
		 * - E{display=none} CSS value "display" that equals "none"
		 * - E{display^=none} CSS value "display" that starts with "none"
		 * - E{display$=none} CSS value "display" that ends with "none"
		 * - E{display*=none} CSS value "display" that contains the substring "none"
		 * - E{display%=2} CSS value "display" that is evenly divisible by 2
		 * - E{display!=none} CSS value "display" that does not equal "none"
		 * @method
		 * @public (method)
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements (
		 * HTMLElement or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _asDom_ is _false_) that match the selector.<br/>
		 * If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}              className The CSS class to add, or an array of classes.
		 * @returns {Ext.dom.CompositeElementLite}           this
		 */
		radioCls? (className: string | string[]): Ext.dom.CompositeElementLite;
		/** 
		 * Relays selected events from the specified Observable as if the events were fired by `this`.
		 * 
		 * For example if you are extending Grid, you might decide to forward some events from store.
		 * So you can do this inside your initComponent:
		 * 
		 *    this.relayEvents(this.getStore(), ['load']);
		 * 
		 * The grid instance will then have an observable 'load' event which will be passed
		 * the parameters of the store's load event and any function fired with the grid's
		 * load event would have access to the grid using the this keyword (unless the event
		 * is handled by a controller's control/listen event listener in which case 'this'
		 * will be the controller rather than the grid).
		 * @method
		 * @public (method)
		 * @param   {object}          origin   The Observable whose events this object is to relay.
		 * @param   {string[]|object} events
		 * Array of event names to relay or an Object with key/value
		 * pairs translating to ActualEventName/NewEventName respectively. For example:
		 *     this.relayEvents(this, {add:'push', remove:'pop'});
		 * 
		 * Would now redispatch the add event of this as a push event and the remove event as a pop event.
		 * @param   {string}          [prefix]
		 * A common prefix to prepend to the event names. For example:
		 * 
		 *    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
		 * @returns {object}          
		 * A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:
		 * 
		 *    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Can be undone by calling
		 * 
		 *    Ext.destroy(this.storeRelayers);
		 * 
		 * or
		 *     this.store.relayers.destroy();
		 */
		relayEvents? (origin: object, events: string[] | object, prefix?: string): object;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		remove? (): void;
		/** 
		 * Alias for [unAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAfterListener? (): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAllListeners? (): void;
		/** 
		 * Alias for [unBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeBeforeListener? (): void;
		/** 
		 * Removes the given CSS class(es) from this Element.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} names
		 * The CSS classes to remove separated by space,
		 * or an array of classes
		 * @param   {string}          [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}          [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * return {[Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)} this
		 * @returns {void}                     
		 */
		removeCls? (names: string | string[], prefix?: string, suffix?: string): void;
		/** 
		 * Removes the specified element(s).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element|number} el
		 * The id of an element, the Element itself, the index of the
		 * element in this composite or an array of any of those.
		 * @param   {boolean}                                   [removeDom] `true` to also remove the element from the document
		 * @returns {Ext.dom.CompositeElementLite}                          this
		 */
		removeElement? (el: string | HTMLElement | Ext.dom.Element | number, removeDom?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Removes an event handler.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		removeListener? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes listeners that were added by the [mon](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-mon) method.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		removeManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Forces the browser to repaint this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  this
		 */
		repaint? (): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces the passed element with this element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to replace.
		 * The id of the node, a DOM Node or an existing Element.
		 * @param   {boolean}                            [destroy]
		 * `false` to prevent destruction of the replaced
		 * element
		 * @returns {Ext.dom.CompositeElementLite}                 This element
		 */
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces a CSS class on the element with another.
		 * If the old name does not exist, the new name will simply be added.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                       oldName  The CSS class to replace.
		 * @param   {string}                       newName  The replacement CSS class.
		 * @param   {string}                       [prefix] Prefix to prepend to each class to be replaced.
		 * @param   {string}                       [suffix] Suffix to append to each class to be replaced.
		 * @returns {Ext.dom.CompositeElementLite}          this
		 */
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces the specified element with the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element|number} el
		 * The id of an element, the Element itself, the index of the
		 * element in this composite to replace.
		 * @param   {string|Ext.dom.Element}                    replacement  The id of an element or the Element itself.
		 * @param   {boolean}                                   [domReplace] `true` to remove and replace the element in the document too.
		 * @returns {Ext.dom.CompositeElementLite}                           this
		 */
		replaceElement? (el: string | HTMLElement | Ext.dom.Element | number, replacement: string | Ext.dom.Element, domReplace?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Replaces this element with the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The new element (id of the
		 * node, a DOM Node or an existing Element) or a DomHelper config of an element to create
		 * @returns {Ext.dom.Element}                              This element
		 */
		replaceWith? (el: string | HTMLElement | Ext.dom.Element | object): Ext.dom.Element;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		resumeEvent? (): void;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to resume.
		 * @returns {void}                
		 */
		resumeEvent? (...eventName: string[]): void;
		/** 
		 * Resumes firing events (see [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents)).
		 * 
		 * If events were suspended using the `queueSuspended` parameter, then all events fired
		 * during event suspension will be sent to any listeners now.
		 * @method
		 * @public (method)
		 * @param   {boolean} [discardQueue]
		 * `true` to prevent any previously queued events from firing
		 * while we were suspended. See [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents).
		 * @returns {void}                   
		 */
		resumeEvents? (discardQueue?: boolean): void;
		/** 
		 * Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
		 * within this element's scrollable range.
		 * @method
		 * @public (method)
		 * @param   {string}         direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number}         distance  How far to scroll the element in pixels
		 * @param   {boolean|object} [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {boolean}        
		 * Returns true if a scroll was triggered or false if the element
		 * was scrolled as far as it could go.
		 */
		scroll? (direction: string, distance: number, animate?: boolean | object): boolean;
		/** 
		 * Scrolls this element by the passed delta values, optionally animating.
		 * 
		 * All of the following are equivalent:
		 * 
		 *     el.scrollBy(10, 10, true);
		 *     el.scrollBy([10, 10], true);
		 *     el.scrollBy({ x: 10, y: 10 }, true);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|number[]|object}       deltaX
		 * Either the x delta, an Array specifying x and y deltas or
		 * an object with "x" and "y" properties.
		 * @param   {number|boolean|object}        deltaY  Either the y delta, or an animate flag or config object.
		 * @param   {boolean|object}               animate Animate flag/config object if the delta values were passed separately.
		 * @returns {Ext.dom.CompositeElementLite}         this
		 */
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.CompositeElementLite;
		/** 
		 * Scrolls this element into view within the passed container.
		 * 
		 *      Ext.create('Ext.data.Store', {
		 *          storeId:'simpsonsStore',
		 *          fields:['name', 'email', 'phone'],
		 *          data:{'items':[
		 *              { 'name': 'Lisa',  "email":"lisa@simpsons.com",  "phone":"555-111-1224"  },
		 *              { 'name': 'Bart',  "email":"bart@simpsons.com",  "phone":"555-222-1234" },
		 *              { 'name': 'Homer', "email":"homer@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Marge', "email":"marge@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Milhouse', "email":"milhouse@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Willy', "email":"willy@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Skinner', "email":"skinner@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Hank (last row)', "email":"hank@simpsons.com", "phone":"555-222-1254"  }
		 *          ]},
		 *          proxy: {
		 *              type: 'memory',
		 *              reader: {
		 *                  type: 'json',
		 *                  rootProperty: 'items'
		 *              }
		 *          }
		 *      });
		 *    
		 *      var grid = Ext.create('Ext.grid.Panel', {
		 *          title: 'Simpsons',
		 *          store: Ext.data.StoreManager.lookup('simpsonsStore'),
		 *          columns: [
		 *              { text: 'Name',  dataIndex: 'name', width: 125 },
		 *              { text: 'Email', dataIndex: 'email', flex: 1 },
		 *              { text: 'Phone', dataIndex: 'phone' }
		 *          ],
		 *          height: 190,
		 *          width: 400,
		 *          renderTo: Ext.getBody(),
		 *          tbar: [{
		 *              text: 'Scroll row 7 into view',
		 *              handler: function () {
		 *                  var view = grid.getView();
		 *    
		 *                  Ext.get(view.getRow(7)).scrollIntoView(view.getEl(), null, true);
		 *              }
		 *          }]
		 *      });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.Element} [container]
		 * The container element
		 * to scroll.  Should be a string (id), dom node, or [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @param   {boolean}                        [hscroll]   False to disable horizontal scroll.
		 * @param   {boolean|object}                 [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @param   {boolean}                        [highlight] true to highlight the element when it is in view.
		 * @returns {Ext.dom.CompositeElementLite}               this
		 */
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Scrolls this element the specified scroll point. It does NOT do bounds checking so
		 * if you scroll to a weird value it will try to do it. For auto bounds checking, use [scroll](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#event-scroll).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                       side      Either "left" for scrollLeft values or "top" for scrollTop values.
		 * @param   {number}                       value     The new scroll value
		 * @param   {boolean|object}               [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {Ext.dom.CompositeElementLite}           this
		 */
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.CompositeElementLite;
		/** 
		 * Selects descendant elements of this element based on the passed CSS selector to
		 * enable [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement[]}                                  selector  The CSS selector or an array of elements
		 * @param   {boolean}                                               composite
		 * Return a CompositeElement as opposed to a
		 * CompositeElementLite. Defaults to false.
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}           
		 */
		select? (selector: string | HTMLElement[], composite: boolean): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Selects a single descendant element of this element using a CSS selector
		 * (see [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector The selector query
		 * @param   {boolean}                     [asDom]  `false` to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element} 
		 * The DOM element (or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if
		 * _asDom_ is _false_) which matched the selector.
		 */
		selectNode? (selector: string, asDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Sets the passed attributes as attributes of this element (a `style` attribute
		 * can be a string, object or function).
		 * 
		 * Example component (though any [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) would suffice):
		 * 
		 *    var cmp = Ext.create({
		 *        xtype: 'component',
		 *        html: 'test',
		 *        renderTo: Ext.getBody()
		 *    });
		 * 
		 * Once the component is rendered, you can fetch a reference to its outer
		 * element to use `set`:
		 * 
		 *    cmp.el.set({
		 *        foo: 'bar'
		 *    });
		 * 
		 * This sets an attribute on the element of **foo="bar"**:
		 * 
		 *    &lt;div class="x-component x-component-default x-border-box" id="component-1009" foo="bar"&gt;test&lt;/div&gt;
		 * 
		 * To remove the attribute pass a value of **undefined**:
		 * 
		 *    cmp.el.set({
		 *        foo: undefined
		 *    });
		 * 
		 * **Note:**
		 * 
		 * - You cannot remove an attribute by passing `undefined` when the
		 *   `expandos` param is set to **false**.
		 * - Passing an attribute of `style` results in the request being handed off to
		 *   [applyStyles](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-applyStyles).
		 * - Passing an attribute of `cls` results in the element's dom's
		 *   [className](http://www.w3schools.com/jsref/prop_html_classname.asp) property
		 *   being set directly.  For additional flexibility when setting / removing
		 *   classes see:
		 *   <ul>
		 *   <li>[addCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-addCls)
		 * - [removeCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-removeCls)
		 * - [replaceCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-replaceCls)
		 * - [setCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setCls)
		 * - [toggleCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggleCls)
		 * 
		 * </li>
		 * </ul>
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                       attributes The object with the attributes.
		 * @param   {boolean}                      [useSet]
		 * `false` to override the default `setAttribute`
		 * to use [expandos](http://help.dottoro.com/ljvovanq.php).
		 * @returns {Ext.dom.CompositeElementLite}            this
		 */
		set? (attributes: object, useSet?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's CSS bottom style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                bottom
		 * Number of pixels or CSS string value to set as
		 * the bottom CSS property value
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		setBottom? (bottom: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's box.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                       box The box to fill {x, y, width, height}
		 * @returns {Ext.dom.CompositeElementLite}     this
		 */
		setBox? (box: object): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the specified CSS class on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} className The CSS class to set on this element.
		 * @returns {void}                      
		 */
		setCls? (className: string | string[]): void;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                         name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                                [value] The value to set for the name parameter.
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.CompositeElementLite;
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Sets the CSS display property. Uses originalDisplay if the specified value is a
		 * boolean true.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean|string}               value
		 * Boolean value to display the element using its
		 * default display, or a string to set the display directly.
		 * @returns {Ext.dom.CompositeElementLite}       this
		 */
		setDisplayed? (value: boolean | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                       html The new HTML.
		 * @returns {Ext.dom.CompositeElementLite}      this
		 */
		setHTML? (html: string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                height The new height.
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		setHeight? (height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                       html The new HTML.
		 * @returns {Ext.dom.CompositeElementLite}      this
		 */
		setHtml? (html: string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's left position directly using CSS style
		 * (instead of [setX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setX)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                left
		 * Number of pixels or CSS string value to
		 * set as the left CSS property value
		 * @returns {Ext.dom.CompositeElementLite}      this
		 */
		setLeft? (left: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * An alias for [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).  In
		 * versions prior to 5.1, [listeners](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#cfg-listeners) had a generated setter which could
		 * be called to add listeners.  In 5.1 the listeners config is not processed
		 * using the config system and has no generated setter, so this method is
		 * provided for backward compatibility.  The preferred way of adding listeners
		 * is to use the [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method.
		 * @method
		 * @public (method)
		 * @param   {object} listeners The listeners
		 * @returns {void}             
		 */
		setListeners? (listeners: object): void;
		/** 
		 * Sets the local x coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalX), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       x The x coordinate. A value of `null` sets the left style to 'auto'.
		 * @returns {Ext.dom.CompositeElementLite}   this
		 */
		setLocalX? (x: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the local x and y coordinates of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalXY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|any[]}                 x
		 * The x coordinate or an array containing [x, y]. A value of
		 * `null` sets the left style to 'auto'
		 * @param   {number}                       [y]
		 * The y coordinate, required if x is not an array. A value of
		 * `null` sets the top style to 'auto'
		 * @returns {Ext.dom.CompositeElementLite}     this
		 */
		setLocalXY? (x: number | any[], y?: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the local y coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       y The y coordinate. A value of `null` sets the top style to 'auto'.
		 * @returns {Ext.dom.CompositeElementLite}   this
		 */
		setLocalY? (y: number): Ext.dom.CompositeElementLite;
		/** 
		 * Set the maximum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                height The new maximum height.
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		setMaxHeight? (height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the maximum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                width The new maximum width.
		 * @returns {Ext.dom.CompositeElementLite}       this
		 */
		setMaxWidth? (width: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the minimum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                height The new minimum height.
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		setMinHeight? (height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the minimum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                width The new minimum width.
		 * @returns {Ext.dom.CompositeElementLite}       this
		 */
		setMinWidth? (width: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Set the opacity of the element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
		 * @returns {Ext.dom.CompositeElementLite}         this
		 */
		setOpacity? (opacity: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's CSS right style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                right
		 * Number of pixels or CSS string value to
		 * set as the right CSS property value
		 * @returns {Ext.dom.CompositeElementLite}       this
		 */
		setRight? (right: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the left scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       left The left scroll position
		 * @returns {Ext.dom.CompositeElementLite}      this
		 */
		setScrollLeft? (left: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the top scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       top The top scroll position
		 * @returns {Ext.dom.CompositeElementLite}     this
		 */
		setScrollTop? (top: number): Ext.dom.CompositeElementLite;
		/** 
		 * Set the size of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                width
		 * The new width. This may be one of:
		 * 
		 * - A Number specifying the new width in pixels.
		 * - A String used to set the CSS width style. Animation may **not** be used.
		 * - A size object in the format `{width: widthValue, height: heightValue}`.
		 * @param   {number|string}                height
		 * The new height. This may be one of:
		 * 
		 * - A Number specifying the new height in pixels.
		 * - A String used to set the CSS height style. Animation may **not** be used.
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		setSize? (width: number | string, height: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Wrapper for setting style properties, also takes single object parameter of
		 * multiple styles.
		 * 
		 * Styles should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    // two-param syntax
		 *    el.setStyle('color', 'white');
		 *    
		 *    // single-param syntax
		 *    el.setStyle({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                property
		 * The style property to be set, or an object of
		 * multiple styles.
		 * @param   {string}                       [value]
		 * The value to apply to the given property, or null if
		 * an object was passed.
		 * @returns {Ext.dom.CompositeElementLite}          this
		 */
		setStyle? (property: string | object, value?: string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's top position directly using CSS style
		 * (instead of [setY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setY)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                top
		 * Number of pixels or CSS string value to
		 * set as the top CSS property value
		 * @returns {Ext.dom.CompositeElementLite}     this
		 */
		setTop? (top: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the element's top and left positions directly using CSS style.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		setTopLeft? (): void;
		/** 
		 * Use this to change the visibility mode between [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY),
		 * [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY), [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS), or [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.dom.Element.VISIBILITY|Ext.dom.Element.DISPLAY|Ext.dom.Element.OFFSETS|Ext.dom.Element.CLIP|number} mode
		 * The method by which the element will be [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-hide) (you can
		 * also use the [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible) or [toggle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggle) method to toggle element
		 * visibility).
		 * @returns {Ext.dom.CompositeElementLite}                                                                                this
		 */
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the visibility of the element based on the current visibility mode. Use
		 * [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode) to switch between the following visibility modes:
		 * 
		 * - [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY) (the default)
		 * - [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY)
		 * - [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS)
		 * - [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP)
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean}                      visible Whether the element is visible.
		 * @returns {Ext.dom.CompositeElementLite}         this
		 */
		setVisible? (visible: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Set the width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                width The new width.
		 * @returns {Ext.dom.CompositeElementLite}       this
		 */
		setWidth? (width: number | string): Ext.dom.CompositeElementLite;
		/** 
		 * Sets this Element's page-level x coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       x
		 * @returns {Ext.dom.CompositeElementLite}   this
		 */
		setX? (x: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets this Element's page-level x and y coordinates
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number[]}                     xy
		 * @returns {Ext.dom.CompositeElementLite}    this
		 */
		setXY? (xy: number[]): Ext.dom.CompositeElementLite;
		/** 
		 * Sets this Element's page-level y coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       y
		 * @returns {Ext.dom.CompositeElementLite}   this
		 */
		setY? (y: number): Ext.dom.CompositeElementLite;
		/** 
		 * Sets the z-index of this Element and synchronizes the z-index of shadow and/or
		 * shim if present.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                       zindex The new z-index to set
		 * @returns {Ext.dom.CompositeElementLite}        this
		 */
		setZIndex? (zindex: number): Ext.dom.CompositeElementLite;
		/** 
		 * Show this element - Uses display mode to determine whether to use "display",
		 * "visibility", "offsets", or "clip". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  this
		 */
		show? (): Ext.dom.CompositeElementLite;
		/** 
		 * Gets a range nodes.
		 * @method
		 * @public (method)
		 * @param   {number}        [start] The index of the first node in the range
		 * @param   {number}        [end]   The index of the last node in the range
		 * @returns {HTMLElement[]}         An array of nodes
		 */
		slice? (start?: number, end?: number): HTMLElement[];
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		suspendEvent? (): void;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to suspend.
		 * @returns {void}                
		 */
		suspendEvent? (...eventName: string[]): void;
		/** 
		 * Suspends the firing of all events. (see [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents))
		 * @method
		 * @public (method)
		 * @param   {boolean} queueSuspended
		 * `true` to queue up suspended events to be fired
		 * after the [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) call instead of discarding all suspended events.
		 * @returns {void}                   
		 */
		suspendEvents? (queueSuspended: boolean): void;
		/** 
		 * Toggles the element's visibility, depending on visibility mode.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  this
		 */
		toggle? (): Ext.dom.CompositeElementLite;
		/** 
		 * Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                       className The CSS class to toggle.
		 * @param   {boolean}                      [state]
		 * If specified as `true`, causes the class to be added. If specified as `false`, causes
		 * the class to be removed.
		 * @returns {Ext.dom.CompositeElementLite}           this
		 */
		toggleCls? (className: string, state?: boolean): Ext.dom.CompositeElementLite;
		/** 
		 * Translates the passed page coordinates into left/top css values for the element
		 * @method
		 * @public (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with left and top properties. e.g.
		 * {left: (value), top: (value)}
		 */
		translatePoints? (x: number | any[], y?: number): object;
		/** 
		 * Shorthand for [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		un? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * .
		 * Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 'div.some-class' or 'span:first-child').
		 * This is a shortcut for findParentNode() that always returns an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector    The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element that causes the upward
		 * traversal to stop and is **not** considered for inclusion as the result.
		 * (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnDom] True to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The matching DOM node (or HTMLElement if
		 * _returnDom_ is _true_).  Or null if no match was found.
		 */
		up? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                       html The new HTML.
		 * @returns {Ext.dom.CompositeElementLite}      this
		 */
		update? (html: string): Ext.dom.CompositeElementLite;
		/** 
		 * Creates and wraps this element with another element
		 * @method
		 * @public (method)
		 * @param   {object}                      [config]    DomHelper element config object for the wrapper element or null for an empty div
		 * @param   {boolean}                     [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {string}                      [selector]  A CSS selector to select a descendant node within the created element to use as the wrapping element.
		 * @returns {HTMLElement|Ext.dom.Element}             The newly created wrapper element
		 */
		wrap? (config?: object, returnDom?: boolean, selector?: string): HTMLElement | Ext.dom.Element;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                                config
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}        this
		 */
		initConfig? (config: object): Ext.dom.CompositeElementLite;
		initConfig? (config: object): Ext.Base;
		/** 
		 * Gets the default scope for firing late bound events (string names with
		 * no scope attached) at runtime.
		 * @method
		 * @protected (method)
		 * @param   {object} [defaultScope] The default scope to return if none is found.
		 * @returns {object}                The default event scope
		 */
		resolveListenerScope? (defaultScope?: object): object;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.CompositeElementLite.Statics|Ext.Base.Statics}  
		 */
		statics? (): Ext.dom.CompositeElementLite.Statics;
		statics? (): Ext.Base.Statics;
		/** 
		 * Adds declarative listeners as nested arrays of listener objects.
		 * @method
		 * @private (method)
		 * @param   {any[]}   listeners
		 * @returns {boolean}           `true` if any listeners were added
		 */
		_addDeclaredListeners? (listeners: any[]): boolean;
		/** 
		 * Returns the publisher for a given event
		 * @method
		 * @private (method)
		 * @param   {string}                        eventName
		 * @returns {Ext.event.publisher.Publisher}           
		 */
		_getPublisher? (eventName: string): Ext.event.publisher.Publisher;
		/** 
		 * This method applies a versioned, deprecation declaration to this class. This
		 * is typically called by the `deprecated` config.
		 * @method
		 * @private (method)
		 * @param   {object} deprecations
		 * @returns {void}                
		 */
		addDeprecations? (deprecations: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {object}                       els
		 * @param   {object}                       root
		 * @returns {Ext.dom.CompositeElementLite}      this
		 */
		addElements? (els: object, root: object): Ext.dom.CompositeElementLite;
		/** 
		 * Returns the fractional portion of this element's measurement in the given dimension.
		 * (IE9+ only)
		 * @method
		 * @private (method)
		 * @param   {object} dimension
		 * @returns {number}           
		 */
		adjustDirect2DDimension? (dimension: object): number;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xy
		 * @param   {object} parent
		 * @returns {void}          
		 */
		adjustForConstraints? (xy: object, parent: object): void;
		/** 
		 * Stub implementation called after positioning.
		 * May be implemented in subclasses. Component has an implementation.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		afterSetPosition? (): void;
		/** 
		 * Calculates x,y coordinates specified by the anchor position on the element, adding
		 * extraX and extraY values.
		 * @method
		 * @private (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {number}   [extraX] value to be added to the x coordinate
		 * @param   {number}   [extraY] value to be added to the y coordinate
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		calculateAnchorXY? (anchor?: string, extraX?: number, extraY?: number, size?: object): number[];
		/** 
		 * Calculates the new [x,y] position to move this Positionable into a constrain region.
		 * 
		 * By default, this Positionable is constrained to be within the container it was added to, or the element it was
		 * rendered to.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * An alternative constraint may be passed.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|Ext.util.Region} [constrainTo]
		 * The Element or [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html)
		 * into which this Component is to be constrained. Defaults to the element into which this Positionable
		 * was rendered, or this Component's {@link [Ext.Component.constrainTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#cfg-constrainTo).
		 * @param   {number[]}                                           [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to coerce into constraints instead of using this Positionable's current position.
		 * @param   {boolean}                                            [local]            The proposedPosition is local _(relative to floatParent if a floating Component)_
		 * @param   {number[]}                                           [proposedSize]
		 * A proposed `[width, height]` size to use when calculating
		 * constraints instead of using this Positionable's current size.
		 * @returns {number[]}                                           
		 * **If** the element _needs_ to be translated, the new `[X, Y]` position within
		 * constraints if possible, giving priority to keeping the top and left edge in the constrain region.
		 * Otherwise, `false`.
		 */
		calculateConstrainedPosition? (constrainTo?: string | HTMLElement | Ext.dom.Element | Ext.util.Region, proposedPosition?: number[], local?: boolean, proposedSize?: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} o
		 * @param   {object} fn
		 * @param   {object} scope
		 * @returns {void}         
		 */
		captureArgs? (o: object, fn: object, scope: object): void;
		/** 
		 * Removes the element from the cache and removes listeners.
		 * Used for cleaning up orphaned elements after they have been removed from the dom.
		 * Similar to [destroy](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy) except it assumes the element has already been
		 * removed from the dom.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		collect? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} box
		 * @returns {void}       
		 */
		constrainBox? (box: object): void;
		/** 
		 * Creates an event handling function which re-fires the event from this object as the passed event name.
		 * @method
		 * @private (method)
		 * @param   {string}   newName    The name under which to re-fire the passed parameters.
		 * @param   {any[]}    [beginEnd] The caller can specify on which indices to slice.
		 * @returns {Function}            
		 */
		createRelayer? (newName: string, beginEnd?: any[]): ExtGlobalFunction;
		/** 
		 * Disables the shadow element created by [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShadow? (): void;
		/** 
		 * Disables the shim element created by [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShim? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchContextMenu? (): void;
		/** 
		 * Disables native scrolling of an overflowing element using touch-screen input
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchScroll? (): void;
		/** 
		 * Continue to fire event.
		 * @method
		 * @private (method)
		 * @param   {string}  eventName
		 * @param   {any[]}   args
		 * @param   {boolean} bubbles
		 * @returns {void}              
		 */
		doFireEvent? (eventName: string, args: any[], bubbles: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} element
		 * @returns {void}           
		 */
		doReplaceWith? (element: object): void;
		/** 
		 * A scrollIntoView implementation for scrollIntoView/rtlScrollIntoView to call
		 * after current scrollX has been determined.
		 * @method
		 * @private (method)
		 * @param   {object} container
		 * @param   {object} hscroll
		 * @param   {object} animate
		 * @param   {object} highlight
		 * @param   {object} getScrollX
		 * @param   {object} scrollTo
		 * @returns {void}              
		 */
		doScrollIntoView? (container: object, hscroll: object, animate: object, highlight: object, getScrollX: object, scrollTo: object): void;
		/** 
		 * Enables a shadow element that will always display behind this element
		 * @method
		 * @private (method)
		 * @param   {object|Ext.dom.CompositeElementLite.methodParams.enableShadow.Options} [options] Configuration options for the shadow
		 * @returns {void}                                                                            
		 */
		enableShadow? (options?: object | Ext.dom.CompositeElementLite.methodParams.enableShadow.Options): void;
		/** 
		 * Enables an iframe shim for this element to keep windowed objects from
		 * showing through.  The position, size, and visibility of the shim will be
		 * automatically synchronized as the position, size, and visibility of this
		 * Element are changed.
		 * @method
		 * @private (method)
		 * @param   {object}          [options] Configuration options for the shim
		 * @returns {Ext.dom.Element}           The new shim element
		 */
		enableShim? (options?: object): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates of an element specified by the anchor position on the
		 * element.
		 * @method
		 * @private (method)
		 * @param   {Ext.dom.Element} el       The element
		 * @param   {string}          [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}         [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}          [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}                 [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorToXY? (el: Ext.dom.Element, anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the size of the element's borders and padding.
		 * @method
		 * @private (method)
		 * @returns {object} 
		 * an object with the following numeric properties
		 * 
		 * - beforeX
		 * - afterX
		 * - beforeY
		 * - afterY
		 */
		getBorderPadding? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getBorders? (): void;
		/** 
		 * Gets the bubbling parent for an Observable
		 * @method
		 * @private (method)
		 * @returns {Ext.util.Observable}  The bubble parent. null is returned if no bubble target exists
		 */
		getBubbleParent? (): Ext.util.Observable;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getCurrentConfig? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} el
		 * @returns {void}      
		 */
		getElement? (el: object): void;
		/** 
		 * Gets the x and y coordinates needed for scrolling an element into view within
		 * a given container.  These coordinates translate into the scrollLeft and scrollTop
		 * positions that will need to be set on an ancestor of the element in order to make
		 * this element visible within its container.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.Element} container The container
		 * @param   {number}                         scrollX   The container's current scroll position on the x axis
		 * @param   {number}                         scrollY   The container's current scroll position on the y axis
		 * @returns {object}                                   An object with "x" and "y" properties
		 */
		getScrollIntoViewXY? (container: string | HTMLElement | Ext.Element, scrollX: number, scrollY: number): object;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} config
		 * @returns {void}          
		 */
		hasConfig? (config: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} index
		 * @param   {object} nodes
		 * @returns {void}         
		 */
		insert? (index: object, nodes: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} fn
		 * @param   {object} args
		 * @returns {void}        
		 */
		invoke? (fn: object, args: object): void;
		/** 
		 * Adds a "destroyable" object to an internal list of objects that will be destroyed
		 * when this instance is destroyed (via [`destroy`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-destroy)).
		 * @method
		 * @private (method)
		 * @param   {string} name
		 * @param   {object} value
		 * @returns {object}       The `value` passed.
		 */
		link? (name: string, value: object): object;
		/** 
		 * Mask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		maskIframes? (): void;
		/** 
		 * Prepares a given class for observable instances. This method is called when a
		 * class derives from this class or uses this class as a mixin.
		 * @method
		 * @private (method)
		 * @param   {Function}            T     The class constructor to prepare.
		 * @param   {Ext.util.Observable} mixin The mixin if being used as a mixin.
		 * @param   {object}              data  The raw class creation data if this is an extend.
		 * @returns {void}                      
		 */
		prepareClass? (T: ExtGlobalFunction, mixin: Ext.util.Observable, data: object): void;
		/** 
		 * Remove a single managed listener item
		 * @method
		 * @private (method)
		 * @param   {boolean} isClear         True if this is being called during a clear
		 * @param   {object}  managedListener
		 * The managed listener item
		 * See removeManagedListener for other args
		 * @returns {void}                    
		 */
		removeManagedListenerItem? (isClear: boolean, managedListener: object): void;
		/** 
		 * Converts local coordinates into page-level coordinates
		 * @method
		 * @private (method)
		 * @param   {number[]} xy The local x and y coordinates
		 * @returns {number[]}    The translated coordinates
		 */
		reverseTranslateXY? (xy: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} child
		 * @param   {object} hscroll
		 * @returns {void}           
		 */
		scrollChildIntoView? (child: object, hscroll: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} isVisible
		 * @returns {void}             
		 */
		setVisibility? (isVisible: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {string}  firstClass
		 * @param   {string}  secondClass
		 * @param   {boolean} flag
		 * @param   {string}  prefix
		 * @returns {any}                 
		 */
		swapCls? (firstClass: string, secondClass: string, flag: boolean, prefix: string): any;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		syncUnderlays? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		synchronize? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} el
		 * @returns {void}      
		 */
		transformElement? (el: object): void;
		/** 
		 * Translates the passed page coordinates into x and y css values for the element
		 * @method
		 * @private (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with x and y properties. e.g.
		 * {x: (value), y: (value)}
		 */
		translateXY? (x: number | any[], y?: number): object;
		/** 
		 * Destroys a given set of [`linked`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-link) objects. This is only needed if
		 * the linked object is being destroyed before this instance.
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {string[]}                              names The names of the linked objects to destroy.
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}       this
		 */
		unlink? (names: string[]): Ext.dom.CompositeElementLite;
		unlink? (names: string[]): Ext.Base;
		/** 
		 * Unmask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		unmaskIframes? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  this
		 */
		unwrap? (): Ext.dom.CompositeElementLite;
	}
	/** 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
	 * Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
	 * 
	 * **Note:** The events included in this Class are the ones we've found to be the most commonly used. Many events are
	 * not listed here due to the expedient rate of change across browsers. For a more comprehensive list, please visit the
	 * following resources:
	 * 
	 * - [Mozilla Event Reference Guide](https://developer.mozilla.org/en-US/docs/Web/Events)
	 * - [W3 Pointer Events](http://www.w3.org/TR/pointerevents/)
	 * - [W3 Touch Events](http://www.w3.org/TR/touch-events/)
	 * - [W3 DOM 2 Events](http://www.w3.org/TR/DOM-Level-2-Events/)
	 * - [W3 DOM 3 Events](http://www.w3.org/TR/DOM-Level-3-Events/)
	 * 
	 * ## Usage
	 * 
	 *    // by id
	 *    var el = Ext.get("my-div");
	 *    
	 *    // by DOM element reference
	 *    var el = Ext.get(myDivElement);
	 * 
	 * ## Selecting Descendant Elements
	 * 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances can be used to select descendant nodes using CSS selectors.
	 * There are 3 methods that can be used for this purpose, each with a slightly different
	 * twist:
	 * 
	 * - [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)
	 * - [selectNode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-selectNode)
	 * - [select](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-select)
	 * 
	 * These methods can accept any valid CSS selector since they all use
	 * [querySelectorAll](http://www.w3.org/TR/css3-selectors/) under the hood. The primary
	 * difference between these three methods is their return type:
	 * 
	 * To get an array of HTMLElement instances matching the selector '.foo' use the query
	 * method:
	 * 
	 *    element.query('.foo');
	 * 
	 * This can easily be transformed into an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances by setting
	 * the `asDom` parameter to `false`:
	 * 
	 *    element.query('.foo', false);
	 * 
	 * If the desired result is only the first matching HTMLElement use the selectNode method:
	 * 
	 *    element.selectNode('.foo');
	 * 
	 * Once again, the dom node can be wrapped in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) by setting the `asDom`
	 * parameter to `false`:
	 * 
	 *    element.selectNode('.foo', false);
	 * 
	 * The `select` method is used when the desired return type is a [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) or a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html).  These are collections of elements that can be operated on as a
	 * group using any of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).  The only difference between the two
	 * is that CompositeElementLite is a collection of HTMLElement instances, while
	 * CompositeElement is a collection of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  To retrieve a
	 * CompositeElementLite that represents a collection of HTMLElements for selector '.foo':
	 * 
	 *    element.select('.foo');
	 * 
	 * For a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html) simply pass `true` as the
	 * `composite` parameter:
	 * 
	 *    element.select('.foo', true);
	 * 
	 * The query selection methods can be used even if you don't have a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to
	 * start with For example to select an array of all HTMLElements in the document that match the
	 * selector '.foo', simply wrap the document object in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance using
	 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly):
	 * 
	 *    Ext.fly(document).query('.foo');
	 * 
	 * # Animations
	 * 
	 * When an element is manipulated, by default there is no animation.
	 * 
	 *    var el = Ext.get("my-div");
	 *    
	 *    // no animation
	 *    el.setWidth(100);
	 * 
	 * specified as boolean (true) for default animation effects.
	 * 
	 *    // default animation
	 *    el.setWidth(100, true);
	 * 
	 * To configure the effects, an object literal with animation options to use as the Element animation configuration
	 * object can also be specified. Note that the supported Element animation configuration options are a subset of the
	 * [Ext.fx.Anim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.fx.Anim.html) animation options specific to Fx effects. The supported Element animation configuration options
	 * are:
	 * 
	 *    Option    Default   Description
	 *    --------- --------  ---------------------------------------------
	 *    duration  350       The duration of the animation in milliseconds
	 *    easing    easeOut   The easing method
	 *    callback  none      A function to execute when the anim completes
	 *    scope     this      The scope (this) of the callback function
	 * 
	 * Usage:
	 * 
	 *    // Element animation options object
	 *    var opt = {
	 *        duration: 1000,
	 *        easing: 'elasticIn',
	 *        callback: this.foo,
	 *        scope: this
	 *    };
	 *    // animation with some options set
	 *    el.setWidth(100, opt);
	 * 
	 * The Element animation object being used for the animation will be set on the options object as "anim", which allows
	 * you to stop or manipulate the animation. Here is an example:
	 * 
	 *    // using the "anim" property to get the Anim object
	 *    if(opt.anim.isAnimated()){
	 *        opt.anim.stop();
	 *    }
	 * 
	 */
	class Element extends Ext.Base {
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS `clip` property to reduce element's dimensions to 0px by 0px, effectively
		 * making it hidden while not being truly invisible. This is useful when an element
		 * needs to be published to the Assistive Technologies such as screen readers.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 4
		 * @type {number}
		 */
		static readonly CLIP?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'display' property to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 2
		 * @type {number}
		 */
		static readonly DISPLAY?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS absolute positioning and top/left offsets to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 3
		 * @type {number}
		 */
		static readonly OFFSETS?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'visibility' property to hide the element.
		 * 
		 * Note that in this mode, [isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible) may return true
		 * for an element even though it actually has a parent element that is hidden. For this
		 * reason, and in most cases, using the [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS) mode is a better choice.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 1
		 * @type {number}
		 */
		static readonly VISIBILITY?: number;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @type {object}
		 */
		static cache?: object;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @default 'input,textarea,[contenteditable="true"]'
		 * @type {string}
		 */
		static editableSelector?: string;
		/** 
		 * This property indicates a minimum threshold of vertical resize movement for
		 * virtual keyboard detection.
		 * 
		 * On some mobile browsers the framework needs to keep track of whether window
		 * resize events were triggered by the opening or closing of a virtual keyboard
		 * so that it can prevent unnecessary re-layout of the viewport.  It does this
		 * by detecting resize events in the horizontal direction that occur immediately
		 * after an editable element is focused or blurred.
		 * @property
		 * @private (property)
		 * @static
		 * @default 100
		 * @type {number}
		 */
		static minKeyboardHeight?: number;
		/** 
		 * True to globally disable the delegated event system.  The results of
		 * setting this to false are unpredictable since the Gesture publisher relies
		 * on delegated events in order to work correctly.  Disabling delegated events
		 * may cause Gestures to function incorrectly or to stop working completely.
		 * Use at your own risk!
		 * @property
		 * @private (property)
		 * @static
		 * @default true
		 * @type {boolean}
		 */
		static useDelegatedEvents?: boolean;
		/** 
		 * The list of valid nodeTypes that are allowed to be wrapped
		 * @property
		 * @private (property)
		 * @static
		 * @default {1: 1, 9: 1}
		 * @type {object}
		 */
		static validNodeTypes?: object;
		/** 
		 * A reference to the `Component` that owns this element. This is `null` if there
		 * is no direct owner.
		 * @property
		 * @public (property)
		 * @type {Ext.Component}
		 */
		component?: Ext.Component;
		/** 
		 * The DOM element
		 * @property
		 * @public (property)
		 * @type {HTMLElement}
		 */
		dom?: HTMLElement;
		/** 
		 * This object holds a key for any event that has a listener. The listener may be set
		 * directly on the instance, or on its class or a super class (via [observe](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#static-method-observe)) or
		 * on the [MVC EventBus](https://docs.sencha.com/extjs/6.0.1/classic/Ext.app.EventBus.html). The values of this object are truthy
		 * (a non-zero number) and falsy (0 or undefined). They do not represent an exact count
		 * of listeners. The value for an event is truthy if the event must be fired and is
		 * falsy if there is no need to fire the event.
		 * 
		 * The intended use of this property is to avoid the expense of fireEvent calls when
		 * there are no listeners. This can be particularly helpful when one would otherwise
		 * have to call fireEvent hundreds or thousands of times. It is used like this:
		 * 
		 *     if (this.hasListeners.foo) {
		 *         this.fireEvent('foo', this, arg1);
		 *     }
		 * 
		 * @property
		 * @public (property)
		 * @readonly
		 * @type {object}
		 */
		readonly hasListeners?: object;
		/** 
		 * The DOM element ID
		 * @property
		 * @public (property)
		 * @type {string}
		 */
		id?: string;
		/** 
		 * `true` in this class to identify an object as an instantiated Observable, or subclass thereof.
		 * @property
		 * @public (property)
		 * @default true
		 * @type {boolean}
		 */
		isObservable?: boolean;
		/** 
		 * Get the reference to the current class from which this object was instantiated. Unlike [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics),
		 * `this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics)
		 * for a detailed comparison
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            alert(this.self.speciesName); // dependent on 'this'
		 *        },
		 *    
		 *        clone: function() {
		 *            return new this.self();
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *        statics: {
		 *            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                     // alerts 'Cat'
		 *    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'
		 * 
		 * @property
		 * @protected (property)
		 * @default Ext.Base
		 * @type {Ext.dom.Element.Statics}
		 */
		self?: Ext.dom.Element.Statics | Ext.Base.Statics;
		/** 
		 * Matches options property names within a listeners specification object  - property names which are never used as event names.
		 * @property
		 * @private (property)
		 * @default {scope: 1, delay: 1, buffer: 1, onFrame: 1, single: 1, args: 1, destroyable: 1, priority: 1, order: 1}
		 * @type {object}
		 */
		$eventOptions?: object;
		/** 
		 * @property
		 * @private (property)
		 * @default /^([a-z]+)-([a-z]+)([?!])?$/
		 * @type {RegExp}
		 */
		_alignRe?: RegExp;
		/** 
		 * @property
		 * @private (property)
		 * @default ['position', 'top', 'left']
		 * @type {any[]}
		 */
		_positionTopLeft?: any[];
		/** 
		 * By default this method does nothing but return the position spec passed to it. In
		 * rtl mode it is overridden to convert "l" to "r" and vice versa when required.
		 * @property
		 * @private (property)
		 * @type {object}
		 */
		convertPositionSpec?: object;
		/** 
		 * Initial suspended call count. Incremented when [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents) is called, decremented when [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) is called.
		 * @property
		 * @private (property)
		 * @default 0
		 * @type {number}
		 */
		eventsSuspended?: number;
		/** 
		 * Returns the `X,Y` position of this element without regard to any RTL
		 * direction settings.
		 * @property
		 * @private (property)
		 * @type {object}
		 */
		getTrueXY?: object;
		/** 
		 * @property
		 * @private (property)
		 * @default 'positionable'
		 * @type {string}
		 */
		mixinId?: string;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                   members    The members to add to this class.
		 * @param   {boolean}                  [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                  [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Element|Ext.Base}            
		 */
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                   members
		 * @returns {Ext.dom.Element|Ext.Base}         this
		 */
		static addStatics? (members: object): typeof Ext.dom.Element;
		static addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		static createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		static fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		static fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		static get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		static getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		static getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		static getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		static getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		static getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		static getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		static getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		static getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		static getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		static normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		static override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		static parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		static parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		static query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		static select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		static serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		static unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		static create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		static create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		static _onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static _onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		static addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                   members
		 * @returns {Ext.dom.Element|Ext.Base}         
		 */
		static addInheritableStatics? (members: object): typeof Ext.dom.Element;
		static addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                   name
		 * @param   {object}                   member
		 * @returns {Ext.dom.Element|Ext.Base}        
		 */
		static addMember? (name: object, member: object): typeof Ext.dom.Element;
		static addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		static addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		static borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.Element}  
		 */
		static detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		static extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		static getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		static mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                   fn
		 * @param   {object}                   scope
		 * @returns {Ext.dom.Element|Ext.Base}       
		 */
		static onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		static onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static triggerExtended? (): void;
		/** 
		 * Alias for [onAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addAfterListener? (): void;
		/** 
		 * Alias for [onBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addBeforeListener? (): void;
		/** 
		 * Adds the given CSS class(es) to this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]} names
		 * The CSS classes to add separated by space,
		 * or an array of classes
		 * @param   {string}          [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}          [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * @returns {Ext.dom.Element}          this
		 */
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.Element;
		/** 
		 * The [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method is shorthand for
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * 
		 * Appends an event handler to this object.  For example:
		 * 
		 *    myGridPanel.on("itemclick", this.onItemClick, this);
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple events. For example:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: this.onCellClick,
		 *        select: this.onSelect,
		 *        viewready: this.onViewReady,
		 *        scope: this // Important. Ensure "this" is correct during handler execution
		 *    });
		 * 
		 * One can also specify options for each event handler separately:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: this.onCellClick, scope: this, single: true},
		 *        viewready: {fn: panel.onViewReady, scope: panel}
		 *    });
		 * 
		 * _Names_ of methods in a specified scope may also be used:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: 'onCellClick', scope: this, single: true},
		 *        viewready: {fn: 'onViewReady', scope: panel}
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|object}                                           eventName
		 * The name of the event to listen for.
		 * May also be an object who's property names are event names.
		 * @param   {Function|string}                                         [fn]
		 * The method the event invokes or the _name_ of
		 * the method within the specified `scope`.  Will be called with arguments
		 * given to [Ext.util.Observable.fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) plus the `options` parameter described
		 * below.
		 * @param   {object}                                                  [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object|Ext.dom.Element.methodParams.addListener.Options} [options]
		 * An object containing handler configuration.
		 * 
		 * **Note:** The options object will also be passed as the last argument to every
		 * event handler.
		 * 
		 * This object may contain any of the following properties:
		 * @param   {string}                                                  [order]
		 * A shortcut for the `order` event option.  Provided for backward compatibility.
		 *   Please use the `priority` event option instead.
		 * 
		 * **Combining Options**
		 * 
		 * Using the options argument, it is possible to combine different types of listeners:
		 * 
		 * A delayed, one-time listener.
		 * 
		 *    myPanel.on('hide', this.handleClick, this, {
		 *        single: true,
		 *        delay: 100
		 *    });
		 * 
		 * **Attaching multiple handlers in 1 call**
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple handlers and handler configs.
		 * 
		 *    grid.on({
		 *        itemclick: 'onItemClick',
		 *        itemcontextmenu: grid.onItemContextmenu,
		 *        destroy: {
		 *            fn: function () {
		 *                // function called within the 'altCmp' scope instead of grid
		 *            },
		 *            scope: altCmp // unique scope for the destroy handler
		 *        },
		 *        scope: grid       // default scope - provided for example clarity
		 *    });
		 * 
		 * **Delegate**
		 * 
		 * This is a configuration option that you can pass along when registering a handler for
		 * an event to assist with event delegation. By setting this configuration option
		 * to a simple selector, the target element will be filtered to look for a
		 * descendant of the target. For example:
		 * 
		 *    var panel = Ext.create({
		 *        xtype: 'panel',
		 *        renderTo: document.body,
		 *        title: 'Delegate Handler Example',
		 *        frame: true,
		 *        height: 220,
		 *        width: 220,
		 *        html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content'
		 *    });
		 *    
		 *    // The click handler will only be called when the click occurs on the
		 *    // delegate: h1.myTitle ("h1" tag with class "myTitle")
		 *    panel.on({
		 *        click: function (e) {
		 *            console.log(e.getTarget().innerHTML);
		 *        },
		 *        element: 'body',
		 *        delegate: 'h1.myTitle'
		 *     });
		 * 
		 * @returns {object}                                                  
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes
		 *  all listeners added in this call. For example:
		 * 
		 *    this.btnListeners =  = myButton.on({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addListener? (eventName: string | object, fn?: ExtGlobalFunction | string, scope?: object, options?: object | Ext.dom.Element.methodParams.addListener.Options, order?: string): object;
		/** 
		 * The addManagedListener method is used when some object (call it "A") is listening
		 * to an event on another observable object ("B") and you want to remove that listener
		 * from "B" when "A" is destroyed. This is not an issue when "B" is destroyed because
		 * all of its listeners will be removed at that time.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Foo', {
		 *        extend: 'Ext.Component',
		 *    
		 *        initComponent: function () {
		 *            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);
		 *            this.callParent();
		 *        }
		 *    });
		 * 
		 * As you can see, when an instance of Foo is destroyed, it ensures that the 'show'
		 * listener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.
		 * 
		 * As of version 5.1 it is no longer necessary to use this method in most cases because
		 * listeners are automatically managed if the scope object provided to
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) is an Observable instance.
		 * However, if the observable instance and scope are not the same object you
		 * still need to use `mon` or `addManagedListener` if you want the listener to be
		 * managed.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Aligns the element with another element relative to the specified anchor points. If
		 * the other element is the document it aligns it to the viewport. The position
		 * parameter is optional, and can be specified in any one of the following formats:
		 * 
		 * - **Blank**: Defaults to aligning the element's top-left corner to the target's
		 *   bottom-left corner ("tl-bl").
		 * - **One anchor (deprecated)**: The passed anchor position is used as the target
		 *   element's anchor point.  The element being aligned will position its top-left
		 *   corner (tl) to that point. _This method has been deprecated in favor of the newer
		 *   two anchor syntax below_.
		 * - **Two anchors**: If two values from the table below are passed separated by a dash,
		 *   the first value is used as the element's anchor point, and the second value is
		 *   used as the target's anchor point.
		 * 
		 * In addition to the anchor points, the position parameter also supports the "?"
		 * character. If "?" is passed at the end of the position string, the element will
		 * attempt to align as specified, but the position will be adjusted to constrain to
		 * the viewport if necessary. Note that the element being aligned might be swapped to
		 * align to a different position than that specified in order to enforce the viewport
		 * constraints. Following are all of the supported anchor positions:
		 * 
		 *    Value  Description
		 *    -----  -----------------------------
		 *    tl     The top left corner (default)
		 *    t      The center of the top edge
		 *    tr     The top right corner
		 *    l      The center of the left edge
		 *    c      In the center of the element
		 *    r      The center of the right edge
		 *    bl     The bottom left corner
		 *    b      The center of the bottom edge
		 *    br     The bottom right corner
		 * 
		 * Example Usage:
		 * 
		 *    // align el to other-el using the default positioning
		 *    // ("tl-bl", non-constrained)
		 *    el.alignTo("other-el");
		 *    
		 *    // align the top left corner of el with the top right corner of other-el
		 *    // (constrained to viewport)
		 *    el.alignTo("other-el", "tr?");
		 *    
		 *    // align the bottom right corner of el with the center left edge of other-el
		 *    el.alignTo("other-el", "br-l?");
		 *    
		 *    // align the center of el with the bottom left corner of other-el and
		 *    // adjust the x position by -6 pixels (and the y position by 0)
		 *    el.alignTo("other-el", "c-bl", [-6, 0]);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]
		 * Offset the positioning by [x, y]
		 * Element animation config object
		 * @returns {Ext.dom.Element}                                     this
		 */
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.Element;
		/** 
		 * Appends the passed element(s) to this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).
		 */
		appendChild? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends this element to the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The new parent element.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                       This element.
		 */
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * More flexible version of [setStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setStyle) for setting style properties.
		 * 
		 * Styles in object form should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    el.applyStyles('color: white;');
		 *    
		 *    el.applyStyles({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 *    
		 *    el.applyStyles(function () {
		 *        if (name.initialConfig.html === 'Phineas Flynn') {
		 *            return 'font-style: italic;';
		 *            // OR return { fontStyle: 'italic' };
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string|object} styles
		 * A style specification string, e.g. "width:100px", or object in the form `{width:"100px"}`, or
		 * a function which returns such a specification.
		 * @returns {Ext.dom.Element}               this
		 */
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.Element;
		/** 
		 * Tries to blur the element. Any exceptions are caught and ignored.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Element}  this
		 */
		blur? (): Ext.dom.Element;
		/** 
		 * When an element is moved around in the DOM, or is hidden using `display:none`, it loses layout, and therefore
		 * all scroll positions of all descendant elements are lost.
		 * 
		 * This function caches them, and returns a function, which when run will restore the cached positions.
		 * In the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:
		 * 
		 *    var restoreScroll = myPanel.el.cacheScrollValues();
		 *    myOtherContainer.add(myPanel);
		 *    restoreScroll();
		 * 
		 * @method
		 * @public (method)
		 * @returns {Function} 
		 * A function which will restore all descendant elements of this Element to their scroll
		 * positions recorded when this function was executed. Be aware that the returned function is a closure which has
		 * captured the scope of `cacheScrollValues`, so take care to dereference it as soon as not needed - if is it is a `var`
		 * it will drop out of scope, and the reference will be freed.
		 */
		cacheScrollValues? (): ExtGlobalFunction;
		/** 
		 * Centers the Element in either the viewport, or another Element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} centerIn
		 * element in
		 * which to center the element.
		 * @returns {Ext.dom.Element}                             This element
		 */
		center? (centerIn: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Selects a single _direct_ child based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		child? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearListeners? (): void;
		/** 
		 * Removes all managed listeners for this object.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearManagedListeners? (): void;
		/** 
		 * Clone this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                     [deep]      `true` if the children of the node should also be cloned.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The newly cloned [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`).
		 */
		clone? (deep?: boolean, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element, or is
		 * the element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} element
		 * The dom element,
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or id (string) of the dom element to check.
		 * @returns {boolean}                                    True if this element is an ancestor of el or the el itself, else false
		 */
		contains? (element: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Creates the passed DomHelper config and appends it to this element or optionally
		 * inserts it before the passed child element.
		 * @method
		 * @public (method)
		 * @param   {object}                      config
		 * DomHelper element config object.  If no tag is specified
		 * (e.g., {tag:'input'}) then a div will be automatically generated with the specified
		 * attributes.
		 * @param   {HTMLElement}                 [insertBefore] a child element of this element
		 * @param   {boolean}                     [returnDom]
		 * true to return the dom node instead of creating
		 * an Element
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_)
		 */
		createChild? (config: object, insertBefore?: HTMLElement, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Translates an element using CSS 3 in 2D.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		cssTranslate? (): void;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		down? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if
		 * present. There is no implementation in the Observable base class.
		 * 
		 * This is commonly used by Ext.Components to bubble events to owner Containers.
		 * See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget). The default implementation in [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) returns the
		 * Component's immediate owner. But if a known target is required, this can be overridden to access the
		 * required target more quickly.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Ext.overrides.form.field.Base', {
		 *        override: 'Ext.form.field.Base',
		 *    
		 *        //  Add functionality to Field's initComponent to enable the change event to bubble
		 *        initComponent: function () {
		 *            this.callParent();
		 *            this.enableBubble('change');
		 *        }
		 *    });
		 *    
		 *    var myForm = Ext.create('Ext.form.Panel', {
		 *        title: 'User Details',
		 *        items: [{
		 *            ...
		 *        }],
		 *        listeners: {
		 *            change: function() {
		 *                // Title goes red if form has been modified.
		 *                myForm.header.setStyle('color', 'red');
		 *            }
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|string[]} eventNames The event name to bubble, or an Array of event names.
		 * @returns {void}                       
		 */
		enableBubble? (eventNames: string | string[]): void;
		/** 
		 * Looks at this node and then at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParent? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Looks at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParentNode? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * By default, the action function will be executed after any "before" event handlers
		 * (as specified using the `order` option of
		 * [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)), but before any other
		 * handlers are fired.  This gives the "before" handlers an opportunity to
		 * cancel the event by returning `false`, and prevent the action function from
		 * being called.
		 * 
		 * The action can also be configured to run after normal handlers, but before any "after"
		 * handlers (as specified using the `order` event option) by passing `'after'`
		 * as the `order` parameter.  This configuration gives any event handlers except
		 * for "after" handlers the opportunity to cancel the event and prevent the action
		 * function from being called.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {any[]}    args      Arguments to pass to handlers and to the action function.
		 * @param   {Function} fn        The action function.
		 * @param   {object}   [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object}   [options]
		 * Event options for the action function.  Accepts any
		 * of the options of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * @param   {string}   [order]
		 * The order to call the action function relative
		 * too the event handlers (`'before'` or `'after'`).  Note that this option is
		 * simply used to sort the action function relative to the event handlers by "priority".
		 * An order of `'before'` is equivalent to a priority of `99.5`, while an order of
		 * `'after'` is equivalent to a priority of `-99.5`.  See the `priority` option
		 * of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) for more details.
		 * @returns {void}               
		 */
		fireAction? (eventName: string, args: any[], fn: ExtGlobalFunction, scope?: object, options?: object, order?: string): void;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to fire.
		 * @returns {boolean}           returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string): boolean;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}    eventName The name of the event to fire.
		 * @param   {...object} args      Variable number of parameters are passed to handlers.
		 * @returns {boolean}             returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string, ...args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameter list.
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {object[]} args      An array of parameters which are passed to handlers.
		 * @returns {boolean}            returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEventArgs? (eventName: string, args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * Evented Actions will automatically dispatch a 'before' event passing. This event will
		 * be given a special controller that allows for pausing/resuming of the event flow.
		 * 
		 * By pausing the controller the updater and events will not run until resumed. Pausing,
		 * however, will not stop the processing of any other before events.
		 * @method
		 * @public (method)
		 * @param   {string}          eventName The name of the event to fire.
		 * @param   {any[]}           args      Arguments to pass to handlers and to the action function.
		 * @param   {Function|string} fn        The action function.
		 * @param   {object}          [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {any[]|boolean}   [fnArgs]
		 * Optional arguments for the action `fn`. If not
		 * given, the normal `args` will be used to call `fn`. If `false` is passed, the
		 * `args` are used but if the first argument is this instance it will be removed
		 * from the args passed to the action function.
		 * @returns {void}                      
		 */
		fireEventedAction? (eventName: string, args: any[], fn: ExtGlobalFunction | string, scope?: object, fnArgs?: any[] | boolean): void;
		/** 
		 * Gets the first child, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}             The first child or null
		 */
		first? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Try to focus the element either immediately or after a timeout
		 * if `defer` argument is specified.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          [defer] Milliseconds to defer the focus
		 * @returns {Ext.dom.Element}         this
		 */
		focus? (defer?: number): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates to align this element with another element. See
		 * [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for more info on the supported position values.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]  Offset the positioning by [x, y]
		 * @returns {number[]}                                            [x, y]
		 */
		getAlignToXY? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): number[];
		/** 
		 * Gets the x,y coordinates specified by the anchor position on the element.
		 * @method
		 * @public (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}  [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorXY? (anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the value of an attribute from the element's underlying DOM node.
		 * @method
		 * @public (method)
		 * @param   {string} name        The attribute name.
		 * @param   {string} [namespace] The namespace in which to look for the attribute.
		 * @returns {string}             The attribute value.
		 */
		getAttribute? (name: string, namespace?: string): string;
		/** 
		 * Returns an object containing a map of all attributes of this element's DOM node.
		 * @method
		 * @public (method)
		 * @returns {object}  Key/value pairs of attribute names and their values.
		 */
		getAttributes? (): object;
		/** 
		 * Gets the width of the border(s) for the specified side(s)
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the border **l**eft
		 * width + the border **r**ight width.
		 * @returns {number}      The width of the sides passed added together
		 */
		getBorderWidth? (side: string): number;
		/** 
		 * Gets the bottom Y coordinate of the element (element Y position + element height)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinate
		 * @returns {number}        
		 */
		getBottom? (local: boolean): number;
		/** 
		 * Return an object defining the area of this Element which can be passed to
		 * [setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentBox]
		 * If true a box for the content of the element is
		 * returned.
		 * @param   {boolean} [local]
		 * If true the element's left and top relative to its
		 * `offsetParent` are returned instead of page x/y.
		 * @returns {object}               An object in the format
		 */
		getBox? (contentBox?: boolean, local?: boolean): object;
		/** 
		 * Returns a child element of this element given its `id`.
		 * @method
		 * @public (method)
		 * @param   {string}                      id      The id of the desired child element.
		 * @param   {boolean}                     [asDom]
		 * True to return the DOM element, false to return a
		 * wrapped Element object.
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The child element (or HTMLElement if
		 * _asDom_ is _true_).  Or null if no match was found.
		 */
		getById? (id: string, asDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns a region object that defines the client area of this element.
		 * 
		 * That is, the area _within_ any scrollbars.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getClientRegion? (): Ext.util.Region;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the content region of this element for purposes of constraining floating
		 * children.  That is the region within the borders and scrollbars, but not within the padding.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getConstrainRegion? (): void;
		/** 
		 * Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best
		 * attempt to constrain within the passed constraint. Returns `false` if the element
		 * does not need to be moved.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * The constraint may either be an existing element into which the element is to be
		 * constrained, or a [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) into which this element is to be
		 * constrained.
		 * 
		 * By default, any extra shadow around the element is **not** included in the constrain calculations - the edges
		 * of the element are used as the element bounds. To constrain the shadow within the constrain region, set the
		 * `constrainShadow` property on this element to `true`.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string|Ext.util.Region} [constrainTo]
		 * The
		 * Positionable, HTMLElement, element id, or Region into which the element is to be
		 * constrained.
		 * @param   {number[]}                                                 [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to produce a vector for instead of using the element's current position
		 * @param   {number[]}                                                 [proposedSize]
		 * A proposed `[width, height]` size to constrain
		 * instead of using the element's current size
		 * @returns {number[]|boolean}                                         
		 * **If** the element _needs_ to be translated, an `[X, Y]`
		 * vector by which this element must be translated. Otherwise, `false`.
		 */
		getConstrainVector? (constrainTo?: Ext.util.Positionable | HTMLElement | string | Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]): number[] | boolean;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHTML? (): string;
		/** 
		 * Returns the offset height of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentHeight] `true` to get the height minus borders and padding.
		 * @returns {number}                  The element's height.
		 */
		getHeight? (contentHeight?: boolean): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHtml? (): string;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Gets the left X coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of
		 * page coordinate
		 * @returns {number}        
		 */
		getLeft? (local: boolean): number;
		/** 
		 * Returns the x coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local x coordinate
		 */
		getLocalX? (): number;
		/** 
		 * Returns the x and y coordinates of this element relative to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number[]}  The local XY position of the element
		 */
		getLocalXY? (): number[];
		/** 
		 * Returns the y coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local y coordinate
		 */
		getLocalY? (): number;
		/** 
		 * Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
		 * then it returns the calculated width of the sides (see [getPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-getPadding)).
		 * @method
		 * @public (method)
		 * @param   {string}        [sides] Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		 * @returns {object|number}         
		 */
		getMargin? (sides?: string): object | number;
		/** 
		 * Returns the offsets of this element from the passed element. The element must both
		 * be part of the DOM tree and not have display:none to have page coordinates.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} offsetsTo
		 * The Positionable,
		 * HTMLElement, or element id to get get the offsets from.
		 * @returns {number[]}                                           The XY page offsets (e.g. `[100, -200]`)
		 */
		getOffsetsTo? (offsetsTo: Ext.util.Positionable | HTMLElement | string): number[];
		/** 
		 * Retrieves the height of the element account for the top and bottom margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterHeight? (): void;
		/** 
		 * Retrieves the width of the element accounting for the left and right margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterWidth? (): void;
		/** 
		 * Gets the width of the padding(s) for the specified side(s).
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the padding **l**eft +
		 * the padding **r**ight.
		 * @returns {number}      The padding of the sides passed added together.
		 */
		getPadding? (side: string): number;
		/** 
		 * Returns an object defining the area of this Element which can be passed to
		 * [Ext.util.Positionable.setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                [asRegion] If true an [Ext.util.Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) will be returned
		 * @returns {object|Ext.util.Region} 
		 * box An object in the following format:
		 * 
		 *    {
		 *        left: &lt;Element's X position&gt;,
		 *        top: &lt;Element's Y position&gt;,
		 *        width: &lt;Element's width&gt;,
		 *        height: &lt;Element's height&gt;,
		 *        bottom: &lt;Element's lower bound&gt;,
		 *        right: &lt;Element's rightmost bound&gt;
		 *    }
		 * 
		 * The returned object may also be addressed as an Array where index 0 contains
		 * the X position and index 1 contains the Y position. So the result may also be
		 * used for [setXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setXY)
		 */
		getPageBox? (asRegion?: boolean): object | Ext.util.Region;
		/** 
		 * Returns a region object that defines the area of this element.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getRegion? (): Ext.util.Region;
		/** 
		 * Gets the right X coordinate of the element (element X position + element width)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getRight? (local: boolean): number;
		/** 
		 * Returns the current scroll position of the element.
		 * @method
		 * @public (method)
		 * @returns {object} 
		 * An object containing the scroll position in the format
		 * `{left: (scrollLeft), top: (scrollTop)}`
		 */
		getScroll? (): object;
		/** 
		 * Gets the left scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The left scroll position
		 */
		getScrollLeft? (): number;
		/** 
		 * Gets the Scroller instance of the first parent that has one.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getScrollParent? (): void;
		/** 
		 * Gets the top scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The top scroll position
		 */
		getScrollTop? (): number;
		/** 
		 * Returns the size of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentSize] `true` to get the width/size minus borders and padding.
		 * @returns {object}                An object containing the element's size:
		 */
		getSize? (contentSize?: boolean): object;
		/** 
		 * Returns a named style property based on computed/currentStyle (primary) and
		 * inline-style if primary is not available.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} property
		 * The style property (or multiple property names
		 * in an array) whose value is returned.
		 * @param   {boolean}         [inline] if `true` only inline styles will be returned.
		 * @returns {string|object}   
		 * The current value of the style property for this element
		 * (or a hash of named style values if multiple property arguments are requested).
		 */
		getStyle? (property: string | string[], inline?: boolean): string | object;
		/** 
		 * Returns the width in pixels of the passed text, or the width of the text in this Element.
		 * @method
		 * @public (method)
		 * @param   {string} text  The text to measure. Defaults to the innerHTML of the element.
		 * @param   {number} [min] The minumum value to return.
		 * @param   {number} [max] The maximum value to return.
		 * @returns {number}       The text width in pixels.
		 */
		getTextWidth? (text: string, min?: number, max?: number): number;
		/** 
		 * Gets the top Y coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getTop? (local: boolean): number;
		/** 
		 * Returns the value of the `value` attribute.
		 * @method
		 * @public (method)
		 * @param   {boolean}       asNumber `true` to parse the value as a number.
		 * @returns {string|number}          
		 */
		getValue? (asNumber: boolean): string | number;
		/** 
		 * Returns the **content** region of this element. That is the region within the borders
		 * and padding.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" member data.
		 */
		getViewRegion? (): Ext.util.Region;
		/** 
		 * Returns the dimensions of the element available to lay content out in.  For
		 * most elements this is the clientHeight/clientWidth.  If the element is
		 * the document/document.body the window's innerHeight/innerWidth is returned
		 * 
		 * If the element (or any ancestor element) has CSS style `display: none`, the
		 * dimensions will be zero.
		 * @method
		 * @public (method)
		 * @returns {object}  Object describing width and height.
		 */
		getViewSize? (): object;
		/** 
		 * Returns the offset width of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentWidth] `true` to get the width minus borders and padding.
		 * @returns {number}                 The element's width.
		 */
		getWidth? (contentWidth?: boolean): number;
		/** 
		 * Gets element X position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getX? (): number;
		/** 
		 * Gets element X and Y positions in page coordinates
		 * @method
		 * @public (method)
		 * @returns {any[]}  [x, y]
		 */
		getXY? (): any[];
		/** 
		 * Gets element Y position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getY? (): number;
		/** 
		 * Returns this element's z-index
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getZIndex? (): number;
		/** 
		 * Checks if the specified CSS class exists on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string}  name The CSS class to check for.
		 * @returns {boolean}      `true` if the class exists, else `false`.
		 */
		hasCls? (name: string): boolean;
		/** 
		 * Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
		 * indicates whether the event needs firing or not.
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to check for
		 * @returns {boolean}           `true` if the event is being listened for or bubbles, else `false`
		 */
		hasListener? (eventName: string): boolean;
		/** 
		 * Hide this element - Uses display mode to determine whether to use "display",
		 * "visibility", or "offsets". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Element}  this
		 */
		hide? (): Ext.dom.Element;
		/** 
		 * Inserts this element after the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to insert after.
		 * The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                       This element.
		 */
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Inserts this element before the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element before which this element will be inserted.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                       This element.
		 */
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Inserts (or creates) an element as the first child of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config to create and insert
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_).
		 */
		insertFirst? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Inserts an html fragment into this element
		 * @method
		 * @public (method)
		 * @param   {string}                      where
		 * Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
		 * See [Ext.dom.Helper.insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml) for details.
		 * @param   {string}                      html       The HTML fragment
		 * @param   {boolean}                     [returnEl] True to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}            The inserted node (or nearest related if more than 1 inserted)
		 */
		insertHtml? (where: string, html: string, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object|any[]} el
		 * The id, element to insert or a DomHelper config
		 * to create and insert _or_ an array of any of those.
		 * @param   {string}                                          [where]     'before' or 'after'
		 * @param   {boolean}                                         [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}                     
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_). If an array is passed, the last
		 * inserted element is returned.
		 */
		insertSibling? (el: string | HTMLElement | Ext.dom.Element | object | any[], where?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns `true` if this element matches the passed simple selector
		 * (e.g. 'div.some-class' or 'span:first-child').
		 * @method
		 * @public (method)
		 * @param   {Function|string} selector
		 * The simple selector to test or a function which is passed
		 * candidate nodes, and should return `true` for nodes which match.
		 * @returns {boolean}                  `true` if this element matches the selector, else `false`.
		 */
		is? (selector: ExtGlobalFunction | string): boolean;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element or id of the element
		 * to search for in this elements descendants.
		 * @returns {boolean}                               
		 */
		isAncestor? (el: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Determines if this element is a descendant of the passed in Element.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		isDescendent? (): void;
		/** 
		 * Returns true if this element is scrollable.
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		isScrollable? (): boolean;
		/** 
		 * Checks if the current value of a style is equal to a given value.
		 * @method
		 * @public (method)
		 * @param   {string}  style property whose value is returned.
		 * @param   {string}  value to check against.
		 * @returns {boolean}       `true` for when the current value equals the given value.
		 */
		isStyle? (style: string, value: string): boolean;
		/** 
		 * Checks if all events, or a specific event, is suspended.
		 * @method
		 * @public (method)
		 * @param   {string}  [event] The name of the specific event to check
		 * @returns {boolean}         `true` if events are suspended
		 */
		isSuspended? (event?: string): boolean;
		/** 
		 * Returns `true` if the value of the given property is visually transparent. This
		 * may be due to a 'transparent' style value or an rgba value with 0 in the alpha
		 * component.
		 * @method
		 * @public (method)
		 * @param   {string}  prop The style property whose value is to be tested.
		 * @returns {boolean}      `true` if the style property is visually transparent.
		 */
		isTransparent? (prop: string): boolean;
		/** 
		 * Checks whether the element is currently visible using both visibility and display properties.
		 * @method
		 * @public (method)
		 * @param   {boolean} [deep]
		 * True to walk the dom and see if parent elements are hidden.
		 * If false, the function only checks the visibility of the element itself and it may return
		 * `true` even though a parent is not visible.
		 * @returns {boolean}        `true` if the element is currently visible, else `false`
		 */
		isVisible? (deep?: boolean): boolean;
		/** 
		 * Gets the last child, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The last child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		last? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Shorthand for [addManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		mon? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Move the element relative to its current position.
		 * @method
		 * @public (method)
		 * @param   {string} direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number} distance  How far to move the element in pixels
		 * @returns {void}             
		 */
		move? (direction: string, distance: number): void;
		/** 
		 * Shorthand for [removeManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		mun? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Gets the next sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The next sibling [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _asDom_ is _true_).  Or null if no match is found.
		 */
		next? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * The [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method is shorthand for
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * 
		 * Appends an event handler to this object.  For example:
		 * 
		 *    myGridPanel.on("itemclick", this.onItemClick, this);
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple events. For example:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: this.onCellClick,
		 *        select: this.onSelect,
		 *        viewready: this.onViewReady,
		 *        scope: this // Important. Ensure "this" is correct during handler execution
		 *    });
		 * 
		 * One can also specify options for each event handler separately:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: this.onCellClick, scope: this, single: true},
		 *        viewready: {fn: panel.onViewReady, scope: panel}
		 *    });
		 * 
		 * _Names_ of methods in a specified scope may also be used:
		 * 
		 *    myGridPanel.on({
		 *        cellclick: {fn: 'onCellClick', scope: this, single: true},
		 *        viewready: {fn: 'onViewReady', scope: panel}
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|object}                                  eventName
		 * The name of the event to listen for.
		 * May also be an object who's property names are event names.
		 * @param   {Function|string}                                [fn]
		 * The method the event invokes or the _name_ of
		 * the method within the specified `scope`.  Will be called with arguments
		 * given to [Ext.util.Observable.fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) plus the `options` parameter described
		 * below.
		 * @param   {object}                                         [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object|Ext.dom.Element.methodParams.on.Options} [options]
		 * An object containing handler configuration.
		 * 
		 * **Note:** The options object will also be passed as the last argument to every
		 * event handler.
		 * 
		 * This object may contain any of the following properties:
		 * @param   {string}                                         [order]
		 * A shortcut for the `order` event option.  Provided for backward compatibility.
		 *   Please use the `priority` event option instead.
		 * 
		 * **Combining Options**
		 * 
		 * Using the options argument, it is possible to combine different types of listeners:
		 * 
		 * A delayed, one-time listener.
		 * 
		 *    myPanel.on('hide', this.handleClick, this, {
		 *        single: true,
		 *        delay: 100
		 *    });
		 * 
		 * **Attaching multiple handlers in 1 call**
		 * 
		 * The method also allows for a single argument to be passed which is a config object
		 * containing properties which specify multiple handlers and handler configs.
		 * 
		 *    grid.on({
		 *        itemclick: 'onItemClick',
		 *        itemcontextmenu: grid.onItemContextmenu,
		 *        destroy: {
		 *            fn: function () {
		 *                // function called within the 'altCmp' scope instead of grid
		 *            },
		 *            scope: altCmp // unique scope for the destroy handler
		 *        },
		 *        scope: grid       // default scope - provided for example clarity
		 *    });
		 * 
		 * **Delegate**
		 * 
		 * This is a configuration option that you can pass along when registering a handler for
		 * an event to assist with event delegation. By setting this configuration option
		 * to a simple selector, the target element will be filtered to look for a
		 * descendant of the target. For example:
		 * 
		 *    var panel = Ext.create({
		 *        xtype: 'panel',
		 *        renderTo: document.body,
		 *        title: 'Delegate Handler Example',
		 *        frame: true,
		 *        height: 220,
		 *        width: 220,
		 *        html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content'
		 *    });
		 *    
		 *    // The click handler will only be called when the click occurs on the
		 *    // delegate: h1.myTitle ("h1" tag with class "myTitle")
		 *    panel.on({
		 *        click: function (e) {
		 *            console.log(e.getTarget().innerHTML);
		 *        },
		 *        element: 'body',
		 *        delegate: 'h1.myTitle'
		 *     });
		 * 
		 * @returns {object}                                         
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes
		 *  all listeners added in this call. For example:
		 * 
		 *    this.btnListeners =  = myButton.on({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		on? (eventName: string | object, fn?: ExtGlobalFunction | string, scope?: object, options?: object | Ext.dom.Element.methodParams.on.Options, order?: string): object;
		/** 
		 * Appends an after-event handler.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Appends a before-event handler.  Returning `false` from the handler will stop the event.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Gets the parent node for this element, optionally chaining up trying to match a selector
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find a parent node that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] True to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The parent node ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		parent? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Initializes positioning on this element. If a desired position is not passed,
		 * it will make the the element positioned relative IF it is not already positioned.
		 * @method
		 * @public (method)
		 * @param   {string} [pos]    Positioning to use "relative", "absolute" or "fixed"
		 * @param   {number} [zIndex] The zIndex to apply
		 * @param   {number} [x]      Set the page X position
		 * @param   {number} [y]      Set the page Y position
		 * @returns {void}            
		 */
		position? (pos?: string, zIndex?: number, x?: number, y?: number): void;
		/** 
		 * Gets the previous sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The previous sibling ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		prev? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		purgeAllListeners? (): void;
		/** 
		 * Selects child nodes based on the passed CSS selector.
		 * Delegates to document.querySelectorAll. More information can be found at
		 * [http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)
		 * 
		 * All selectors, attribute filters and pseudos below can be combined infinitely
		 * in any order. For example `div.foo:nth-child(odd)[@foo=bar].bar:first` would be
		 * a perfectly valid selector.
		 * 
		 * ## Element Selectors:
		 * 
		 * - * any element
		 * - E an element with the tag E
		 * - E F All descendant elements of E that have the tag F
		 * - E > F or E/F all direct children elements of E that have the tag F
		 * - E + F all elements with the tag F that are immediately preceded by an element with the tag E
		 * - E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
		 * 
		 * ## Attribute Selectors:
		 * 
		 * The use of  and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
		 * 
		 * - E[foo] has an attribute "foo"
		 * - E[foo=bar] has an attribute "foo" that equals "bar"
		 * - E[foo^=bar] has an attribute "foo" that starts with "bar"
		 * - E[foo$=bar] has an attribute "foo" that ends with "bar"
		 * - E[foo*=bar] has an attribute "foo" that contains the substring "bar"
		 * - E[foo%=2] has an attribute "foo" that is evenly divisible by 2
		 * - E[foo!=bar] has an attribute "foo" that does not equal "bar"
		 * 
		 * ## Pseudo Classes:
		 * 
		 * - E:first-child E is the first child of its parent
		 * - E:last-child E is the last child of its parent
		 * - E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
		 * - E:nth-child(odd) E is an odd child of its parent
		 * - E:nth-child(even) E is an even child of its parent
		 * - E:only-child E is the only child of its parent
		 * - E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
		 * - E:first the first E in the resultset
		 * - E:last the last E in the resultset
		 * - E:nth(n) the nth E in the resultset (1 based)
		 * - E:odd shortcut for :nth-child(odd)
		 * - E:even shortcut for :nth-child(even)
		 * - E:not(S) an E element that does not match simple selector S
		 * - E:has(S) an E element that has a descendant that matches simple selector S
		 * - E:next(S) an E element whose next sibling matches simple selector S
		 * - E:prev(S) an E element whose previous sibling matches simple selector S
		 * - E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\
		 * 
		 * ## CSS Value Selectors:
		 * 
		 * - E{display=none} CSS value "display" that equals "none"
		 * - E{display^=none} CSS value "display" that starts with "none"
		 * - E{display$=none} CSS value "display" that ends with "none"
		 * - E{display*=none} CSS value "display" that contains the substring "none"
		 * - E{display%=2} CSS value "display" that is evenly divisible by 2
		 * - E{display!=none} CSS value "display" that does not equal "none"
		 * @method
		 * @public (method)
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements (
		 * HTMLElement or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _asDom_ is _false_) that match the selector.<br/>
		 * If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]} className The CSS class to add, or an array of classes.
		 * @returns {Ext.dom.Element}           this
		 */
		radioCls? (className: string | string[]): Ext.dom.Element;
		/** 
		 * Relays selected events from the specified Observable as if the events were fired by `this`.
		 * 
		 * For example if you are extending Grid, you might decide to forward some events from store.
		 * So you can do this inside your initComponent:
		 * 
		 *    this.relayEvents(this.getStore(), ['load']);
		 * 
		 * The grid instance will then have an observable 'load' event which will be passed
		 * the parameters of the store's load event and any function fired with the grid's
		 * load event would have access to the grid using the this keyword (unless the event
		 * is handled by a controller's control/listen event listener in which case 'this'
		 * will be the controller rather than the grid).
		 * @method
		 * @public (method)
		 * @param   {object}          origin   The Observable whose events this object is to relay.
		 * @param   {string[]|object} events
		 * Array of event names to relay or an Object with key/value
		 * pairs translating to ActualEventName/NewEventName respectively. For example:
		 *     this.relayEvents(this, {add:'push', remove:'pop'});
		 * 
		 * Would now redispatch the add event of this as a push event and the remove event as a pop event.
		 * @param   {string}          [prefix]
		 * A common prefix to prepend to the event names. For example:
		 * 
		 *    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
		 * @returns {object}          
		 * A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:
		 * 
		 *    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Can be undone by calling
		 * 
		 *    Ext.destroy(this.storeRelayers);
		 * 
		 * or
		 *     this.store.relayers.destroy();
		 */
		relayEvents? (origin: object, events: string[] | object, prefix?: string): object;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		remove? (): void;
		/** 
		 * Alias for [unAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAfterListener? (): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAllListeners? (): void;
		/** 
		 * Alias for [unBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeBeforeListener? (): void;
		/** 
		 * Removes the given CSS class(es) from this Element.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} names
		 * The CSS classes to remove separated by space,
		 * or an array of classes
		 * @param   {string}          [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}          [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * return {[Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)} this
		 * @returns {void}                     
		 */
		removeCls? (names: string | string[], prefix?: string, suffix?: string): void;
		/** 
		 * Removes an event handler.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		removeListener? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes listeners that were added by the [mon](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-mon) method.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		removeManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Forces the browser to repaint this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Element}  this
		 */
		repaint? (): Ext.dom.Element;
		/** 
		 * Replaces the passed element with this element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to replace.
		 * The id of the node, a DOM Node or an existing Element.
		 * @param   {boolean}                            [destroy]
		 * `false` to prevent destruction of the replaced
		 * element
		 * @returns {Ext.dom.Element}                              This element
		 */
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.Element;
		/** 
		 * Replaces a CSS class on the element with another.
		 * If the old name does not exist, the new name will simply be added.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}          oldName  The CSS class to replace.
		 * @param   {string}          newName  The replacement CSS class.
		 * @param   {string}          [prefix] Prefix to prepend to each class to be replaced.
		 * @param   {string}          [suffix] Suffix to append to each class to be replaced.
		 * @returns {Ext.dom.Element}          this
		 */
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.Element;
		/** 
		 * Replaces this element with the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The new element (id of the
		 * node, a DOM Node or an existing Element) or a DomHelper config of an element to create
		 * @returns {Ext.dom.Element}                              This element
		 */
		replaceWith? (el: string | HTMLElement | Ext.dom.Element | object): Ext.dom.Element;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		resumeEvent? (): void;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to resume.
		 * @returns {void}                
		 */
		resumeEvent? (...eventName: string[]): void;
		/** 
		 * Resumes firing events (see [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents)).
		 * 
		 * If events were suspended using the `queueSuspended` parameter, then all events fired
		 * during event suspension will be sent to any listeners now.
		 * @method
		 * @public (method)
		 * @param   {boolean} [discardQueue]
		 * `true` to prevent any previously queued events from firing
		 * while we were suspended. See [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents).
		 * @returns {void}                   
		 */
		resumeEvents? (discardQueue?: boolean): void;
		/** 
		 * Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
		 * within this element's scrollable range.
		 * @method
		 * @public (method)
		 * @param   {string}         direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number}         distance  How far to scroll the element in pixels
		 * @param   {boolean|object} [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {boolean}        
		 * Returns true if a scroll was triggered or false if the element
		 * was scrolled as far as it could go.
		 */
		scroll? (direction: string, distance: number, animate?: boolean | object): boolean;
		/** 
		 * Scrolls this element by the passed delta values, optionally animating.
		 * 
		 * All of the following are equivalent:
		 * 
		 *     el.scrollBy(10, 10, true);
		 *     el.scrollBy([10, 10], true);
		 *     el.scrollBy({ x: 10, y: 10 }, true);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|number[]|object} deltaX
		 * Either the x delta, an Array specifying x and y deltas or
		 * an object with "x" and "y" properties.
		 * @param   {number|boolean|object}  deltaY  Either the y delta, or an animate flag or config object.
		 * @param   {boolean|object}         animate Animate flag/config object if the delta values were passed separately.
		 * @returns {Ext.dom.Element}                this
		 */
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.Element;
		/** 
		 * Scrolls this element into view within the passed container.
		 * 
		 *      Ext.create('Ext.data.Store', {
		 *          storeId:'simpsonsStore',
		 *          fields:['name', 'email', 'phone'],
		 *          data:{'items':[
		 *              { 'name': 'Lisa',  "email":"lisa@simpsons.com",  "phone":"555-111-1224"  },
		 *              { 'name': 'Bart',  "email":"bart@simpsons.com",  "phone":"555-222-1234" },
		 *              { 'name': 'Homer', "email":"homer@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Marge', "email":"marge@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Milhouse', "email":"milhouse@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Willy', "email":"willy@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Skinner', "email":"skinner@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Hank (last row)', "email":"hank@simpsons.com", "phone":"555-222-1254"  }
		 *          ]},
		 *          proxy: {
		 *              type: 'memory',
		 *              reader: {
		 *                  type: 'json',
		 *                  rootProperty: 'items'
		 *              }
		 *          }
		 *      });
		 *    
		 *      var grid = Ext.create('Ext.grid.Panel', {
		 *          title: 'Simpsons',
		 *          store: Ext.data.StoreManager.lookup('simpsonsStore'),
		 *          columns: [
		 *              { text: 'Name',  dataIndex: 'name', width: 125 },
		 *              { text: 'Email', dataIndex: 'email', flex: 1 },
		 *              { text: 'Phone', dataIndex: 'phone' }
		 *          ],
		 *          height: 190,
		 *          width: 400,
		 *          renderTo: Ext.getBody(),
		 *          tbar: [{
		 *              text: 'Scroll row 7 into view',
		 *              handler: function () {
		 *                  var view = grid.getView();
		 *    
		 *                  Ext.get(view.getRow(7)).scrollIntoView(view.getEl(), null, true);
		 *              }
		 *          }]
		 *      });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.Element} [container]
		 * The container element
		 * to scroll.  Should be a string (id), dom node, or [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @param   {boolean}                        [hscroll]   False to disable horizontal scroll.
		 * @param   {boolean|object}                 [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @param   {boolean}                        [highlight] true to highlight the element when it is in view.
		 * @returns {Ext.dom.Element}                            this
		 */
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.Element;
		/** 
		 * Scrolls this element the specified scroll point. It does NOT do bounds checking so
		 * if you scroll to a weird value it will try to do it. For auto bounds checking, use [scroll](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#event-scroll).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}          side      Either "left" for scrollLeft values or "top" for scrollTop values.
		 * @param   {number}          value     The new scroll value
		 * @param   {boolean|object}  [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {Ext.dom.Element}           this
		 */
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.Element;
		/** 
		 * Selects descendant elements of this element based on the passed CSS selector to
		 * enable [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement[]}                                  selector  The CSS selector or an array of elements
		 * @param   {boolean}                                               composite
		 * Return a CompositeElement as opposed to a
		 * CompositeElementLite. Defaults to false.
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}           
		 */
		select? (selector: string | HTMLElement[], composite: boolean): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Selects a single descendant element of this element using a CSS selector
		 * (see [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector The selector query
		 * @param   {boolean}                     [asDom]  `false` to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element} 
		 * The DOM element (or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if
		 * _asDom_ is _false_) which matched the selector.
		 */
		selectNode? (selector: string, asDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Sets the passed attributes as attributes of this element (a `style` attribute
		 * can be a string, object or function).
		 * 
		 * Example component (though any [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) would suffice):
		 * 
		 *    var cmp = Ext.create({
		 *        xtype: 'component',
		 *        html: 'test',
		 *        renderTo: Ext.getBody()
		 *    });
		 * 
		 * Once the component is rendered, you can fetch a reference to its outer
		 * element to use `set`:
		 * 
		 *    cmp.el.set({
		 *        foo: 'bar'
		 *    });
		 * 
		 * This sets an attribute on the element of **foo="bar"**:
		 * 
		 *    &lt;div class="x-component x-component-default x-border-box" id="component-1009" foo="bar"&gt;test&lt;/div&gt;
		 * 
		 * To remove the attribute pass a value of **undefined**:
		 * 
		 *    cmp.el.set({
		 *        foo: undefined
		 *    });
		 * 
		 * **Note:**
		 * 
		 * - You cannot remove an attribute by passing `undefined` when the
		 *   `expandos` param is set to **false**.
		 * - Passing an attribute of `style` results in the request being handed off to
		 *   [applyStyles](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-applyStyles).
		 * - Passing an attribute of `cls` results in the element's dom's
		 *   [className](http://www.w3schools.com/jsref/prop_html_classname.asp) property
		 *   being set directly.  For additional flexibility when setting / removing
		 *   classes see:
		 *   <ul>
		 *   <li>[addCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-addCls)
		 * - [removeCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-removeCls)
		 * - [replaceCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-replaceCls)
		 * - [setCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setCls)
		 * - [toggleCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggleCls)
		 * 
		 * </li>
		 * </ul>
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}          attributes The object with the attributes.
		 * @param   {boolean}         [useSet]
		 * `false` to override the default `setAttribute`
		 * to use [expandos](http://help.dottoro.com/ljvovanq.php).
		 * @returns {Ext.dom.Element}            this
		 */
		set? (attributes: object, useSet?: boolean): Ext.dom.Element;
		/** 
		 * Sets the element's CSS bottom style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   bottom
		 * Number of pixels or CSS string value to set as
		 * the bottom CSS property value
		 * @returns {Ext.dom.Element}        this
		 */
		setBottom? (bottom: number | string): Ext.dom.Element;
		/** 
		 * Sets the element's box.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}          box The box to fill {x, y, width, height}
		 * @returns {Ext.dom.Element}     this
		 */
		setBox? (box: object): Ext.dom.Element;
		/** 
		 * Sets the specified CSS class on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} className The CSS class to set on this element.
		 * @returns {void}                      
		 */
		setCls? (className: string | string[]): void;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}            name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                   [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Element|Ext.Base}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Element;
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Sets the CSS display property. Uses originalDisplay if the specified value is a
		 * boolean true.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean|string}  value
		 * Boolean value to display the element using its
		 * default display, or a string to set the display directly.
		 * @returns {Ext.dom.Element}       this
		 */
		setDisplayed? (value: boolean | string): Ext.dom.Element;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}          html The new HTML.
		 * @returns {Ext.dom.Element}      this
		 */
		setHTML? (html: string): Ext.dom.Element;
		/** 
		 * Set the height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   height The new height.
		 * @returns {Ext.dom.Element}        this
		 */
		setHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}          html The new HTML.
		 * @returns {Ext.dom.Element}      this
		 */
		setHtml? (html: string): Ext.dom.Element;
		/** 
		 * Sets the element's left position directly using CSS style
		 * (instead of [setX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setX)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   left
		 * Number of pixels or CSS string value to
		 * set as the left CSS property value
		 * @returns {Ext.dom.Element}      this
		 */
		setLeft? (left: number | string): Ext.dom.Element;
		/** 
		 * An alias for [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).  In
		 * versions prior to 5.1, [listeners](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#cfg-listeners) had a generated setter which could
		 * be called to add listeners.  In 5.1 the listeners config is not processed
		 * using the config system and has no generated setter, so this method is
		 * provided for backward compatibility.  The preferred way of adding listeners
		 * is to use the [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method.
		 * @method
		 * @public (method)
		 * @param   {object} listeners The listeners
		 * @returns {void}             
		 */
		setListeners? (listeners: object): void;
		/** 
		 * Sets the local x coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalX), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          x The x coordinate. A value of `null` sets the left style to 'auto'.
		 * @returns {Ext.dom.Element}   this
		 */
		setLocalX? (x: number): Ext.dom.Element;
		/** 
		 * Sets the local x and y coordinates of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalXY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|any[]}    x
		 * The x coordinate or an array containing [x, y]. A value of
		 * `null` sets the left style to 'auto'
		 * @param   {number}          [y]
		 * The y coordinate, required if x is not an array. A value of
		 * `null` sets the top style to 'auto'
		 * @returns {Ext.dom.Element}     this
		 */
		setLocalXY? (x: number | any[], y?: number): Ext.dom.Element;
		/** 
		 * Sets the local y coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          y The y coordinate. A value of `null` sets the top style to 'auto'.
		 * @returns {Ext.dom.Element}   this
		 */
		setLocalY? (y: number): Ext.dom.Element;
		/** 
		 * Set the maximum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   height The new maximum height.
		 * @returns {Ext.dom.Element}        this
		 */
		setMaxHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Set the maximum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   width The new maximum width.
		 * @returns {Ext.dom.Element}       this
		 */
		setMaxWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Set the minimum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   height The new minimum height.
		 * @returns {Ext.dom.Element}        this
		 */
		setMinHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Set the minimum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   width The new minimum width.
		 * @returns {Ext.dom.Element}       this
		 */
		setMinWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Set the opacity of the element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
		 * @returns {Ext.dom.Element}         this
		 */
		setOpacity? (opacity: number): Ext.dom.Element;
		/** 
		 * Sets the element's CSS right style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   right
		 * Number of pixels or CSS string value to
		 * set as the right CSS property value
		 * @returns {Ext.dom.Element}       this
		 */
		setRight? (right: number | string): Ext.dom.Element;
		/** 
		 * Sets the left scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          left The left scroll position
		 * @returns {Ext.dom.Element}      this
		 */
		setScrollLeft? (left: number): Ext.dom.Element;
		/** 
		 * Sets the top scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          top The top scroll position
		 * @returns {Ext.dom.Element}     this
		 */
		setScrollTop? (top: number): Ext.dom.Element;
		/** 
		 * Set the size of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   width
		 * The new width. This may be one of:
		 * 
		 * - A Number specifying the new width in pixels.
		 * - A String used to set the CSS width style. Animation may **not** be used.
		 * - A size object in the format `{width: widthValue, height: heightValue}`.
		 * @param   {number|string}   height
		 * The new height. This may be one of:
		 * 
		 * - A Number specifying the new height in pixels.
		 * - A String used to set the CSS height style. Animation may **not** be used.
		 * @returns {Ext.dom.Element}        this
		 */
		setSize? (width: number | string, height: number | string): Ext.dom.Element;
		/** 
		 * Wrapper for setting style properties, also takes single object parameter of
		 * multiple styles.
		 * 
		 * Styles should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    // two-param syntax
		 *    el.setStyle('color', 'white');
		 *    
		 *    // single-param syntax
		 *    el.setStyle({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}   property
		 * The style property to be set, or an object of
		 * multiple styles.
		 * @param   {string}          [value]
		 * The value to apply to the given property, or null if
		 * an object was passed.
		 * @returns {Ext.dom.Element}          this
		 */
		setStyle? (property: string | object, value?: string): Ext.dom.Element;
		/** 
		 * Sets the element's top position directly using CSS style
		 * (instead of [setY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setY)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   top
		 * Number of pixels or CSS string value to
		 * set as the top CSS property value
		 * @returns {Ext.dom.Element}     this
		 */
		setTop? (top: number | string): Ext.dom.Element;
		/** 
		 * Sets the element's top and left positions directly using CSS style.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		setTopLeft? (): void;
		/** 
		 * Use this to change the visibility mode between [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY),
		 * [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY), [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS), or [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.dom.Element.VISIBILITY|Ext.dom.Element.DISPLAY|Ext.dom.Element.OFFSETS|Ext.dom.Element.CLIP|number} mode
		 * The method by which the element will be [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-hide) (you can
		 * also use the [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible) or [toggle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggle) method to toggle element
		 * visibility).
		 * @returns {Ext.dom.Element}                                                                                             this
		 */
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.Element;
		/** 
		 * Sets the visibility of the element based on the current visibility mode. Use
		 * [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode) to switch between the following visibility modes:
		 * 
		 * - [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY) (the default)
		 * - [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY)
		 * - [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS)
		 * - [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP)
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean}         visible Whether the element is visible.
		 * @returns {Ext.dom.Element}         this
		 */
		setVisible? (visible: boolean): Ext.dom.Element;
		/** 
		 * Set the width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}   width The new width.
		 * @returns {Ext.dom.Element}       this
		 */
		setWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level x coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          x
		 * @returns {Ext.dom.Element}   this
		 */
		setX? (x: number): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level x and y coordinates
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number[]}        xy
		 * @returns {Ext.dom.Element}    this
		 */
		setXY? (xy: number[]): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level y coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          y
		 * @returns {Ext.dom.Element}   this
		 */
		setY? (y: number): Ext.dom.Element;
		/** 
		 * Sets the z-index of this Element and synchronizes the z-index of shadow and/or
		 * shim if present.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}          zindex The new z-index to set
		 * @returns {Ext.dom.Element}        this
		 */
		setZIndex? (zindex: number): Ext.dom.Element;
		/** 
		 * Show this element - Uses display mode to determine whether to use "display",
		 * "visibility", "offsets", or "clip". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Element}  this
		 */
		show? (): Ext.dom.Element;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		suspendEvent? (): void;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to suspend.
		 * @returns {void}                
		 */
		suspendEvent? (...eventName: string[]): void;
		/** 
		 * Suspends the firing of all events. (see [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents))
		 * @method
		 * @public (method)
		 * @param   {boolean} queueSuspended
		 * `true` to queue up suspended events to be fired
		 * after the [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) call instead of discarding all suspended events.
		 * @returns {void}                   
		 */
		suspendEvents? (queueSuspended: boolean): void;
		/** 
		 * Toggles the element's visibility, depending on visibility mode.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Element}  this
		 */
		toggle? (): Ext.dom.Element;
		/** 
		 * Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}          className The CSS class to toggle.
		 * @param   {boolean}         [state]
		 * If specified as `true`, causes the class to be added. If specified as `false`, causes
		 * the class to be removed.
		 * @returns {Ext.dom.Element}           this
		 */
		toggleCls? (className: string, state?: boolean): Ext.dom.Element;
		/** 
		 * Translates the passed page coordinates into left/top css values for the element
		 * @method
		 * @public (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with left and top properties. e.g.
		 * {left: (value), top: (value)}
		 */
		translatePoints? (x: number | any[], y?: number): object;
		/** 
		 * Shorthand for [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		un? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * .
		 * Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 'div.some-class' or 'span:first-child').
		 * This is a shortcut for findParentNode() that always returns an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector    The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element that causes the upward
		 * traversal to stop and is **not** considered for inclusion as the result.
		 * (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnDom] True to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The matching DOM node (or HTMLElement if
		 * _returnDom_ is _true_).  Or null if no match was found.
		 */
		up? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}          html The new HTML.
		 * @returns {Ext.dom.Element}      this
		 */
		update? (html: string): Ext.dom.Element;
		/** 
		 * Creates and wraps this element with another element
		 * @method
		 * @public (method)
		 * @param   {object}                      [config]    DomHelper element config object for the wrapper element or null for an empty div
		 * @param   {boolean}                     [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {string}                      [selector]  A CSS selector to select a descendant node within the created element to use as the wrapping element.
		 * @returns {HTMLElement|Ext.dom.Element}             The newly created wrapper element
		 */
		wrap? (config?: object, returnDom?: boolean, selector?: string): HTMLElement | Ext.dom.Element;
		/** 
		 * Creates new Element directly by passing an id or the HTMLElement.  This
		 * constructor should not be called directly.  Always use [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)
		 * or [Ext#fly()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) instead.
		 * 
		 * In older versions of Ext JS and Sencha Touch this constructor checked to see if
		 * there was already an instance of this element in the cache and if so, returned
		 * the same instance. As of version 5 this behavior has been removed in order to
		 * avoid a redundant cache lookup since the most common path is for the Element
		 * constructor to be called from [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get), which has already
		 * checked for a cache entry.
		 * 
		 * Correct way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or retrieving it from the cache):
		 * 
		 *    var el = Ext.get('foo'); // by id
		 *    
		 *    var el = Ext.get(document.getElementById('foo')); // by DOM reference
		 * 
		 * Incorrect way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * 
		 *    var el = new Ext.dom.Element('foo');
		 * 
		 * For quick and easy access to [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods use a flyweight:
		 * 
		 *    Ext.fly('foo').addCls('foo-hovered');
		 * 
		 * This simply attaches the DOM node with id='foo' to the global flyweight Element
		 * instance to avoid allocating an extra [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance.  If, however,
		 * the Element instance has already been cached by a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)(),
		 * then [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)() will return the cached Element instance.  For more info see
		 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly).
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement} element
		 */
		constructor (element: string | HTMLElement);
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                   config
		 * @returns {Ext.dom.Element|Ext.Base}        this
		 */
		initConfig? (config: object): Ext.dom.Element;
		initConfig? (config: object): Ext.Base;
		/** 
		 * Gets the default scope for firing late bound events (string names with
		 * no scope attached) at runtime.
		 * @method
		 * @protected (method)
		 * @param   {object} [defaultScope] The default scope to return if none is found.
		 * @returns {object}                The default event scope
		 */
		resolveListenerScope? (defaultScope?: object): object;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Element.Statics|Ext.Base.Statics}  
		 */
		statics? (): Ext.dom.Element.Statics;
		statics? (): Ext.Base.Statics;
		/** 
		 * Adds declarative listeners as nested arrays of listener objects.
		 * @method
		 * @private (method)
		 * @param   {any[]}   listeners
		 * @returns {boolean}           `true` if any listeners were added
		 */
		_addDeclaredListeners? (listeners: any[]): boolean;
		/** 
		 * Returns the publisher for a given event
		 * @method
		 * @private (method)
		 * @param   {string}                        eventName
		 * @returns {Ext.event.publisher.Publisher}           
		 */
		_getPublisher? (eventName: string): Ext.event.publisher.Publisher;
		/** 
		 * This method applies a versioned, deprecation declaration to this class. This
		 * is typically called by the `deprecated` config.
		 * @method
		 * @private (method)
		 * @param   {object} deprecations
		 * @returns {void}                
		 */
		addDeprecations? (deprecations: object): void;
		/** 
		 * Returns the fractional portion of this element's measurement in the given dimension.
		 * (IE9+ only)
		 * @method
		 * @private (method)
		 * @param   {object} dimension
		 * @returns {number}           
		 */
		adjustDirect2DDimension? (dimension: object): number;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xy
		 * @param   {object} parent
		 * @returns {void}          
		 */
		adjustForConstraints? (xy: object, parent: object): void;
		/** 
		 * Stub implementation called after positioning.
		 * May be implemented in subclasses. Component has an implementation.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		afterSetPosition? (): void;
		/** 
		 * Calculates x,y coordinates specified by the anchor position on the element, adding
		 * extraX and extraY values.
		 * @method
		 * @private (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {number}   [extraX] value to be added to the x coordinate
		 * @param   {number}   [extraY] value to be added to the y coordinate
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		calculateAnchorXY? (anchor?: string, extraX?: number, extraY?: number, size?: object): number[];
		/** 
		 * Calculates the new [x,y] position to move this Positionable into a constrain region.
		 * 
		 * By default, this Positionable is constrained to be within the container it was added to, or the element it was
		 * rendered to.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * An alternative constraint may be passed.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|Ext.util.Region} [constrainTo]
		 * The Element or [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html)
		 * into which this Component is to be constrained. Defaults to the element into which this Positionable
		 * was rendered, or this Component's {@link [Ext.Component.constrainTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#cfg-constrainTo).
		 * @param   {number[]}                                           [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to coerce into constraints instead of using this Positionable's current position.
		 * @param   {boolean}                                            [local]            The proposedPosition is local _(relative to floatParent if a floating Component)_
		 * @param   {number[]}                                           [proposedSize]
		 * A proposed `[width, height]` size to use when calculating
		 * constraints instead of using this Positionable's current size.
		 * @returns {number[]}                                           
		 * **If** the element _needs_ to be translated, the new `[X, Y]` position within
		 * constraints if possible, giving priority to keeping the top and left edge in the constrain region.
		 * Otherwise, `false`.
		 */
		calculateConstrainedPosition? (constrainTo?: string | HTMLElement | Ext.dom.Element | Ext.util.Region, proposedPosition?: number[], local?: boolean, proposedSize?: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} o
		 * @param   {object} fn
		 * @param   {object} scope
		 * @returns {void}         
		 */
		captureArgs? (o: object, fn: object, scope: object): void;
		/** 
		 * Removes the element from the cache and removes listeners.
		 * Used for cleaning up orphaned elements after they have been removed from the dom.
		 * Similar to [destroy](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy) except it assumes the element has already been
		 * removed from the dom.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		collect? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} box
		 * @returns {void}       
		 */
		constrainBox? (box: object): void;
		/** 
		 * Creates an event handling function which re-fires the event from this object as the passed event name.
		 * @method
		 * @private (method)
		 * @param   {string}   newName    The name under which to re-fire the passed parameters.
		 * @param   {any[]}    [beginEnd] The caller can specify on which indices to slice.
		 * @returns {Function}            
		 */
		createRelayer? (newName: string, beginEnd?: any[]): ExtGlobalFunction;
		/** 
		 * Disables the shadow element created by [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShadow? (): void;
		/** 
		 * Disables the shim element created by [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShim? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchContextMenu? (): void;
		/** 
		 * Disables native scrolling of an overflowing element using touch-screen input
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchScroll? (): void;
		/** 
		 * Continue to fire event.
		 * @method
		 * @private (method)
		 * @param   {string}  eventName
		 * @param   {any[]}   args
		 * @param   {boolean} bubbles
		 * @returns {void}              
		 */
		doFireEvent? (eventName: string, args: any[], bubbles: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} element
		 * @returns {void}           
		 */
		doReplaceWith? (element: object): void;
		/** 
		 * A scrollIntoView implementation for scrollIntoView/rtlScrollIntoView to call
		 * after current scrollX has been determined.
		 * @method
		 * @private (method)
		 * @param   {object} container
		 * @param   {object} hscroll
		 * @param   {object} animate
		 * @param   {object} highlight
		 * @param   {object} getScrollX
		 * @param   {object} scrollTo
		 * @returns {void}              
		 */
		doScrollIntoView? (container: object, hscroll: object, animate: object, highlight: object, getScrollX: object, scrollTo: object): void;
		/** 
		 * Enables a shadow element that will always display behind this element
		 * @method
		 * @private (method)
		 * @param   {object|Ext.dom.Element.methodParams.enableShadow.Options} [options] Configuration options for the shadow
		 * @returns {void}                                                               
		 */
		enableShadow? (options?: object | Ext.dom.Element.methodParams.enableShadow.Options): void;
		/** 
		 * Enables an iframe shim for this element to keep windowed objects from
		 * showing through.  The position, size, and visibility of the shim will be
		 * automatically synchronized as the position, size, and visibility of this
		 * Element are changed.
		 * @method
		 * @private (method)
		 * @param   {object}          [options] Configuration options for the shim
		 * @returns {Ext.dom.Element}           The new shim element
		 */
		enableShim? (options?: object): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates of an element specified by the anchor position on the
		 * element.
		 * @method
		 * @private (method)
		 * @param   {Ext.dom.Element} el       The element
		 * @param   {string}          [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}         [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}          [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}                 [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorToXY? (el: Ext.dom.Element, anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the size of the element's borders and padding.
		 * @method
		 * @private (method)
		 * @returns {object} 
		 * an object with the following numeric properties
		 * 
		 * - beforeX
		 * - afterX
		 * - beforeY
		 * - afterY
		 */
		getBorderPadding? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getBorders? (): void;
		/** 
		 * Gets the bubbling parent for an Observable
		 * @method
		 * @private (method)
		 * @returns {Ext.util.Observable}  The bubble parent. null is returned if no bubble target exists
		 */
		getBubbleParent? (): Ext.util.Observable;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getCurrentConfig? (): void;
		/** 
		 * Gets the x and y coordinates needed for scrolling an element into view within
		 * a given container.  These coordinates translate into the scrollLeft and scrollTop
		 * positions that will need to be set on an ancestor of the element in order to make
		 * this element visible within its container.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.Element} container The container
		 * @param   {number}                         scrollX   The container's current scroll position on the x axis
		 * @param   {number}                         scrollY   The container's current scroll position on the y axis
		 * @returns {object}                                   An object with "x" and "y" properties
		 */
		getScrollIntoViewXY? (container: string | HTMLElement | Ext.Element, scrollX: number, scrollY: number): object;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} config
		 * @returns {void}          
		 */
		hasConfig? (config: object): void;
		/** 
		 * Adds a "destroyable" object to an internal list of objects that will be destroyed
		 * when this instance is destroyed (via [`destroy`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-destroy)).
		 * @method
		 * @private (method)
		 * @param   {string} name
		 * @param   {object} value
		 * @returns {object}       The `value` passed.
		 */
		link? (name: string, value: object): object;
		/** 
		 * Mask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		maskIframes? (): void;
		/** 
		 * Prepares a given class for observable instances. This method is called when a
		 * class derives from this class or uses this class as a mixin.
		 * @method
		 * @private (method)
		 * @param   {Function}            T     The class constructor to prepare.
		 * @param   {Ext.util.Observable} mixin The mixin if being used as a mixin.
		 * @param   {object}              data  The raw class creation data if this is an extend.
		 * @returns {void}                      
		 */
		prepareClass? (T: ExtGlobalFunction, mixin: Ext.util.Observable, data: object): void;
		/** 
		 * Remove a single managed listener item
		 * @method
		 * @private (method)
		 * @param   {boolean} isClear         True if this is being called during a clear
		 * @param   {object}  managedListener
		 * The managed listener item
		 * See removeManagedListener for other args
		 * @returns {void}                    
		 */
		removeManagedListenerItem? (isClear: boolean, managedListener: object): void;
		/** 
		 * Converts local coordinates into page-level coordinates
		 * @method
		 * @private (method)
		 * @param   {number[]} xy The local x and y coordinates
		 * @returns {number[]}    The translated coordinates
		 */
		reverseTranslateXY? (xy: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} child
		 * @param   {object} hscroll
		 * @returns {void}           
		 */
		scrollChildIntoView? (child: object, hscroll: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} isVisible
		 * @returns {void}             
		 */
		setVisibility? (isVisible: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {string}  firstClass
		 * @param   {string}  secondClass
		 * @param   {boolean} flag
		 * @param   {string}  prefix
		 * @returns {any}                 
		 */
		swapCls? (firstClass: string, secondClass: string, flag: boolean, prefix: string): any;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		syncUnderlays? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		synchronize? (): void;
		/** 
		 * Translates the passed page coordinates into x and y css values for the element
		 * @method
		 * @private (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with x and y properties. e.g.
		 * {x: (value), y: (value)}
		 */
		translateXY? (x: number | any[], y?: number): object;
		/** 
		 * Destroys a given set of [`linked`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-link) objects. This is only needed if
		 * the linked object is being destroyed before this instance.
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {string[]}                 names The names of the linked objects to destroy.
		 * @returns {Ext.dom.Element|Ext.Base}       this
		 */
		unlink? (names: string[]): Ext.dom.Element;
		unlink? (names: string[]): Ext.Base;
		/** 
		 * Unmask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		unmaskIframes? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @returns {Ext.dom.Element}  this
		 */
		unwrap? (): Ext.dom.Element;
	}
	/** 
	 * A special [Ext.util.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Event.html) subclass that adds support for capture (top-down propagation)
	 * listeners, and non-delegated (directly attached to the dom) listeners.
	 * 
	 * An [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will have one instance of this class per event type that is being listened
	 * for.  The ElementEvent instance provides a single point for attaching event listeners
	 * and abstracts away important details on the timing and ordering of event firing.
	 * Internally this class manages up to 3 separate [Ext.util.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Event.html) instances.  These represent
	 * separate stacks of listeners that may be invoked during different phases of event propagation.
	 * 
	 * - `captures` - tracks listeners that should fire during the "capture" phase of the
	 *   standard delegated model (listeners attached using capture:true)
	 * - `direct` - tracks directly attached listeners, that is listeners that should fire
	 *   immediately when the event is dispatched to the dom element, before the event bubbles
	 *   upward and delegated listener processing begins
	 *   (listeners attached using delegated:false)
	 * - `directCaptures` - tracks directly attached capture listeners (only works in IE10+)
	 * 
	 * For more detail on the timing of when these event stacks are dispatched please see
	 * [Ext.event.publisher.Dom](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.publisher.Dom.html)
	 * @private (class)
	 */
	class ElementEvent extends Ext.util.Event {}
	/** 
	 * [Ext.dom.Fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html)
	 * A flyweight [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) that can be dynamically attached to a DOM node.
	 * In general this class should not be instantiated directly.  Use [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)
	 * to create and retrieve Fly instances.
	 */
	class Fly extends Ext.dom.Element {
		/** 
		 * This is `true` to identify Element flyweights
		 * @property
		 * @public (property)
		 * @default true
		 * @type {boolean}
		 */
		isFly?: boolean;
		/** 
		 * Get the reference to the current class from which this object was instantiated. Unlike [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics),
		 * `this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics)
		 * for a detailed comparison
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            alert(this.self.speciesName); // dependent on 'this'
		 *        },
		 *    
		 *        clone: function() {
		 *            return new this.self();
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *        statics: {
		 *            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                     // alerts 'Cat'
		 *    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'
		 * 
		 * @property
		 * @protected (property)
		 * @default Ext.Base
		 * @type {Ext.dom.Fly.Statics}
		 */
		self?: Ext.dom.Fly.Statics | Ext.dom.Element.Statics | Ext.Base.Statics;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                               members    The members to add to this class.
		 * @param   {boolean}                              [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                              [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}            
		 */
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Fly;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                               members
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}         this
		 */
		static addStatics? (members: object): typeof Ext.dom.Fly;
		static addStatics? (members: object): typeof Ext.dom.Element;
		static addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		static createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		static fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		static fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		static get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		static getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		static getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		static getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		static getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		static getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		static getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		static getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		static getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		static getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		static normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		static override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		static parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		static parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		static query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		static select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		static serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		static unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		static create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		static create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		static _onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static _onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		static addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                               members
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}         
		 */
		static addInheritableStatics? (members: object): typeof Ext.dom.Fly;
		static addInheritableStatics? (members: object): typeof Ext.dom.Element;
		static addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                               name
		 * @param   {object}                               member
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}        
		 */
		static addMember? (name: object, member: object): typeof Ext.dom.Fly;
		static addMember? (name: object, member: object): typeof Ext.dom.Element;
		static addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		static addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		static borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  
		 */
		static detach? (): typeof Ext.dom.Fly;
		static detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		static extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		static getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		static mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                               fn
		 * @param   {object}                               scope
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}       
		 */
		static onExtended? (fn: object, scope: object): typeof Ext.dom.Fly;
		static onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		static onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static triggerExtended? (): void;
		/** 
		 * Alias for [onAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addAfterListener? (): void;
		/** 
		 * Alias for [onBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addBeforeListener? (): void;
		/** 
		 * Adds the given CSS class(es) to this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}             names
		 * The CSS classes to add separated by space,
		 * or an array of classes
		 * @param   {string}                      [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}                      [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}          this
		 */
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.Fly;
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.Element;
		/** 
		 * The addManagedListener method is used when some object (call it "A") is listening
		 * to an event on another observable object ("B") and you want to remove that listener
		 * from "B" when "A" is destroyed. This is not an issue when "B" is destroyed because
		 * all of its listeners will be removed at that time.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Foo', {
		 *        extend: 'Ext.Component',
		 *    
		 *        initComponent: function () {
		 *            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);
		 *            this.callParent();
		 *        }
		 *    });
		 * 
		 * As you can see, when an instance of Foo is destroyed, it ensures that the 'show'
		 * listener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.
		 * 
		 * As of version 5.1 it is no longer necessary to use this method in most cases because
		 * listeners are automatically managed if the scope object provided to
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) is an Observable instance.
		 * However, if the observable instance and scope are not the same object you
		 * still need to use `mon` or `addManagedListener` if you want the listener to be
		 * managed.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Aligns the element with another element relative to the specified anchor points. If
		 * the other element is the document it aligns it to the viewport. The position
		 * parameter is optional, and can be specified in any one of the following formats:
		 * 
		 * - **Blank**: Defaults to aligning the element's top-left corner to the target's
		 *   bottom-left corner ("tl-bl").
		 * - **One anchor (deprecated)**: The passed anchor position is used as the target
		 *   element's anchor point.  The element being aligned will position its top-left
		 *   corner (tl) to that point. _This method has been deprecated in favor of the newer
		 *   two anchor syntax below_.
		 * - **Two anchors**: If two values from the table below are passed separated by a dash,
		 *   the first value is used as the element's anchor point, and the second value is
		 *   used as the target's anchor point.
		 * 
		 * In addition to the anchor points, the position parameter also supports the "?"
		 * character. If "?" is passed at the end of the position string, the element will
		 * attempt to align as specified, but the position will be adjusted to constrain to
		 * the viewport if necessary. Note that the element being aligned might be swapped to
		 * align to a different position than that specified in order to enforce the viewport
		 * constraints. Following are all of the supported anchor positions:
		 * 
		 *    Value  Description
		 *    -----  -----------------------------
		 *    tl     The top left corner (default)
		 *    t      The center of the top edge
		 *    tr     The top right corner
		 *    l      The center of the left edge
		 *    c      In the center of the element
		 *    r      The center of the right edge
		 *    bl     The bottom left corner
		 *    b      The center of the bottom edge
		 *    br     The bottom right corner
		 * 
		 * Example Usage:
		 * 
		 *    // align el to other-el using the default positioning
		 *    // ("tl-bl", non-constrained)
		 *    el.alignTo("other-el");
		 *    
		 *    // align the top left corner of el with the top right corner of other-el
		 *    // (constrained to viewport)
		 *    el.alignTo("other-el", "tr?");
		 *    
		 *    // align the bottom right corner of el with the center left edge of other-el
		 *    el.alignTo("other-el", "br-l?");
		 *    
		 *    // align the center of el with the bottom left corner of other-el and
		 *    // adjust the x position by -6 pixels (and the y position by 0)
		 *    el.alignTo("other-el", "c-bl", [-6, 0]);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]
		 * Offset the positioning by [x, y]
		 * Element animation config object
		 * @returns {Ext.dom.Fly|Ext.dom.Element}                         this
		 */
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.Fly;
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.Element;
		/** 
		 * Appends the passed element(s) to this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).
		 */
		appendChild? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends this element to the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The new parent element.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}           This element.
		 */
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Fly;
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * More flexible version of [setStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setStyle) for setting style properties.
		 * 
		 * Styles in object form should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    el.applyStyles('color: white;');
		 *    
		 *    el.applyStyles({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 *    
		 *    el.applyStyles(function () {
		 *        if (name.initialConfig.html === 'Phineas Flynn') {
		 *            return 'font-style: italic;';
		 *            // OR return { fontStyle: 'italic' };
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string|object}      styles
		 * A style specification string, e.g. "width:100px", or object in the form `{width:"100px"}`, or
		 * a function which returns such a specification.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.Fly;
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.Element;
		/** 
		 * Tries to blur the element. Any exceptions are caught and ignored.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  this
		 */
		blur? (): Ext.dom.Fly;
		blur? (): Ext.dom.Element;
		/** 
		 * When an element is moved around in the DOM, or is hidden using `display:none`, it loses layout, and therefore
		 * all scroll positions of all descendant elements are lost.
		 * 
		 * This function caches them, and returns a function, which when run will restore the cached positions.
		 * In the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:
		 * 
		 *    var restoreScroll = myPanel.el.cacheScrollValues();
		 *    myOtherContainer.add(myPanel);
		 *    restoreScroll();
		 * 
		 * @method
		 * @public (method)
		 * @returns {Function} 
		 * A function which will restore all descendant elements of this Element to their scroll
		 * positions recorded when this function was executed. Be aware that the returned function is a closure which has
		 * captured the scope of `cacheScrollValues`, so take care to dereference it as soon as not needed - if is it is a `var`
		 * it will drop out of scope, and the reference will be freed.
		 */
		cacheScrollValues? (): ExtGlobalFunction;
		/** 
		 * Centers the Element in either the viewport, or another Element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} centerIn
		 * element in
		 * which to center the element.
		 * @returns {Ext.dom.Element}                             This element
		 */
		center? (centerIn: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Selects a single _direct_ child based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		child? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearListeners? (): void;
		/** 
		 * Removes all managed listeners for this object.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearManagedListeners? (): void;
		/** 
		 * Clone this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                     [deep]      `true` if the children of the node should also be cloned.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The newly cloned [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`).
		 */
		clone? (deep?: boolean, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element, or is
		 * the element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} element
		 * The dom element,
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or id (string) of the dom element to check.
		 * @returns {boolean}                                    True if this element is an ancestor of el or the el itself, else false
		 */
		contains? (element: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Creates the passed DomHelper config and appends it to this element or optionally
		 * inserts it before the passed child element.
		 * @method
		 * @public (method)
		 * @param   {object}                      config
		 * DomHelper element config object.  If no tag is specified
		 * (e.g., {tag:'input'}) then a div will be automatically generated with the specified
		 * attributes.
		 * @param   {HTMLElement}                 [insertBefore] a child element of this element
		 * @param   {boolean}                     [returnDom]
		 * true to return the dom node instead of creating
		 * an Element
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_)
		 */
		createChild? (config: object, insertBefore?: HTMLElement, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Translates an element using CSS 3 in 2D.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		cssTranslate? (): void;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		down? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if
		 * present. There is no implementation in the Observable base class.
		 * 
		 * This is commonly used by Ext.Components to bubble events to owner Containers.
		 * See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget). The default implementation in [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) returns the
		 * Component's immediate owner. But if a known target is required, this can be overridden to access the
		 * required target more quickly.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Ext.overrides.form.field.Base', {
		 *        override: 'Ext.form.field.Base',
		 *    
		 *        //  Add functionality to Field's initComponent to enable the change event to bubble
		 *        initComponent: function () {
		 *            this.callParent();
		 *            this.enableBubble('change');
		 *        }
		 *    });
		 *    
		 *    var myForm = Ext.create('Ext.form.Panel', {
		 *        title: 'User Details',
		 *        items: [{
		 *            ...
		 *        }],
		 *        listeners: {
		 *            change: function() {
		 *                // Title goes red if form has been modified.
		 *                myForm.header.setStyle('color', 'red');
		 *            }
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|string[]} eventNames The event name to bubble, or an Array of event names.
		 * @returns {void}                       
		 */
		enableBubble? (eventNames: string | string[]): void;
		/** 
		 * Looks at this node and then at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParent? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Looks at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParentNode? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * By default, the action function will be executed after any "before" event handlers
		 * (as specified using the `order` option of
		 * [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)), but before any other
		 * handlers are fired.  This gives the "before" handlers an opportunity to
		 * cancel the event by returning `false`, and prevent the action function from
		 * being called.
		 * 
		 * The action can also be configured to run after normal handlers, but before any "after"
		 * handlers (as specified using the `order` event option) by passing `'after'`
		 * as the `order` parameter.  This configuration gives any event handlers except
		 * for "after" handlers the opportunity to cancel the event and prevent the action
		 * function from being called.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {any[]}    args      Arguments to pass to handlers and to the action function.
		 * @param   {Function} fn        The action function.
		 * @param   {object}   [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object}   [options]
		 * Event options for the action function.  Accepts any
		 * of the options of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * @param   {string}   [order]
		 * The order to call the action function relative
		 * too the event handlers (`'before'` or `'after'`).  Note that this option is
		 * simply used to sort the action function relative to the event handlers by "priority".
		 * An order of `'before'` is equivalent to a priority of `99.5`, while an order of
		 * `'after'` is equivalent to a priority of `-99.5`.  See the `priority` option
		 * of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) for more details.
		 * @returns {void}               
		 */
		fireAction? (eventName: string, args: any[], fn: ExtGlobalFunction, scope?: object, options?: object, order?: string): void;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to fire.
		 * @returns {boolean}           returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string): boolean;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}    eventName The name of the event to fire.
		 * @param   {...object} args      Variable number of parameters are passed to handlers.
		 * @returns {boolean}             returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string, ...args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameter list.
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {object[]} args      An array of parameters which are passed to handlers.
		 * @returns {boolean}            returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEventArgs? (eventName: string, args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * Evented Actions will automatically dispatch a 'before' event passing. This event will
		 * be given a special controller that allows for pausing/resuming of the event flow.
		 * 
		 * By pausing the controller the updater and events will not run until resumed. Pausing,
		 * however, will not stop the processing of any other before events.
		 * @method
		 * @public (method)
		 * @param   {string}          eventName The name of the event to fire.
		 * @param   {any[]}           args      Arguments to pass to handlers and to the action function.
		 * @param   {Function|string} fn        The action function.
		 * @param   {object}          [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {any[]|boolean}   [fnArgs]
		 * Optional arguments for the action `fn`. If not
		 * given, the normal `args` will be used to call `fn`. If `false` is passed, the
		 * `args` are used but if the first argument is this instance it will be removed
		 * from the args passed to the action function.
		 * @returns {void}                      
		 */
		fireEventedAction? (eventName: string, args: any[], fn: ExtGlobalFunction | string, scope?: object, fnArgs?: any[] | boolean): void;
		/** 
		 * Gets the first child, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}             The first child or null
		 */
		first? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Try to focus the element either immediately or after a timeout
		 * if `defer` argument is specified.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      [defer] Milliseconds to defer the focus
		 * @returns {Ext.dom.Fly|Ext.dom.Element}         this
		 */
		focus? (defer?: number): Ext.dom.Fly;
		focus? (defer?: number): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates to align this element with another element. See
		 * [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for more info on the supported position values.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]  Offset the positioning by [x, y]
		 * @returns {number[]}                                            [x, y]
		 */
		getAlignToXY? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): number[];
		/** 
		 * Gets the x,y coordinates specified by the anchor position on the element.
		 * @method
		 * @public (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}  [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorXY? (anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the value of an attribute from the element's underlying DOM node.
		 * @method
		 * @public (method)
		 * @param   {string} name        The attribute name.
		 * @param   {string} [namespace] The namespace in which to look for the attribute.
		 * @returns {string}             The attribute value.
		 */
		getAttribute? (name: string, namespace?: string): string;
		/** 
		 * Returns an object containing a map of all attributes of this element's DOM node.
		 * @method
		 * @public (method)
		 * @returns {object}  Key/value pairs of attribute names and their values.
		 */
		getAttributes? (): object;
		/** 
		 * Gets the width of the border(s) for the specified side(s)
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the border **l**eft
		 * width + the border **r**ight width.
		 * @returns {number}      The width of the sides passed added together
		 */
		getBorderWidth? (side: string): number;
		/** 
		 * Gets the bottom Y coordinate of the element (element Y position + element height)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinate
		 * @returns {number}        
		 */
		getBottom? (local: boolean): number;
		/** 
		 * Return an object defining the area of this Element which can be passed to
		 * [setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentBox]
		 * If true a box for the content of the element is
		 * returned.
		 * @param   {boolean} [local]
		 * If true the element's left and top relative to its
		 * `offsetParent` are returned instead of page x/y.
		 * @returns {object}               An object in the format
		 */
		getBox? (contentBox?: boolean, local?: boolean): object;
		/** 
		 * Returns a child element of this element given its `id`.
		 * @method
		 * @public (method)
		 * @param   {string}                      id      The id of the desired child element.
		 * @param   {boolean}                     [asDom]
		 * True to return the DOM element, false to return a
		 * wrapped Element object.
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The child element (or HTMLElement if
		 * _asDom_ is _true_).  Or null if no match was found.
		 */
		getById? (id: string, asDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns a region object that defines the client area of this element.
		 * 
		 * That is, the area _within_ any scrollbars.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getClientRegion? (): Ext.util.Region;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the content region of this element for purposes of constraining floating
		 * children.  That is the region within the borders and scrollbars, but not within the padding.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getConstrainRegion? (): void;
		/** 
		 * Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best
		 * attempt to constrain within the passed constraint. Returns `false` if the element
		 * does not need to be moved.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * The constraint may either be an existing element into which the element is to be
		 * constrained, or a [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) into which this element is to be
		 * constrained.
		 * 
		 * By default, any extra shadow around the element is **not** included in the constrain calculations - the edges
		 * of the element are used as the element bounds. To constrain the shadow within the constrain region, set the
		 * `constrainShadow` property on this element to `true`.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string|Ext.util.Region} [constrainTo]
		 * The
		 * Positionable, HTMLElement, element id, or Region into which the element is to be
		 * constrained.
		 * @param   {number[]}                                                 [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to produce a vector for instead of using the element's current position
		 * @param   {number[]}                                                 [proposedSize]
		 * A proposed `[width, height]` size to constrain
		 * instead of using the element's current size
		 * @returns {number[]|boolean}                                         
		 * **If** the element _needs_ to be translated, an `[X, Y]`
		 * vector by which this element must be translated. Otherwise, `false`.
		 */
		getConstrainVector? (constrainTo?: Ext.util.Positionable | HTMLElement | string | Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]): number[] | boolean;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHTML? (): string;
		/** 
		 * Returns the offset height of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentHeight] `true` to get the height minus borders and padding.
		 * @returns {number}                  The element's height.
		 */
		getHeight? (contentHeight?: boolean): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHtml? (): string;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Gets the left X coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of
		 * page coordinate
		 * @returns {number}        
		 */
		getLeft? (local: boolean): number;
		/** 
		 * Returns the x coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local x coordinate
		 */
		getLocalX? (): number;
		/** 
		 * Returns the x and y coordinates of this element relative to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number[]}  The local XY position of the element
		 */
		getLocalXY? (): number[];
		/** 
		 * Returns the y coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local y coordinate
		 */
		getLocalY? (): number;
		/** 
		 * Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
		 * then it returns the calculated width of the sides (see [getPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-getPadding)).
		 * @method
		 * @public (method)
		 * @param   {string}        [sides] Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		 * @returns {object|number}         
		 */
		getMargin? (sides?: string): object | number;
		/** 
		 * Returns the offsets of this element from the passed element. The element must both
		 * be part of the DOM tree and not have display:none to have page coordinates.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} offsetsTo
		 * The Positionable,
		 * HTMLElement, or element id to get get the offsets from.
		 * @returns {number[]}                                           The XY page offsets (e.g. `[100, -200]`)
		 */
		getOffsetsTo? (offsetsTo: Ext.util.Positionable | HTMLElement | string): number[];
		/** 
		 * Retrieves the height of the element account for the top and bottom margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterHeight? (): void;
		/** 
		 * Retrieves the width of the element accounting for the left and right margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterWidth? (): void;
		/** 
		 * Gets the width of the padding(s) for the specified side(s).
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the padding **l**eft +
		 * the padding **r**ight.
		 * @returns {number}      The padding of the sides passed added together.
		 */
		getPadding? (side: string): number;
		/** 
		 * Returns an object defining the area of this Element which can be passed to
		 * [Ext.util.Positionable.setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                [asRegion] If true an [Ext.util.Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) will be returned
		 * @returns {object|Ext.util.Region} 
		 * box An object in the following format:
		 * 
		 *    {
		 *        left: &lt;Element's X position&gt;,
		 *        top: &lt;Element's Y position&gt;,
		 *        width: &lt;Element's width&gt;,
		 *        height: &lt;Element's height&gt;,
		 *        bottom: &lt;Element's lower bound&gt;,
		 *        right: &lt;Element's rightmost bound&gt;
		 *    }
		 * 
		 * The returned object may also be addressed as an Array where index 0 contains
		 * the X position and index 1 contains the Y position. So the result may also be
		 * used for [setXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setXY)
		 */
		getPageBox? (asRegion?: boolean): object | Ext.util.Region;
		/** 
		 * Returns a region object that defines the area of this element.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getRegion? (): Ext.util.Region;
		/** 
		 * Gets the right X coordinate of the element (element X position + element width)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getRight? (local: boolean): number;
		/** 
		 * Returns the current scroll position of the element.
		 * @method
		 * @public (method)
		 * @returns {object} 
		 * An object containing the scroll position in the format
		 * `{left: (scrollLeft), top: (scrollTop)}`
		 */
		getScroll? (): object;
		/** 
		 * Gets the left scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The left scroll position
		 */
		getScrollLeft? (): number;
		/** 
		 * Gets the Scroller instance of the first parent that has one.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getScrollParent? (): void;
		/** 
		 * Gets the top scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The top scroll position
		 */
		getScrollTop? (): number;
		/** 
		 * Returns the size of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentSize] `true` to get the width/size minus borders and padding.
		 * @returns {object}                An object containing the element's size:
		 */
		getSize? (contentSize?: boolean): object;
		/** 
		 * Returns a named style property based on computed/currentStyle (primary) and
		 * inline-style if primary is not available.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} property
		 * The style property (or multiple property names
		 * in an array) whose value is returned.
		 * @param   {boolean}         [inline] if `true` only inline styles will be returned.
		 * @returns {string|object}   
		 * The current value of the style property for this element
		 * (or a hash of named style values if multiple property arguments are requested).
		 */
		getStyle? (property: string | string[], inline?: boolean): string | object;
		/** 
		 * Returns the width in pixels of the passed text, or the width of the text in this Element.
		 * @method
		 * @public (method)
		 * @param   {string} text  The text to measure. Defaults to the innerHTML of the element.
		 * @param   {number} [min] The minumum value to return.
		 * @param   {number} [max] The maximum value to return.
		 * @returns {number}       The text width in pixels.
		 */
		getTextWidth? (text: string, min?: number, max?: number): number;
		/** 
		 * Gets the top Y coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getTop? (local: boolean): number;
		/** 
		 * Returns the value of the `value` attribute.
		 * @method
		 * @public (method)
		 * @param   {boolean}       asNumber `true` to parse the value as a number.
		 * @returns {string|number}          
		 */
		getValue? (asNumber: boolean): string | number;
		/** 
		 * Returns the **content** region of this element. That is the region within the borders
		 * and padding.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" member data.
		 */
		getViewRegion? (): Ext.util.Region;
		/** 
		 * Returns the dimensions of the element available to lay content out in.  For
		 * most elements this is the clientHeight/clientWidth.  If the element is
		 * the document/document.body the window's innerHeight/innerWidth is returned
		 * 
		 * If the element (or any ancestor element) has CSS style `display: none`, the
		 * dimensions will be zero.
		 * @method
		 * @public (method)
		 * @returns {object}  Object describing width and height.
		 */
		getViewSize? (): object;
		/** 
		 * Returns the offset width of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentWidth] `true` to get the width minus borders and padding.
		 * @returns {number}                 The element's width.
		 */
		getWidth? (contentWidth?: boolean): number;
		/** 
		 * Gets element X position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getX? (): number;
		/** 
		 * Gets element X and Y positions in page coordinates
		 * @method
		 * @public (method)
		 * @returns {any[]}  [x, y]
		 */
		getXY? (): any[];
		/** 
		 * Gets element Y position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getY? (): number;
		/** 
		 * Returns this element's z-index
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getZIndex? (): number;
		/** 
		 * Checks if the specified CSS class exists on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string}  name The CSS class to check for.
		 * @returns {boolean}      `true` if the class exists, else `false`.
		 */
		hasCls? (name: string): boolean;
		/** 
		 * Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
		 * indicates whether the event needs firing or not.
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to check for
		 * @returns {boolean}           `true` if the event is being listened for or bubbles, else `false`
		 */
		hasListener? (eventName: string): boolean;
		/** 
		 * Hide this element - Uses display mode to determine whether to use "display",
		 * "visibility", or "offsets". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  this
		 */
		hide? (): Ext.dom.Fly;
		hide? (): Ext.dom.Element;
		/** 
		 * Inserts this element after the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to insert after.
		 * The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}           This element.
		 */
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Fly;
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Inserts this element before the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element before which this element will be inserted.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}           This element.
		 */
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Fly;
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Inserts (or creates) an element as the first child of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config to create and insert
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_).
		 */
		insertFirst? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Inserts an html fragment into this element
		 * @method
		 * @public (method)
		 * @param   {string}                      where
		 * Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
		 * See [Ext.dom.Helper.insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml) for details.
		 * @param   {string}                      html       The HTML fragment
		 * @param   {boolean}                     [returnEl] True to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}            The inserted node (or nearest related if more than 1 inserted)
		 */
		insertHtml? (where: string, html: string, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object|any[]} el
		 * The id, element to insert or a DomHelper config
		 * to create and insert _or_ an array of any of those.
		 * @param   {string}                                          [where]     'before' or 'after'
		 * @param   {boolean}                                         [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}                     
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_). If an array is passed, the last
		 * inserted element is returned.
		 */
		insertSibling? (el: string | HTMLElement | Ext.dom.Element | object | any[], where?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns `true` if this element matches the passed simple selector
		 * (e.g. 'div.some-class' or 'span:first-child').
		 * @method
		 * @public (method)
		 * @param   {Function|string} selector
		 * The simple selector to test or a function which is passed
		 * candidate nodes, and should return `true` for nodes which match.
		 * @returns {boolean}                  `true` if this element matches the selector, else `false`.
		 */
		is? (selector: ExtGlobalFunction | string): boolean;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element or id of the element
		 * to search for in this elements descendants.
		 * @returns {boolean}                               
		 */
		isAncestor? (el: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Determines if this element is a descendant of the passed in Element.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		isDescendent? (): void;
		/** 
		 * Returns true if this element is scrollable.
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		isScrollable? (): boolean;
		/** 
		 * Checks if the current value of a style is equal to a given value.
		 * @method
		 * @public (method)
		 * @param   {string}  style property whose value is returned.
		 * @param   {string}  value to check against.
		 * @returns {boolean}       `true` for when the current value equals the given value.
		 */
		isStyle? (style: string, value: string): boolean;
		/** 
		 * Checks if all events, or a specific event, is suspended.
		 * @method
		 * @public (method)
		 * @param   {string}  [event] The name of the specific event to check
		 * @returns {boolean}         `true` if events are suspended
		 */
		isSuspended? (event?: string): boolean;
		/** 
		 * Returns `true` if the value of the given property is visually transparent. This
		 * may be due to a 'transparent' style value or an rgba value with 0 in the alpha
		 * component.
		 * @method
		 * @public (method)
		 * @param   {string}  prop The style property whose value is to be tested.
		 * @returns {boolean}      `true` if the style property is visually transparent.
		 */
		isTransparent? (prop: string): boolean;
		/** 
		 * Checks whether the element is currently visible using both visibility and display properties.
		 * @method
		 * @public (method)
		 * @param   {boolean} [deep]
		 * True to walk the dom and see if parent elements are hidden.
		 * If false, the function only checks the visibility of the element itself and it may return
		 * `true` even though a parent is not visible.
		 * @returns {boolean}        `true` if the element is currently visible, else `false`
		 */
		isVisible? (deep?: boolean): boolean;
		/** 
		 * Gets the last child, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The last child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		last? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Shorthand for [addManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		mon? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Move the element relative to its current position.
		 * @method
		 * @public (method)
		 * @param   {string} direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number} distance  How far to move the element in pixels
		 * @returns {void}             
		 */
		move? (direction: string, distance: number): void;
		/** 
		 * Shorthand for [removeManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		mun? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Gets the next sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The next sibling [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _asDom_ is _true_).  Or null if no match is found.
		 */
		next? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends an after-event handler.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Appends a before-event handler.  Returning `false` from the handler will stop the event.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Gets the parent node for this element, optionally chaining up trying to match a selector
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find a parent node that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] True to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The parent node ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		parent? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Initializes positioning on this element. If a desired position is not passed,
		 * it will make the the element positioned relative IF it is not already positioned.
		 * @method
		 * @public (method)
		 * @param   {string} [pos]    Positioning to use "relative", "absolute" or "fixed"
		 * @param   {number} [zIndex] The zIndex to apply
		 * @param   {number} [x]      Set the page X position
		 * @param   {number} [y]      Set the page Y position
		 * @returns {void}            
		 */
		position? (pos?: string, zIndex?: number, x?: number, y?: number): void;
		/** 
		 * Gets the previous sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The previous sibling ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		prev? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		purgeAllListeners? (): void;
		/** 
		 * Selects child nodes based on the passed CSS selector.
		 * Delegates to document.querySelectorAll. More information can be found at
		 * [http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)
		 * 
		 * All selectors, attribute filters and pseudos below can be combined infinitely
		 * in any order. For example `div.foo:nth-child(odd)[@foo=bar].bar:first` would be
		 * a perfectly valid selector.
		 * 
		 * ## Element Selectors:
		 * 
		 * - * any element
		 * - E an element with the tag E
		 * - E F All descendant elements of E that have the tag F
		 * - E > F or E/F all direct children elements of E that have the tag F
		 * - E + F all elements with the tag F that are immediately preceded by an element with the tag E
		 * - E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
		 * 
		 * ## Attribute Selectors:
		 * 
		 * The use of  and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
		 * 
		 * - E[foo] has an attribute "foo"
		 * - E[foo=bar] has an attribute "foo" that equals "bar"
		 * - E[foo^=bar] has an attribute "foo" that starts with "bar"
		 * - E[foo$=bar] has an attribute "foo" that ends with "bar"
		 * - E[foo*=bar] has an attribute "foo" that contains the substring "bar"
		 * - E[foo%=2] has an attribute "foo" that is evenly divisible by 2
		 * - E[foo!=bar] has an attribute "foo" that does not equal "bar"
		 * 
		 * ## Pseudo Classes:
		 * 
		 * - E:first-child E is the first child of its parent
		 * - E:last-child E is the last child of its parent
		 * - E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
		 * - E:nth-child(odd) E is an odd child of its parent
		 * - E:nth-child(even) E is an even child of its parent
		 * - E:only-child E is the only child of its parent
		 * - E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
		 * - E:first the first E in the resultset
		 * - E:last the last E in the resultset
		 * - E:nth(n) the nth E in the resultset (1 based)
		 * - E:odd shortcut for :nth-child(odd)
		 * - E:even shortcut for :nth-child(even)
		 * - E:not(S) an E element that does not match simple selector S
		 * - E:has(S) an E element that has a descendant that matches simple selector S
		 * - E:next(S) an E element whose next sibling matches simple selector S
		 * - E:prev(S) an E element whose previous sibling matches simple selector S
		 * - E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\
		 * 
		 * ## CSS Value Selectors:
		 * 
		 * - E{display=none} CSS value "display" that equals "none"
		 * - E{display^=none} CSS value "display" that starts with "none"
		 * - E{display$=none} CSS value "display" that ends with "none"
		 * - E{display*=none} CSS value "display" that contains the substring "none"
		 * - E{display%=2} CSS value "display" that is evenly divisible by 2
		 * - E{display!=none} CSS value "display" that does not equal "none"
		 * @method
		 * @public (method)
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements (
		 * HTMLElement or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _asDom_ is _false_) that match the selector.<br/>
		 * If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}             className The CSS class to add, or an array of classes.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}           this
		 */
		radioCls? (className: string | string[]): Ext.dom.Fly;
		radioCls? (className: string | string[]): Ext.dom.Element;
		/** 
		 * Relays selected events from the specified Observable as if the events were fired by `this`.
		 * 
		 * For example if you are extending Grid, you might decide to forward some events from store.
		 * So you can do this inside your initComponent:
		 * 
		 *    this.relayEvents(this.getStore(), ['load']);
		 * 
		 * The grid instance will then have an observable 'load' event which will be passed
		 * the parameters of the store's load event and any function fired with the grid's
		 * load event would have access to the grid using the this keyword (unless the event
		 * is handled by a controller's control/listen event listener in which case 'this'
		 * will be the controller rather than the grid).
		 * @method
		 * @public (method)
		 * @param   {object}          origin   The Observable whose events this object is to relay.
		 * @param   {string[]|object} events
		 * Array of event names to relay or an Object with key/value
		 * pairs translating to ActualEventName/NewEventName respectively. For example:
		 *     this.relayEvents(this, {add:'push', remove:'pop'});
		 * 
		 * Would now redispatch the add event of this as a push event and the remove event as a pop event.
		 * @param   {string}          [prefix]
		 * A common prefix to prepend to the event names. For example:
		 * 
		 *    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
		 * @returns {object}          
		 * A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:
		 * 
		 *    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Can be undone by calling
		 * 
		 *    Ext.destroy(this.storeRelayers);
		 * 
		 * or
		 *     this.store.relayers.destroy();
		 */
		relayEvents? (origin: object, events: string[] | object, prefix?: string): object;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		remove? (): void;
		/** 
		 * Alias for [unAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAfterListener? (): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAllListeners? (): void;
		/** 
		 * Alias for [unBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeBeforeListener? (): void;
		/** 
		 * Removes the given CSS class(es) from this Element.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} names
		 * The CSS classes to remove separated by space,
		 * or an array of classes
		 * @param   {string}          [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}          [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * return {[Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)} this
		 * @returns {void}                     
		 */
		removeCls? (names: string | string[], prefix?: string, suffix?: string): void;
		/** 
		 * @mixed
		 * @method
		 * Removes an event handler.
		 * @public (method)
		 * @private (property)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 * @type {object}
		 */
		removeListener?: ((eventName: string, fn: ExtGlobalFunction, scope?: object) => void) | object | any;
		/** 
		 * Removes listeners that were added by the [mon](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-mon) method.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		removeManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Forces the browser to repaint this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  this
		 */
		repaint? (): Ext.dom.Fly;
		repaint? (): Ext.dom.Element;
		/** 
		 * Replaces the passed element with this element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to replace.
		 * The id of the node, a DOM Node or an existing Element.
		 * @param   {boolean}                            [destroy]
		 * `false` to prevent destruction of the replaced
		 * element
		 * @returns {Ext.dom.Fly|Ext.dom.Element}                  This element
		 */
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.Fly;
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.Element;
		/** 
		 * Replaces a CSS class on the element with another.
		 * If the old name does not exist, the new name will simply be added.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                      oldName  The CSS class to replace.
		 * @param   {string}                      newName  The replacement CSS class.
		 * @param   {string}                      [prefix] Prefix to prepend to each class to be replaced.
		 * @param   {string}                      [suffix] Suffix to append to each class to be replaced.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}          this
		 */
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.Fly;
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.Element;
		/** 
		 * Replaces this element with the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The new element (id of the
		 * node, a DOM Node or an existing Element) or a DomHelper config of an element to create
		 * @returns {Ext.dom.Element}                              This element
		 */
		replaceWith? (el: string | HTMLElement | Ext.dom.Element | object): Ext.dom.Element;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		resumeEvent? (): void;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to resume.
		 * @returns {void}                
		 */
		resumeEvent? (...eventName: string[]): void;
		/** 
		 * Resumes firing events (see [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents)).
		 * 
		 * If events were suspended using the `queueSuspended` parameter, then all events fired
		 * during event suspension will be sent to any listeners now.
		 * @method
		 * @public (method)
		 * @param   {boolean} [discardQueue]
		 * `true` to prevent any previously queued events from firing
		 * while we were suspended. See [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents).
		 * @returns {void}                   
		 */
		resumeEvents? (discardQueue?: boolean): void;
		/** 
		 * Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
		 * within this element's scrollable range.
		 * @method
		 * @public (method)
		 * @param   {string}         direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number}         distance  How far to scroll the element in pixels
		 * @param   {boolean|object} [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {boolean}        
		 * Returns true if a scroll was triggered or false if the element
		 * was scrolled as far as it could go.
		 */
		scroll? (direction: string, distance: number, animate?: boolean | object): boolean;
		/** 
		 * Scrolls this element by the passed delta values, optionally animating.
		 * 
		 * All of the following are equivalent:
		 * 
		 *     el.scrollBy(10, 10, true);
		 *     el.scrollBy([10, 10], true);
		 *     el.scrollBy({ x: 10, y: 10 }, true);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|number[]|object}      deltaX
		 * Either the x delta, an Array specifying x and y deltas or
		 * an object with "x" and "y" properties.
		 * @param   {number|boolean|object}       deltaY  Either the y delta, or an animate flag or config object.
		 * @param   {boolean|object}              animate Animate flag/config object if the delta values were passed separately.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}         this
		 */
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.Fly;
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.Element;
		/** 
		 * Scrolls this element into view within the passed container.
		 * 
		 *      Ext.create('Ext.data.Store', {
		 *          storeId:'simpsonsStore',
		 *          fields:['name', 'email', 'phone'],
		 *          data:{'items':[
		 *              { 'name': 'Lisa',  "email":"lisa@simpsons.com",  "phone":"555-111-1224"  },
		 *              { 'name': 'Bart',  "email":"bart@simpsons.com",  "phone":"555-222-1234" },
		 *              { 'name': 'Homer', "email":"homer@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Marge', "email":"marge@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Milhouse', "email":"milhouse@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Willy', "email":"willy@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Skinner', "email":"skinner@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Hank (last row)', "email":"hank@simpsons.com", "phone":"555-222-1254"  }
		 *          ]},
		 *          proxy: {
		 *              type: 'memory',
		 *              reader: {
		 *                  type: 'json',
		 *                  rootProperty: 'items'
		 *              }
		 *          }
		 *      });
		 *    
		 *      var grid = Ext.create('Ext.grid.Panel', {
		 *          title: 'Simpsons',
		 *          store: Ext.data.StoreManager.lookup('simpsonsStore'),
		 *          columns: [
		 *              { text: 'Name',  dataIndex: 'name', width: 125 },
		 *              { text: 'Email', dataIndex: 'email', flex: 1 },
		 *              { text: 'Phone', dataIndex: 'phone' }
		 *          ],
		 *          height: 190,
		 *          width: 400,
		 *          renderTo: Ext.getBody(),
		 *          tbar: [{
		 *              text: 'Scroll row 7 into view',
		 *              handler: function () {
		 *                  var view = grid.getView();
		 *    
		 *                  Ext.get(view.getRow(7)).scrollIntoView(view.getEl(), null, true);
		 *              }
		 *          }]
		 *      });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.Element} [container]
		 * The container element
		 * to scroll.  Should be a string (id), dom node, or [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @param   {boolean}                        [hscroll]   False to disable horizontal scroll.
		 * @param   {boolean|object}                 [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @param   {boolean}                        [highlight] true to highlight the element when it is in view.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}                this
		 */
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.Fly;
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.Element;
		/** 
		 * Scrolls this element the specified scroll point. It does NOT do bounds checking so
		 * if you scroll to a weird value it will try to do it. For auto bounds checking, use [scroll](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#event-scroll).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                      side      Either "left" for scrollLeft values or "top" for scrollTop values.
		 * @param   {number}                      value     The new scroll value
		 * @param   {boolean|object}              [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {Ext.dom.Fly|Ext.dom.Element}           this
		 */
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.Fly;
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.Element;
		/** 
		 * Selects descendant elements of this element based on the passed CSS selector to
		 * enable [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement[]}                                  selector  The CSS selector or an array of elements
		 * @param   {boolean}                                               composite
		 * Return a CompositeElement as opposed to a
		 * CompositeElementLite. Defaults to false.
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}           
		 */
		select? (selector: string | HTMLElement[], composite: boolean): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Selects a single descendant element of this element using a CSS selector
		 * (see [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector The selector query
		 * @param   {boolean}                     [asDom]  `false` to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element} 
		 * The DOM element (or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if
		 * _asDom_ is _false_) which matched the selector.
		 */
		selectNode? (selector: string, asDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Sets the passed attributes as attributes of this element (a `style` attribute
		 * can be a string, object or function).
		 * 
		 * Example component (though any [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) would suffice):
		 * 
		 *    var cmp = Ext.create({
		 *        xtype: 'component',
		 *        html: 'test',
		 *        renderTo: Ext.getBody()
		 *    });
		 * 
		 * Once the component is rendered, you can fetch a reference to its outer
		 * element to use `set`:
		 * 
		 *    cmp.el.set({
		 *        foo: 'bar'
		 *    });
		 * 
		 * This sets an attribute on the element of **foo="bar"**:
		 * 
		 *    &lt;div class="x-component x-component-default x-border-box" id="component-1009" foo="bar"&gt;test&lt;/div&gt;
		 * 
		 * To remove the attribute pass a value of **undefined**:
		 * 
		 *    cmp.el.set({
		 *        foo: undefined
		 *    });
		 * 
		 * **Note:**
		 * 
		 * - You cannot remove an attribute by passing `undefined` when the
		 *   `expandos` param is set to **false**.
		 * - Passing an attribute of `style` results in the request being handed off to
		 *   [applyStyles](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-applyStyles).
		 * - Passing an attribute of `cls` results in the element's dom's
		 *   [className](http://www.w3schools.com/jsref/prop_html_classname.asp) property
		 *   being set directly.  For additional flexibility when setting / removing
		 *   classes see:
		 *   <ul>
		 *   <li>[addCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-addCls)
		 * - [removeCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-removeCls)
		 * - [replaceCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-replaceCls)
		 * - [setCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setCls)
		 * - [toggleCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggleCls)
		 * 
		 * </li>
		 * </ul>
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                      attributes The object with the attributes.
		 * @param   {boolean}                     [useSet]
		 * `false` to override the default `setAttribute`
		 * to use [expandos](http://help.dottoro.com/ljvovanq.php).
		 * @returns {Ext.dom.Fly|Ext.dom.Element}            this
		 */
		set? (attributes: object, useSet?: boolean): Ext.dom.Fly;
		set? (attributes: object, useSet?: boolean): Ext.dom.Element;
		/** 
		 * Sets the element's CSS bottom style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               bottom
		 * Number of pixels or CSS string value to set as
		 * the bottom CSS property value
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		setBottom? (bottom: number | string): Ext.dom.Fly;
		setBottom? (bottom: number | string): Ext.dom.Element;
		/** 
		 * Sets the element's box.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                      box The box to fill {x, y, width, height}
		 * @returns {Ext.dom.Fly|Ext.dom.Element}     this
		 */
		setBox? (box: object): Ext.dom.Fly;
		setBox? (box: object): Ext.dom.Element;
		/** 
		 * Sets the specified CSS class on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} className The CSS class to set on this element.
		 * @returns {void}                      
		 */
		setCls? (className: string | string[]): void;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                        name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                               [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Fly;
		setConfig? (name: string | object, value?: object): Ext.dom.Element;
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Sets the CSS display property. Uses originalDisplay if the specified value is a
		 * boolean true.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean|string}              value
		 * Boolean value to display the element using its
		 * default display, or a string to set the display directly.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}       this
		 */
		setDisplayed? (value: boolean | string): Ext.dom.Fly;
		setDisplayed? (value: boolean | string): Ext.dom.Element;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                      html The new HTML.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}      this
		 */
		setHTML? (html: string): Ext.dom.Fly;
		setHTML? (html: string): Ext.dom.Element;
		/** 
		 * Set the height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               height The new height.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		setHeight? (height: number | string): Ext.dom.Fly;
		setHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                      html The new HTML.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}      this
		 */
		setHtml? (html: string): Ext.dom.Fly;
		setHtml? (html: string): Ext.dom.Element;
		/** 
		 * Sets the element's left position directly using CSS style
		 * (instead of [setX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setX)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               left
		 * Number of pixels or CSS string value to
		 * set as the left CSS property value
		 * @returns {Ext.dom.Fly|Ext.dom.Element}      this
		 */
		setLeft? (left: number | string): Ext.dom.Fly;
		setLeft? (left: number | string): Ext.dom.Element;
		/** 
		 * An alias for [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).  In
		 * versions prior to 5.1, [listeners](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#cfg-listeners) had a generated setter which could
		 * be called to add listeners.  In 5.1 the listeners config is not processed
		 * using the config system and has no generated setter, so this method is
		 * provided for backward compatibility.  The preferred way of adding listeners
		 * is to use the [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method.
		 * @method
		 * @public (method)
		 * @param   {object} listeners The listeners
		 * @returns {void}             
		 */
		setListeners? (listeners: object): void;
		/** 
		 * Sets the local x coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalX), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      x The x coordinate. A value of `null` sets the left style to 'auto'.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}   this
		 */
		setLocalX? (x: number): Ext.dom.Fly;
		setLocalX? (x: number): Ext.dom.Element;
		/** 
		 * Sets the local x and y coordinates of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalXY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|any[]}                x
		 * The x coordinate or an array containing [x, y]. A value of
		 * `null` sets the left style to 'auto'
		 * @param   {number}                      [y]
		 * The y coordinate, required if x is not an array. A value of
		 * `null` sets the top style to 'auto'
		 * @returns {Ext.dom.Fly|Ext.dom.Element}     this
		 */
		setLocalXY? (x: number | any[], y?: number): Ext.dom.Fly;
		setLocalXY? (x: number | any[], y?: number): Ext.dom.Element;
		/** 
		 * Sets the local y coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      y The y coordinate. A value of `null` sets the top style to 'auto'.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}   this
		 */
		setLocalY? (y: number): Ext.dom.Fly;
		setLocalY? (y: number): Ext.dom.Element;
		/** 
		 * Set the maximum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               height The new maximum height.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		setMaxHeight? (height: number | string): Ext.dom.Fly;
		setMaxHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Set the maximum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               width The new maximum width.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}       this
		 */
		setMaxWidth? (width: number | string): Ext.dom.Fly;
		setMaxWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Set the minimum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               height The new minimum height.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		setMinHeight? (height: number | string): Ext.dom.Fly;
		setMinHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Set the minimum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               width The new minimum width.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}       this
		 */
		setMinWidth? (width: number | string): Ext.dom.Fly;
		setMinWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Set the opacity of the element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
		 * @returns {Ext.dom.Fly|Ext.dom.Element}         this
		 */
		setOpacity? (opacity: number): Ext.dom.Fly;
		setOpacity? (opacity: number): Ext.dom.Element;
		/** 
		 * Sets the element's CSS right style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               right
		 * Number of pixels or CSS string value to
		 * set as the right CSS property value
		 * @returns {Ext.dom.Fly|Ext.dom.Element}       this
		 */
		setRight? (right: number | string): Ext.dom.Fly;
		setRight? (right: number | string): Ext.dom.Element;
		/** 
		 * Sets the left scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      left The left scroll position
		 * @returns {Ext.dom.Fly|Ext.dom.Element}      this
		 */
		setScrollLeft? (left: number): Ext.dom.Fly;
		setScrollLeft? (left: number): Ext.dom.Element;
		/** 
		 * Sets the top scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      top The top scroll position
		 * @returns {Ext.dom.Fly|Ext.dom.Element}     this
		 */
		setScrollTop? (top: number): Ext.dom.Fly;
		setScrollTop? (top: number): Ext.dom.Element;
		/** 
		 * Set the size of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               width
		 * The new width. This may be one of:
		 * 
		 * - A Number specifying the new width in pixels.
		 * - A String used to set the CSS width style. Animation may **not** be used.
		 * - A size object in the format `{width: widthValue, height: heightValue}`.
		 * @param   {number|string}               height
		 * The new height. This may be one of:
		 * 
		 * - A Number specifying the new height in pixels.
		 * - A String used to set the CSS height style. Animation may **not** be used.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		setSize? (width: number | string, height: number | string): Ext.dom.Fly;
		setSize? (width: number | string, height: number | string): Ext.dom.Element;
		/** 
		 * Wrapper for setting style properties, also takes single object parameter of
		 * multiple styles.
		 * 
		 * Styles should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    // two-param syntax
		 *    el.setStyle('color', 'white');
		 *    
		 *    // single-param syntax
		 *    el.setStyle({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}               property
		 * The style property to be set, or an object of
		 * multiple styles.
		 * @param   {string}                      [value]
		 * The value to apply to the given property, or null if
		 * an object was passed.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}          this
		 */
		setStyle? (property: string | object, value?: string): Ext.dom.Fly;
		setStyle? (property: string | object, value?: string): Ext.dom.Element;
		/** 
		 * Sets the element's top position directly using CSS style
		 * (instead of [setY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setY)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               top
		 * Number of pixels or CSS string value to
		 * set as the top CSS property value
		 * @returns {Ext.dom.Fly|Ext.dom.Element}     this
		 */
		setTop? (top: number | string): Ext.dom.Fly;
		setTop? (top: number | string): Ext.dom.Element;
		/** 
		 * Sets the element's top and left positions directly using CSS style.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		setTopLeft? (): void;
		/** 
		 * Use this to change the visibility mode between [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY),
		 * [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY), [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS), or [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.dom.Element.VISIBILITY|Ext.dom.Element.DISPLAY|Ext.dom.Element.OFFSETS|Ext.dom.Element.CLIP|number} mode
		 * The method by which the element will be [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-hide) (you can
		 * also use the [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible) or [toggle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggle) method to toggle element
		 * visibility).
		 * @returns {Ext.dom.Fly|Ext.dom.Element}                                                                                 this
		 */
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.Fly;
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.Element;
		/** 
		 * Sets the visibility of the element based on the current visibility mode. Use
		 * [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode) to switch between the following visibility modes:
		 * 
		 * - [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY) (the default)
		 * - [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY)
		 * - [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS)
		 * - [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP)
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean}                     visible Whether the element is visible.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}         this
		 */
		setVisible? (visible: boolean): Ext.dom.Fly;
		setVisible? (visible: boolean): Ext.dom.Element;
		/** 
		 * Set the width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}               width The new width.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}       this
		 */
		setWidth? (width: number | string): Ext.dom.Fly;
		setWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level x coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      x
		 * @returns {Ext.dom.Fly|Ext.dom.Element}   this
		 */
		setX? (x: number): Ext.dom.Fly;
		setX? (x: number): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level x and y coordinates
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number[]}                    xy
		 * @returns {Ext.dom.Fly|Ext.dom.Element}    this
		 */
		setXY? (xy: number[]): Ext.dom.Fly;
		setXY? (xy: number[]): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level y coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      y
		 * @returns {Ext.dom.Fly|Ext.dom.Element}   this
		 */
		setY? (y: number): Ext.dom.Fly;
		setY? (y: number): Ext.dom.Element;
		/** 
		 * Sets the z-index of this Element and synchronizes the z-index of shadow and/or
		 * shim if present.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                      zindex The new z-index to set
		 * @returns {Ext.dom.Fly|Ext.dom.Element}        this
		 */
		setZIndex? (zindex: number): Ext.dom.Fly;
		setZIndex? (zindex: number): Ext.dom.Element;
		/** 
		 * Show this element - Uses display mode to determine whether to use "display",
		 * "visibility", "offsets", or "clip". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  this
		 */
		show? (): Ext.dom.Fly;
		show? (): Ext.dom.Element;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		suspendEvent? (): void;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to suspend.
		 * @returns {void}                
		 */
		suspendEvent? (...eventName: string[]): void;
		/** 
		 * Suspends the firing of all events. (see [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents))
		 * @method
		 * @public (method)
		 * @param   {boolean} queueSuspended
		 * `true` to queue up suspended events to be fired
		 * after the [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) call instead of discarding all suspended events.
		 * @returns {void}                   
		 */
		suspendEvents? (queueSuspended: boolean): void;
		/** 
		 * Toggles the element's visibility, depending on visibility mode.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  this
		 */
		toggle? (): Ext.dom.Fly;
		toggle? (): Ext.dom.Element;
		/** 
		 * Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                      className The CSS class to toggle.
		 * @param   {boolean}                     [state]
		 * If specified as `true`, causes the class to be added. If specified as `false`, causes
		 * the class to be removed.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}           this
		 */
		toggleCls? (className: string, state?: boolean): Ext.dom.Fly;
		toggleCls? (className: string, state?: boolean): Ext.dom.Element;
		/** 
		 * Translates the passed page coordinates into left/top css values for the element
		 * @method
		 * @public (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with left and top properties. e.g.
		 * {left: (value), top: (value)}
		 */
		translatePoints? (x: number | any[], y?: number): object;
		/** 
		 * Shorthand for [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		un? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * .
		 * Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 'div.some-class' or 'span:first-child').
		 * This is a shortcut for findParentNode() that always returns an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector    The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element that causes the upward
		 * traversal to stop and is **not** considered for inclusion as the result.
		 * (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnDom] True to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The matching DOM node (or HTMLElement if
		 * _returnDom_ is _true_).  Or null if no match was found.
		 */
		up? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                      html The new HTML.
		 * @returns {Ext.dom.Fly|Ext.dom.Element}      this
		 */
		update? (html: string): Ext.dom.Fly;
		update? (html: string): Ext.dom.Element;
		/** 
		 * Creates and wraps this element with another element
		 * @method
		 * @public (method)
		 * @param   {object}                      [config]    DomHelper element config object for the wrapper element or null for an empty div
		 * @param   {boolean}                     [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {string}                      [selector]  A CSS selector to select a descendant node within the created element to use as the wrapping element.
		 * @returns {HTMLElement|Ext.dom.Element}             The newly created wrapper element
		 */
		wrap? (config?: object, returnDom?: boolean, selector?: string): HTMLElement | Ext.dom.Element;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                               config
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}        this
		 */
		initConfig? (config: object): Ext.dom.Fly;
		initConfig? (config: object): Ext.dom.Element;
		initConfig? (config: object): Ext.Base;
		/** 
		 * Gets the default scope for firing late bound events (string names with
		 * no scope attached) at runtime.
		 * @method
		 * @protected (method)
		 * @param   {object} [defaultScope] The default scope to return if none is found.
		 * @returns {object}                The default event scope
		 */
		resolveListenerScope? (defaultScope?: object): object;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Fly.Statics|Ext.dom.Element.Statics|Ext.Base.Statics}  
		 */
		statics? (): Ext.dom.Fly.Statics;
		statics? (): Ext.dom.Element.Statics;
		statics? (): Ext.Base.Statics;
		/** 
		 * Adds declarative listeners as nested arrays of listener objects.
		 * @method
		 * @private (method)
		 * @param   {any[]}   listeners
		 * @returns {boolean}           `true` if any listeners were added
		 */
		_addDeclaredListeners? (listeners: any[]): boolean;
		/** 
		 * Returns the publisher for a given event
		 * @method
		 * @private (method)
		 * @param   {string}                        eventName
		 * @returns {Ext.event.publisher.Publisher}           
		 */
		_getPublisher? (eventName: string): Ext.event.publisher.Publisher;
		/** 
		 * This method applies a versioned, deprecation declaration to this class. This
		 * is typically called by the `deprecated` config.
		 * @method
		 * @private (method)
		 * @param   {object} deprecations
		 * @returns {void}                
		 */
		addDeprecations? (deprecations: object): void;
		/** 
		 * Returns the fractional portion of this element's measurement in the given dimension.
		 * (IE9+ only)
		 * @method
		 * @private (method)
		 * @param   {object} dimension
		 * @returns {number}           
		 */
		adjustDirect2DDimension? (dimension: object): number;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xy
		 * @param   {object} parent
		 * @returns {void}          
		 */
		adjustForConstraints? (xy: object, parent: object): void;
		/** 
		 * Stub implementation called after positioning.
		 * May be implemented in subclasses. Component has an implementation.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		afterSetPosition? (): void;
		/** 
		 * Calculates x,y coordinates specified by the anchor position on the element, adding
		 * extraX and extraY values.
		 * @method
		 * @private (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {number}   [extraX] value to be added to the x coordinate
		 * @param   {number}   [extraY] value to be added to the y coordinate
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		calculateAnchorXY? (anchor?: string, extraX?: number, extraY?: number, size?: object): number[];
		/** 
		 * Calculates the new [x,y] position to move this Positionable into a constrain region.
		 * 
		 * By default, this Positionable is constrained to be within the container it was added to, or the element it was
		 * rendered to.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * An alternative constraint may be passed.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|Ext.util.Region} [constrainTo]
		 * The Element or [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html)
		 * into which this Component is to be constrained. Defaults to the element into which this Positionable
		 * was rendered, or this Component's {@link [Ext.Component.constrainTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#cfg-constrainTo).
		 * @param   {number[]}                                           [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to coerce into constraints instead of using this Positionable's current position.
		 * @param   {boolean}                                            [local]            The proposedPosition is local _(relative to floatParent if a floating Component)_
		 * @param   {number[]}                                           [proposedSize]
		 * A proposed `[width, height]` size to use when calculating
		 * constraints instead of using this Positionable's current size.
		 * @returns {number[]}                                           
		 * **If** the element _needs_ to be translated, the new `[X, Y]` position within
		 * constraints if possible, giving priority to keeping the top and left edge in the constrain region.
		 * Otherwise, `false`.
		 */
		calculateConstrainedPosition? (constrainTo?: string | HTMLElement | Ext.dom.Element | Ext.util.Region, proposedPosition?: number[], local?: boolean, proposedSize?: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} o
		 * @param   {object} fn
		 * @param   {object} scope
		 * @returns {void}         
		 */
		captureArgs? (o: object, fn: object, scope: object): void;
		/** 
		 * Removes the element from the cache and removes listeners.
		 * Used for cleaning up orphaned elements after they have been removed from the dom.
		 * Similar to [destroy](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy) except it assumes the element has already been
		 * removed from the dom.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		collect? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} box
		 * @returns {void}       
		 */
		constrainBox? (box: object): void;
		/** 
		 * Creates an event handling function which re-fires the event from this object as the passed event name.
		 * @method
		 * @private (method)
		 * @param   {string}   newName    The name under which to re-fire the passed parameters.
		 * @param   {any[]}    [beginEnd] The caller can specify on which indices to slice.
		 * @returns {Function}            
		 */
		createRelayer? (newName: string, beginEnd?: any[]): ExtGlobalFunction;
		/** 
		 * Disables the shadow element created by [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShadow? (): void;
		/** 
		 * Disables the shim element created by [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShim? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchContextMenu? (): void;
		/** 
		 * Disables native scrolling of an overflowing element using touch-screen input
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchScroll? (): void;
		/** 
		 * Continue to fire event.
		 * @method
		 * @private (method)
		 * @param   {string}  eventName
		 * @param   {any[]}   args
		 * @param   {boolean} bubbles
		 * @returns {void}              
		 */
		doFireEvent? (eventName: string, args: any[], bubbles: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} element
		 * @returns {void}           
		 */
		doReplaceWith? (element: object): void;
		/** 
		 * A scrollIntoView implementation for scrollIntoView/rtlScrollIntoView to call
		 * after current scrollX has been determined.
		 * @method
		 * @private (method)
		 * @param   {object} container
		 * @param   {object} hscroll
		 * @param   {object} animate
		 * @param   {object} highlight
		 * @param   {object} getScrollX
		 * @param   {object} scrollTo
		 * @returns {void}              
		 */
		doScrollIntoView? (container: object, hscroll: object, animate: object, highlight: object, getScrollX: object, scrollTo: object): void;
		/** 
		 * Enables an iframe shim for this element to keep windowed objects from
		 * showing through.  The position, size, and visibility of the shim will be
		 * automatically synchronized as the position, size, and visibility of this
		 * Element are changed.
		 * @method
		 * @private (method)
		 * @param   {object}          [options] Configuration options for the shim
		 * @returns {Ext.dom.Element}           The new shim element
		 */
		enableShim? (options?: object): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates of an element specified by the anchor position on the
		 * element.
		 * @method
		 * @private (method)
		 * @param   {Ext.dom.Element} el       The element
		 * @param   {string}          [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}         [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}          [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}                 [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorToXY? (el: Ext.dom.Element, anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the size of the element's borders and padding.
		 * @method
		 * @private (method)
		 * @returns {object} 
		 * an object with the following numeric properties
		 * 
		 * - beforeX
		 * - afterX
		 * - beforeY
		 * - afterY
		 */
		getBorderPadding? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getBorders? (): void;
		/** 
		 * Gets the bubbling parent for an Observable
		 * @method
		 * @private (method)
		 * @returns {Ext.util.Observable}  The bubble parent. null is returned if no bubble target exists
		 */
		getBubbleParent? (): Ext.util.Observable;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getCurrentConfig? (): void;
		/** 
		 * Gets the x and y coordinates needed for scrolling an element into view within
		 * a given container.  These coordinates translate into the scrollLeft and scrollTop
		 * positions that will need to be set on an ancestor of the element in order to make
		 * this element visible within its container.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.Element} container The container
		 * @param   {number}                         scrollX   The container's current scroll position on the x axis
		 * @param   {number}                         scrollY   The container's current scroll position on the y axis
		 * @returns {object}                                   An object with "x" and "y" properties
		 */
		getScrollIntoViewXY? (container: string | HTMLElement | Ext.Element, scrollX: number, scrollY: number): object;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} config
		 * @returns {void}          
		 */
		hasConfig? (config: object): void;
		/** 
		 * Adds a "destroyable" object to an internal list of objects that will be destroyed
		 * when this instance is destroyed (via [`destroy`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-destroy)).
		 * @method
		 * @private (method)
		 * @param   {string} name
		 * @param   {object} value
		 * @returns {object}       The `value` passed.
		 */
		link? (name: string, value: object): object;
		/** 
		 * Mask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		maskIframes? (): void;
		/** 
		 * Prepares a given class for observable instances. This method is called when a
		 * class derives from this class or uses this class as a mixin.
		 * @method
		 * @private (method)
		 * @param   {Function}            T     The class constructor to prepare.
		 * @param   {Ext.util.Observable} mixin The mixin if being used as a mixin.
		 * @param   {object}              data  The raw class creation data if this is an extend.
		 * @returns {void}                      
		 */
		prepareClass? (T: ExtGlobalFunction, mixin: Ext.util.Observable, data: object): void;
		/** 
		 * Remove a single managed listener item
		 * @method
		 * @private (method)
		 * @param   {boolean} isClear         True if this is being called during a clear
		 * @param   {object}  managedListener
		 * The managed listener item
		 * See removeManagedListener for other args
		 * @returns {void}                    
		 */
		removeManagedListenerItem? (isClear: boolean, managedListener: object): void;
		/** 
		 * Converts local coordinates into page-level coordinates
		 * @method
		 * @private (method)
		 * @param   {number[]} xy The local x and y coordinates
		 * @returns {number[]}    The translated coordinates
		 */
		reverseTranslateXY? (xy: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} child
		 * @param   {object} hscroll
		 * @returns {void}           
		 */
		scrollChildIntoView? (child: object, hscroll: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} isVisible
		 * @returns {void}             
		 */
		setVisibility? (isVisible: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {string}  firstClass
		 * @param   {string}  secondClass
		 * @param   {boolean} flag
		 * @param   {string}  prefix
		 * @returns {any}                 
		 */
		swapCls? (firstClass: string, secondClass: string, flag: boolean, prefix: string): any;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		syncUnderlays? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		synchronize? (): void;
		/** 
		 * Translates the passed page coordinates into x and y css values for the element
		 * @method
		 * @private (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with x and y properties. e.g.
		 * {x: (value), y: (value)}
		 */
		translateXY? (x: number | any[], y?: number): object;
		/** 
		 * Destroys a given set of [`linked`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-link) objects. This is only needed if
		 * the linked object is being destroyed before this instance.
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {string[]}                             names The names of the linked objects to destroy.
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}       this
		 */
		unlink? (names: string[]): Ext.dom.Fly;
		unlink? (names: string[]): Ext.dom.Element;
		unlink? (names: string[]): Ext.Base;
		/** 
		 * Unmask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		unmaskIframes? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  this
		 */
		unwrap? (): Ext.dom.Fly;
		unwrap? (): Ext.dom.Element;
	}
	/** 
	 * Garbage collector for [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  Automatically cleans up Elements
	 * that are no longer in the dom, but were not properly destroyed using
	 * [destroy()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy).  Recommended practice is for Components to
	 * clean up their own elements, but the GarbageCollector runs on regularly scheduled
	 * intervals to attempt to clean up orphaned Elements that may have slipped through the cracks.
	 * @private (class)
	 * @singleton (definition)
	 */
	interface GarbageCollector extends Ext.Base {}
	/** 
	 * [Ext.dom.Helper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html)
	 * The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or
	 * using HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.
	 * 
	 * ## DomHelper element specification object
	 * 
	 * A specification object is used when creating elements. Attributes of this object are assumed to be element
	 * attributes, except for 4 special attributes:
	 * 
	 * - **tag**: The tag name of the element
	 * - **children (or cn)**: An array of the same kind of element definition objects to be created and appended. These
	 *   can be nested as deep as you want.
	 * - **cls**: The class attribute of the element. This will end up being either the "class" attribute on a HTML
	 *   fragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.
	 * - **html**: The innerHTML for the element
	 * 
	 * ## Insertion methods
	 * 
	 * Commonly used insertion methods:
	 * 
	 * - [append](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-append)
	 * - [insertBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertBefore)
	 * - [insertAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertAfter)
	 * - [overwrite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-overwrite)
	 * - [insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml)
	 * 
	 * ## Example
	 * 
	 * This is an example, where an unordered list with 3 children items is appended to an existing element with id
	 * 'my-div':
	 * 
	 *    var dh = Ext.DomHelper; // create shorthand alias
	 *    // specification object
	 *    var spec = {
	 *        id: 'my-ul',
	 *        tag: 'ul',
	 *        cls: 'my-list',
	 *        // append children after creating
	 *        children: [     // may also specify 'cn' instead of 'children'
	 *            {tag: 'li', id: 'item0', html: 'List Item 0'},
	 *            {tag: 'li', id: 'item1', html: 'List Item 1'},
	 *            {tag: 'li', id: 'item2', html: 'List Item 2'}
	 *        ]
	 *    };
	 *    var list = dh.append(
	 *        'my-div', // the context element 'my-div' can either be the id or the actual node
	 *        spec      // the specification object
	 *    );
	 * 
	 * Element creation specification parameters in this class may also be passed as an Array of specification objects.
	 * This can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add
	 * more list items to the example above:
	 * 
	 *    dh.append('my-ul', [
	 *        {tag: 'li', id: 'item3', html: 'List Item 3'},
	 *        {tag: 'li', id: 'item4', html: 'List Item 4'}
	 *    ]);
	 * 
	 * ## Templating
	 * 
	 * The real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns
	 * a Template object which can be used over and over to insert new elements. Revisiting the example above, we could
	 * utilize templating this time:
	 * 
	 *    // create the node
	 *    var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
	 *    // get template
	 *    var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
	 *    
	 *    for(var i = 0; i &lt; 5; i++){
	 *        tpl.append(list, i); // use template to append to the actual node
	 *    }
	 * 
	 * An example using a template:
	 * 
	 *    var html = '"{0}" href="{1}" class="nav"&gt;{2}';
	 *    
	 *    var tpl = new Ext.DomHelper.createTemplate(html);
	 *    tpl.append('blog-roll', ['link1', 'http://www.foxmulder.com/', "Fox's Site"]);
	 *    tpl.append('blog-roll', ['link2', 'http://www.danascully.org/', "Scully's Site"]);
	 * 
	 * The same example using named parameters:
	 * 
	 *    var html = '"{id}" href="{url}" class="nav"&gt;{text}';
	 *    
	 *    var tpl = new Ext.DomHelper.createTemplate(html);
	 *    tpl.append('blog-roll', {
	 *        id: 'link1',
	 *        url: 'http://www.danascully.org/',
	 *        text: "Scully's Site"
	 *    });
	 *    tpl.append('blog-roll', {
	 *        id: 'link2',
	 *        url: 'http://www.foxmulder.com/',
	 *        text: "Fox's Site"
	 *    });
	 * 
	 * ## Compiling Templates
	 * 
	 * Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM
	 * elements using the same template, you can increase performance even further by "compiling" the template. The way
	 * "compile()" works is the template is parsed and broken up at the different variable points and a dynamic function is
	 * created and eval'ed. The generated function performs string concatenation of these parts and the passed variables
	 * instead of using regular expressions.
	 * 
	 *    var html = '"{id}" href="{url}" class="nav"&gt;{text}';
	 *    
	 *    var tpl = new Ext.DomHelper.createTemplate(html);
	 *    tpl.compile();
	 *    
	 *    // ... use template like normal
	 * 
	 * ## Performance Boost
	 * 
	 * DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can
	 * significantly boost performance.
	 * 
	 * Element creation specification parameters may also be strings which are used as innerHTML.
	 * @singleton (definition)
	 */
	interface Helper extends Ext.Base {
		/** 
		 * Creates new DOM element(s) and appends them to el.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el              The context element
		 * @param   {object|string}                      o               The DOM object spec (and children) or raw HTML blob
		 * @param   {boolean}                            [returnElement] true to return a [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}                        The new node
		 */
		append? (el: string | HTMLElement | Ext.dom.Element, o: object | string, returnElement?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Applies a style specification to an element.
		 * 
		 * Styles in object form should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el'),
		 *        dh = Ext.dom.Helper;
		 *    
		 *    dh.applyStyles(el, 'color: white;');
		 *    
		 *    dh.applyStyles(el, {
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 *    
		 *    dh.applyStyles(el, function () {
		 *        if (name.initialConfig.html === 'Phineas Flynn') {
		 *            return 'font-style: italic;';
		 *            // OR return { fontStyle: 'italic' };
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el     The element to apply styles to
		 * @param   {Function|string|object}             styles
		 * A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or
		 * a function which returns such a specification.
		 * @returns {void}                                      
		 */
		applyStyles? (el: string | HTMLElement | Ext.dom.Element, styles: ExtGlobalFunction | string | object): void;
		/** 
		 * Creates new DOM element(s) without inserting them to the document.
		 * @method
		 * @public (method)
		 * @param   {object|string} o The DOM object spec (and children) or raw HTML blob
		 * @returns {HTMLElement}     The new uninserted node
		 */
		createDom? (o: object | string): HTMLElement;
		/** 
		 * Alias for [markup](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-markup).
		 * @method
		 * @public (method)
		 * @param   {object} spec
		 * @returns {void}        
		 */
		createHtml? (spec: object): void;
		/** 
		 * Creates a new [Ext.Template](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Template.html) from the DOM object spec.
		 * @method
		 * @public (method)
		 * @param   {object}       o The DOM object spec (and children)
		 * @returns {Ext.Template}   The new template
		 */
		createTemplate? (o: object): Ext.Template;
		/** 
		 * Converts the styles from the given object to text. The styles are CSS style names
		 * with their associated value.
		 * 
		 * The basic form of this method returns a string:
		 * 
		 *     var s = Ext.DomHelper.generateStyles({
		 *         backgroundColor: 'red'
		 *     });
		 *    
		 *     // s = 'background-color:red;'
		 * 
		 * Alternatively, this method can append to an output array.
		 * 
		 *     var buf = [];
		 *    
		 *     ...
		 *    
		 *     Ext.DomHelper.generateStyles({
		 *         backgroundColor: 'red'
		 *     }, buf);
		 * 
		 * In this case, the style text is pushed on to the array and the array is returned.
		 * @method
		 * @public (method)
		 * @param   {object}          styles   The object describing the styles.
		 * @param   {string[]}        [buffer] The output buffer.
		 * @param   {boolean}         [encode]
		 * `true` to [Ext.String.htmlEncode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.String.html#method-htmlEncode) property values if they
		 * are going to be inserted as HTML attributes.
		 * @returns {string|string[]} 
		 * If buffer is passed, it is returned. Otherwise the style
		 * string is returned.
		 */
		generateStyles? (styles: object, buffer?: string[], encode?: boolean): string | string[];
		/** 
		 * Creates new DOM element(s) and inserts them after el.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el              The context element
		 * @param   {object}                             o               The DOM object spec (and children)
		 * @param   {boolean}                            [returnElement] true to return a [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}                        The new node
		 */
		insertAfter? (el: string | HTMLElement | Ext.dom.Element, o: object, returnElement?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Creates new DOM element(s) and inserts them before el.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el              The context element
		 * @param   {object|string}                      o               The DOM object spec (and children) or raw HTML blob
		 * @param   {boolean}                            [returnElement] true to return a [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}                        The new node
		 */
		insertBefore? (el: string | HTMLElement | Ext.dom.Element, o: object | string, returnElement?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Creates new DOM element(s) and inserts them as the first child of el.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el              The context element
		 * @param   {object|string}                      o               The DOM object spec (and children) or raw HTML blob
		 * @param   {boolean}                            [returnElement] true to return a [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}                        The new node
		 */
		insertFirst? (el: string | HTMLElement | Ext.dom.Element, o: object | string, returnElement?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Inserts an HTML fragment into the DOM.
		 * @method
		 * @public (method)
		 * @param   {string}           where
		 * Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.
		 * 
		 * For example take the following HTML: `&lt;div&gt;Contents&lt;/div&gt;`
		 * 
		 * Using different `where` values inserts element to the following places:
		 * 
		 * - beforeBegin: `&lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt;`
		 * - afterBegin: `&lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt;`
		 * - beforeEnd: `&lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt;`
		 * - afterEnd: `&lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;`
		 * @param   {HTMLElement|Text} el    The context element
		 * @param   {string}           html  The HTML fragment
		 * @returns {HTMLElement}            The new node
		 */
		insertHtml? (where: string, el: HTMLElement | Text, html: string): HTMLElement;
		/** 
		 * Returns the markup for the passed Element(s) config.
		 * @method
		 * @public (method)
		 * @param   {object} spec The DOM object spec (and children).
		 * @returns {string}      
		 */
		markup? (spec: object): string;
		/** 
		 * Creates new DOM element(s) and overwrites the contents of el with them.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el              The context element
		 * @param   {object|string}                      o               The DOM object spec (and children) or raw HTML blob
		 * @param   {boolean}                            [returnElement] true to return an [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}                        The new node
		 */
		overwrite? (el: string | HTMLElement | Ext.dom.Element, o: object | string, returnElement?: boolean): HTMLElement | Ext.dom.Element;
	}
	/** 
	 * [Ext.dom.Layer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html)
	 * An extended [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object that supports a shadow and shim
	 * @deprecated
	 */
	class Layer extends Ext.Element {
		/** 
		 * Get the reference to the current class from which this object was instantiated. Unlike [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics),
		 * `this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-statics)
		 * for a detailed comparison
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            alert(this.self.speciesName); // dependent on 'this'
		 *        },
		 *    
		 *        clone: function() {
		 *            return new this.self();
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *        statics: {
		 *            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                     // alerts 'Cat'
		 *    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'
		 * 
		 * @property
		 * @protected (property)
		 * @default Ext.Base
		 * @type {Ext.dom.Layer.Statics}
		 */
		self?: Ext.dom.Layer.Statics | Ext.dom.Element.Statics | Ext.Base.Statics;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members    The members to add to this class.
		 * @param   {boolean}                                [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}            
		 */
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Layer;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		static addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}         this
		 */
		static addStatics? (members: object): typeof Ext.dom.Layer;
		static addStatics? (members: object): typeof Ext.dom.Element;
		static addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		static createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		static fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		static fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		static get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		static getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		static getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		static getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		static getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		static getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		static getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		static getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		static getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		static getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		static normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		static override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		static parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		static parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		static query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		static select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		static serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		static unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		static create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		static create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		static callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		static _onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static _onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		static addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}         
		 */
		static addInheritableStatics? (members: object): typeof Ext.dom.Layer;
		static addInheritableStatics? (members: object): typeof Ext.dom.Element;
		static addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 name
		 * @param   {object}                                 member
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}        
		 */
		static addMember? (name: object, member: object): typeof Ext.dom.Layer;
		static addMember? (name: object, member: object): typeof Ext.dom.Element;
		static addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		static addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		static borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  
		 */
		static detach? (): typeof Ext.dom.Layer;
		static detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		static extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		static getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		static mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 fn
		 * @param   {object}                                 scope
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}       
		 */
		static onExtended? (fn: object, scope: object): typeof Ext.dom.Layer;
		static onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		static onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		static triggerExtended? (): void;
		/** 
		 * Creates new Layer.
		 * @method
		 * @public (method)
		 * @param   {object}             [config]     An object with config options.
		 * @param   {string|HTMLElement} [existingEl]
		 * Uses an existing DOM element.
		 * If the element is not found it creates it.
		 */
		constructor (config?: object, existingEl?: string | HTMLElement);
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.dom.Element.constructor](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-constructor).
		 * Creates new Element directly by passing an id or the HTMLElement.  This
		 * constructor should not be called directly.  Always use [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)
		 * or [Ext#fly()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) instead.
		 * 
		 * In older versions of Ext JS and Sencha Touch this constructor checked to see if
		 * there was already an instance of this element in the cache and if so, returned
		 * the same instance. As of version 5 this behavior has been removed in order to
		 * avoid a redundant cache lookup since the most common path is for the Element
		 * constructor to be called from [Ext.get()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get), which has already
		 * checked for a cache entry.
		 * 
		 * Correct way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or retrieving it from the cache):
		 * 
		 *    var el = Ext.get('foo'); // by id
		 *    
		 *    var el = Ext.get(document.getElementById('foo')); // by DOM reference
		 * 
		 * Incorrect way of creating a new [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * 
		 *    var el = new Ext.dom.Element('foo');
		 * 
		 * For quick and easy access to [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods use a flyweight:
		 * 
		 *    Ext.fly('foo').addCls('foo-hovered');
		 * 
		 * This simply attaches the DOM node with id='foo' to the global flyweight Element
		 * instance to avoid allocating an extra [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance.  If, however,
		 * the Element instance has already been cached by a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)(),
		 * then [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)() will return the cached Element instance.  For more info see
		 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly).
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement} element
		 */
		constructor (element: string | HTMLElement);
		/** 
		 * Alias for [onAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addAfterListener? (): void;
		/** 
		 * Alias for [onBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-onBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		addBeforeListener? (): void;
		/** 
		 * Adds the given CSS class(es) to this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}               names
		 * The CSS classes to add separated by space,
		 * or an array of classes
		 * @param   {string}                        [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}                        [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}          this
		 */
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.Layer;
		addCls? (names: string | string[], prefix?: string, suffix?: string): Ext.dom.Element;
		/** 
		 * The addManagedListener method is used when some object (call it "A") is listening
		 * to an event on another observable object ("B") and you want to remove that listener
		 * from "B" when "A" is destroyed. This is not an issue when "B" is destroyed because
		 * all of its listeners will be removed at that time.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Foo', {
		 *        extend: 'Ext.Component',
		 *    
		 *        initComponent: function () {
		 *            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);
		 *            this.callParent();
		 *        }
		 *    });
		 * 
		 * As you can see, when an instance of Foo is destroyed, it ensures that the 'show'
		 * listener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.
		 * 
		 * As of version 5.1 it is no longer necessary to use this method in most cases because
		 * listeners are automatically managed if the scope object provided to
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) is an Observable instance.
		 * However, if the observable instance and scope are not the same object you
		 * still need to use `mon` or `addManagedListener` if you want the listener to be
		 * managed.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		addManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Aligns the element with another element relative to the specified anchor points. If
		 * the other element is the document it aligns it to the viewport. The position
		 * parameter is optional, and can be specified in any one of the following formats:
		 * 
		 * - **Blank**: Defaults to aligning the element's top-left corner to the target's
		 *   bottom-left corner ("tl-bl").
		 * - **One anchor (deprecated)**: The passed anchor position is used as the target
		 *   element's anchor point.  The element being aligned will position its top-left
		 *   corner (tl) to that point. _This method has been deprecated in favor of the newer
		 *   two anchor syntax below_.
		 * - **Two anchors**: If two values from the table below are passed separated by a dash,
		 *   the first value is used as the element's anchor point, and the second value is
		 *   used as the target's anchor point.
		 * 
		 * In addition to the anchor points, the position parameter also supports the "?"
		 * character. If "?" is passed at the end of the position string, the element will
		 * attempt to align as specified, but the position will be adjusted to constrain to
		 * the viewport if necessary. Note that the element being aligned might be swapped to
		 * align to a different position than that specified in order to enforce the viewport
		 * constraints. Following are all of the supported anchor positions:
		 * 
		 *    Value  Description
		 *    -----  -----------------------------
		 *    tl     The top left corner (default)
		 *    t      The center of the top edge
		 *    tr     The top right corner
		 *    l      The center of the left edge
		 *    c      In the center of the element
		 *    r      The center of the right edge
		 *    bl     The bottom left corner
		 *    b      The center of the bottom edge
		 *    br     The bottom right corner
		 * 
		 * Example Usage:
		 * 
		 *    // align el to other-el using the default positioning
		 *    // ("tl-bl", non-constrained)
		 *    el.alignTo("other-el");
		 *    
		 *    // align the top left corner of el with the top right corner of other-el
		 *    // (constrained to viewport)
		 *    el.alignTo("other-el", "tr?");
		 *    
		 *    // align the bottom right corner of el with the center left edge of other-el
		 *    el.alignTo("other-el", "br-l?");
		 *    
		 *    // align the center of el with the bottom left corner of other-el and
		 *    // adjust the x position by -6 pixels (and the y position by 0)
		 *    el.alignTo("other-el", "c-bl", [-6, 0]);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]
		 * Offset the positioning by [x, y]
		 * Element animation config object
		 * @returns {Ext.dom.Layer|Ext.dom.Element}                       this
		 */
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.Layer;
		alignTo? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): Ext.dom.Element;
		/** 
		 * Appends the passed element(s) to this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).
		 */
		appendChild? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends this element to the passed element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The new parent element.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         This element.
		 */
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Layer;
		appendTo? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * More flexible version of [setStyle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setStyle) for setting style properties.
		 * 
		 * Styles in object form should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    el.applyStyles('color: white;');
		 *    
		 *    el.applyStyles({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 *    
		 *    el.applyStyles(function () {
		 *        if (name.initialConfig.html === 'Phineas Flynn') {
		 *            return 'font-style: italic;';
		 *            // OR return { fontStyle: 'italic' };
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Function|string|object}        styles
		 * A style specification string, e.g. "width:100px", or object in the form `{width:"100px"}`, or
		 * a function which returns such a specification.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.Layer;
		applyStyles? (styles: ExtGlobalFunction | string | object): Ext.dom.Element;
		/** 
		 * Tries to blur the element. Any exceptions are caught and ignored.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  this
		 */
		blur? (): Ext.dom.Layer;
		blur? (): Ext.dom.Element;
		/** 
		 * When an element is moved around in the DOM, or is hidden using `display:none`, it loses layout, and therefore
		 * all scroll positions of all descendant elements are lost.
		 * 
		 * This function caches them, and returns a function, which when run will restore the cached positions.
		 * In the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:
		 * 
		 *    var restoreScroll = myPanel.el.cacheScrollValues();
		 *    myOtherContainer.add(myPanel);
		 *    restoreScroll();
		 * 
		 * @method
		 * @public (method)
		 * @returns {Function} 
		 * A function which will restore all descendant elements of this Element to their scroll
		 * positions recorded when this function was executed. Be aware that the returned function is a closure which has
		 * captured the scope of `cacheScrollValues`, so take care to dereference it as soon as not needed - if is it is a `var`
		 * it will drop out of scope, and the reference will be freed.
		 */
		cacheScrollValues? (): ExtGlobalFunction;
		/** 
		 * Centers the Element in either the viewport, or another Element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} centerIn
		 * element in
		 * which to center the element.
		 * @returns {Ext.dom.Element}                             This element
		 */
		center? (centerIn: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Selects a single _direct_ child based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		child? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearListeners? (): void;
		/** 
		 * Removes all managed listeners for this object.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		clearManagedListeners? (): void;
		/** 
		 * Clone this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                     [deep]      `true` if the children of the node should also be cloned.
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @returns {HTMLElement|Ext.dom.Element}             The newly cloned [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`).
		 */
		clone? (deep?: boolean, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element, or is
		 * the element.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} element
		 * The dom element,
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html), or id (string) of the dom element to check.
		 * @returns {boolean}                                    True if this element is an ancestor of el or the el itself, else false
		 */
		contains? (element: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Creates the passed DomHelper config and appends it to this element or optionally
		 * inserts it before the passed child element.
		 * @method
		 * @public (method)
		 * @param   {object}                      config
		 * DomHelper element config object.  If no tag is specified
		 * (e.g., {tag:'input'}) then a div will be automatically generated with the specified
		 * attributes.
		 * @param   {HTMLElement}                 [insertBefore] a child element of this element
		 * @param   {boolean}                     [returnDom]
		 * true to return the dom node instead of creating
		 * an Element
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_)
		 */
		createChild? (config: object, insertBefore?: HTMLElement, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Translates an element using CSS 3 in 2D.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		cssTranslate? (): void;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector    The CSS selector
		 * @param   {boolean}                     [returnDom] `true` to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}             The child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or DOM node if `returnDom` is `true`)
		 */
		down? (selector: string, returnDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if
		 * present. There is no implementation in the Observable base class.
		 * 
		 * This is commonly used by Ext.Components to bubble events to owner Containers.
		 * See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget). The default implementation in [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) returns the
		 * Component's immediate owner. But if a known target is required, this can be overridden to access the
		 * required target more quickly.
		 * 
		 * Example:
		 * 
		 *    Ext.define('Ext.overrides.form.field.Base', {
		 *        override: 'Ext.form.field.Base',
		 *    
		 *        //  Add functionality to Field's initComponent to enable the change event to bubble
		 *        initComponent: function () {
		 *            this.callParent();
		 *            this.enableBubble('change');
		 *        }
		 *    });
		 *    
		 *    var myForm = Ext.create('Ext.form.Panel', {
		 *        title: 'User Details',
		 *        items: [{
		 *            ...
		 *        }],
		 *        listeners: {
		 *            change: function() {
		 *                // Title goes red if form has been modified.
		 *                myForm.header.setStyle('color', 'red');
		 *            }
		 *        }
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @param   {string|string[]} eventNames The event name to bubble, or an Array of event names.
		 * @returns {void}                       
		 */
		enableBubble? (eventNames: string | string[]): void;
		/** 
		 * Looks at this node and then at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParent? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Looks at parent nodes for a match of the passed simple selector.
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector   The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element which causes the upward traversal to stop
		 * and is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnEl] True to return a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object instead of DOM node
		 * @returns {HTMLElement|Ext.dom.Element}               
		 * The matching DOM node (or
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _returnEl_ is _true_).  Or null if no match was found.
		 */
		findParentNode? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * By default, the action function will be executed after any "before" event handlers
		 * (as specified using the `order` option of
		 * [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)), but before any other
		 * handlers are fired.  This gives the "before" handlers an opportunity to
		 * cancel the event by returning `false`, and prevent the action function from
		 * being called.
		 * 
		 * The action can also be configured to run after normal handlers, but before any "after"
		 * handlers (as specified using the `order` event option) by passing `'after'`
		 * as the `order` parameter.  This configuration gives any event handlers except
		 * for "after" handlers the opportunity to cancel the event and prevent the action
		 * function from being called.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {any[]}    args      Arguments to pass to handlers and to the action function.
		 * @param   {Function} fn        The action function.
		 * @param   {object}   [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {object}   [options]
		 * Event options for the action function.  Accepts any
		 * of the options of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * @param   {string}   [order]
		 * The order to call the action function relative
		 * too the event handlers (`'before'` or `'after'`).  Note that this option is
		 * simply used to sort the action function relative to the event handlers by "priority".
		 * An order of `'before'` is equivalent to a priority of `99.5`, while an order of
		 * `'after'` is equivalent to a priority of `-99.5`.  See the `priority` option
		 * of [`addListener`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) for more details.
		 * @returns {void}               
		 */
		fireAction? (eventName: string, args: any[], fn: ExtGlobalFunction, scope?: object, options?: object, order?: string): void;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to fire.
		 * @returns {boolean}           returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string): boolean;
		/** 
		 * Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed
		 * to [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)).
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}    eventName The name of the event to fire.
		 * @param   {...object} args      Variable number of parameters are passed to handlers.
		 * @returns {boolean}             returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEvent? (eventName: string, ...args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameter list.
		 * 
		 * An event may be set to bubble up an Observable parent hierarchy (See [Ext.Component.getBubbleTarget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-getBubbleTarget)) by
		 * calling [enableBubble](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-enableBubble).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The name of the event to fire.
		 * @param   {object[]} args      An array of parameters which are passed to handlers.
		 * @returns {boolean}            returns false if any of the handlers return false otherwise it returns true.
		 */
		fireEventArgs? (eventName: string, args: object[]): boolean;
		/** 
		 * Fires the specified event with the passed parameters and executes a function (action).
		 * Evented Actions will automatically dispatch a 'before' event passing. This event will
		 * be given a special controller that allows for pausing/resuming of the event flow.
		 * 
		 * By pausing the controller the updater and events will not run until resumed. Pausing,
		 * however, will not stop the processing of any other before events.
		 * @method
		 * @public (method)
		 * @param   {string}          eventName The name of the event to fire.
		 * @param   {any[]}           args      Arguments to pass to handlers and to the action function.
		 * @param   {Function|string} fn        The action function.
		 * @param   {object}          [scope]
		 * The scope (`this` reference) in which the handler function is
		 * executed. **If omitted, defaults to the object which fired the event.**
		 * @param   {any[]|boolean}   [fnArgs]
		 * Optional arguments for the action `fn`. If not
		 * given, the normal `args` will be used to call `fn`. If `false` is passed, the
		 * `args` are used but if the first argument is this instance it will be removed
		 * from the args passed to the action function.
		 * @returns {void}                      
		 */
		fireEventedAction? (eventName: string, args: any[], fn: ExtGlobalFunction | string, scope?: object, fnArgs?: any[] | boolean): void;
		/** 
		 * Gets the first child, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}             The first child or null
		 */
		first? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Try to focus the element either immediately or after a timeout
		 * if `defer` argument is specified.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        [defer] Milliseconds to defer the focus
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         this
		 */
		focus? (defer?: number): Ext.dom.Layer;
		focus? (defer?: number): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates to align this element with another element. See
		 * [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for more info on the supported position values.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} element
		 * The Positionable,
		 * HTMLElement, or id of the element to align to.
		 * @param   {string}                                   [position] The position to align to
		 * @param   {number[]}                                 [offsets]  Offset the positioning by [x, y]
		 * @returns {number[]}                                            [x, y]
		 */
		getAlignToXY? (element: Ext.util.Positionable | HTMLElement | string, position?: string, offsets?: number[]): number[];
		/** 
		 * Gets the x,y coordinates specified by the anchor position on the element.
		 * @method
		 * @public (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}  [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorXY? (anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the value of an attribute from the element's underlying DOM node.
		 * @method
		 * @public (method)
		 * @param   {string} name        The attribute name.
		 * @param   {string} [namespace] The namespace in which to look for the attribute.
		 * @returns {string}             The attribute value.
		 */
		getAttribute? (name: string, namespace?: string): string;
		/** 
		 * Returns an object containing a map of all attributes of this element's DOM node.
		 * @method
		 * @public (method)
		 * @returns {object}  Key/value pairs of attribute names and their values.
		 */
		getAttributes? (): object;
		/** 
		 * Gets the width of the border(s) for the specified side(s)
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the border **l**eft
		 * width + the border **r**ight width.
		 * @returns {number}      The width of the sides passed added together
		 */
		getBorderWidth? (side: string): number;
		/** 
		 * Gets the bottom Y coordinate of the element (element Y position + element height)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinate
		 * @returns {number}        
		 */
		getBottom? (local: boolean): number;
		/** 
		 * Return an object defining the area of this Element which can be passed to
		 * [setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentBox]
		 * If true a box for the content of the element is
		 * returned.
		 * @param   {boolean} [local]
		 * If true the element's left and top relative to its
		 * `offsetParent` are returned instead of page x/y.
		 * @returns {object}               An object in the format
		 */
		getBox? (contentBox?: boolean, local?: boolean): object;
		/** 
		 * Returns a child element of this element given its `id`.
		 * @method
		 * @public (method)
		 * @param   {string}                      id      The id of the desired child element.
		 * @param   {boolean}                     [asDom]
		 * True to return the DOM element, false to return a
		 * wrapped Element object.
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The child element (or HTMLElement if
		 * _asDom_ is _true_).  Or null if no match was found.
		 */
		getById? (id: string, asDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns a region object that defines the client area of this element.
		 * 
		 * That is, the area _within_ any scrollbars.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getClientRegion? (): Ext.util.Region;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the content region of this element for purposes of constraining floating
		 * children.  That is the region within the borders and scrollbars, but not within the padding.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getConstrainRegion? (): void;
		/** 
		 * Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best
		 * attempt to constrain within the passed constraint. Returns `false` if the element
		 * does not need to be moved.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * The constraint may either be an existing element into which the element is to be
		 * constrained, or a [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) into which this element is to be
		 * constrained.
		 * 
		 * By default, any extra shadow around the element is **not** included in the constrain calculations - the edges
		 * of the element are used as the element bounds. To constrain the shadow within the constrain region, set the
		 * `constrainShadow` property on this element to `true`.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string|Ext.util.Region} [constrainTo]
		 * The
		 * Positionable, HTMLElement, element id, or Region into which the element is to be
		 * constrained.
		 * @param   {number[]}                                                 [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to produce a vector for instead of using the element's current position
		 * @param   {number[]}                                                 [proposedSize]
		 * A proposed `[width, height]` size to constrain
		 * instead of using the element's current size
		 * @returns {number[]|boolean}                                         
		 * **If** the element _needs_ to be translated, an `[X, Y]`
		 * vector by which this element must be translated. Otherwise, `false`.
		 */
		getConstrainVector? (constrainTo?: Ext.util.Positionable | HTMLElement | string | Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]): number[] | boolean;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHTML? (): string;
		/** 
		 * Returns the offset height of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentHeight] `true` to get the height minus borders and padding.
		 * @returns {number}                  The element's height.
		 */
		getHeight? (contentHeight?: boolean): number;
		/** 
		 * Returns the `innerHTML` of an Element or an empty string if the element's
		 * dom no longer exists.
		 * @method
		 * @public (method)
		 * @returns {string}  
		 */
		getHtml? (): string;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Gets the left X coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of
		 * page coordinate
		 * @returns {number}        
		 */
		getLeft? (local: boolean): number;
		/** 
		 * Returns the x coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local x coordinate
		 */
		getLocalX? (): number;
		/** 
		 * Returns the x and y coordinates of this element relative to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number[]}  The local XY position of the element
		 */
		getLocalXY? (): number[];
		/** 
		 * Returns the y coordinate of this element reletive to its `offsetParent`.
		 * @method
		 * @public (method)
		 * @returns {number}  The local y coordinate
		 */
		getLocalY? (): number;
		/** 
		 * Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
		 * then it returns the calculated width of the sides (see [getPadding](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-getPadding)).
		 * @method
		 * @public (method)
		 * @param   {string}        [sides] Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		 * @returns {object|number}         
		 */
		getMargin? (sides?: string): object | number;
		/** 
		 * Returns the offsets of this element from the passed element. The element must both
		 * be part of the DOM tree and not have display:none to have page coordinates.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Positionable|HTMLElement|string} offsetsTo
		 * The Positionable,
		 * HTMLElement, or element id to get get the offsets from.
		 * @returns {number[]}                                           The XY page offsets (e.g. `[100, -200]`)
		 */
		getOffsetsTo? (offsetsTo: Ext.util.Positionable | HTMLElement | string): number[];
		/** 
		 * Retrieves the height of the element account for the top and bottom margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterHeight? (): void;
		/** 
		 * Retrieves the width of the element accounting for the left and right margins.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getOuterWidth? (): void;
		/** 
		 * Gets the width of the padding(s) for the specified side(s).
		 * @method
		 * @public (method)
		 * @param   {string} side
		 * Can be t, l, r, b or any combination of those to add
		 * multiple values. For example, passing `'lr'` would get the padding **l**eft +
		 * the padding **r**ight.
		 * @returns {number}      The padding of the sides passed added together.
		 */
		getPadding? (side: string): number;
		/** 
		 * Returns an object defining the area of this Element which can be passed to
		 * [Ext.util.Positionable.setBox](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-setBox) to set another Element's size/location to match this element.
		 * @method
		 * @public (method)
		 * @param   {boolean}                [asRegion] If true an [Ext.util.Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html) will be returned
		 * @returns {object|Ext.util.Region} 
		 * box An object in the following format:
		 * 
		 *    {
		 *        left: &lt;Element's X position&gt;,
		 *        top: &lt;Element's Y position&gt;,
		 *        width: &lt;Element's width&gt;,
		 *        height: &lt;Element's height&gt;,
		 *        bottom: &lt;Element's lower bound&gt;,
		 *        right: &lt;Element's rightmost bound&gt;
		 *    }
		 * 
		 * The returned object may also be addressed as an Array where index 0 contains
		 * the X position and index 1 contains the Y position. So the result may also be
		 * used for [setXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setXY)
		 */
		getPageBox? (asRegion?: boolean): object | Ext.util.Region;
		/** 
		 * Returns a region object that defines the area of this element.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" properties.
		 */
		getRegion? (): Ext.util.Region;
		/** 
		 * Gets the right X coordinate of the element (element X position + element width)
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getRight? (local: boolean): number;
		/** 
		 * Returns the current scroll position of the element.
		 * @method
		 * @public (method)
		 * @returns {object} 
		 * An object containing the scroll position in the format
		 * `{left: (scrollLeft), top: (scrollTop)}`
		 */
		getScroll? (): object;
		/** 
		 * Gets the left scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The left scroll position
		 */
		getScrollLeft? (): number;
		/** 
		 * Gets the Scroller instance of the first parent that has one.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		getScrollParent? (): void;
		/** 
		 * Gets the top scroll position
		 * @method
		 * @public (method)
		 * @returns {number}  The top scroll position
		 */
		getScrollTop? (): number;
		/** 
		 * Returns the size of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentSize] `true` to get the width/size minus borders and padding.
		 * @returns {object}                An object containing the element's size:
		 */
		getSize? (contentSize?: boolean): object;
		/** 
		 * Returns a named style property based on computed/currentStyle (primary) and
		 * inline-style if primary is not available.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} property
		 * The style property (or multiple property names
		 * in an array) whose value is returned.
		 * @param   {boolean}         [inline] if `true` only inline styles will be returned.
		 * @returns {string|object}   
		 * The current value of the style property for this element
		 * (or a hash of named style values if multiple property arguments are requested).
		 */
		getStyle? (property: string | string[], inline?: boolean): string | object;
		/** 
		 * Returns the width in pixels of the passed text, or the width of the text in this Element.
		 * @method
		 * @public (method)
		 * @param   {string} text  The text to measure. Defaults to the innerHTML of the element.
		 * @param   {number} [min] The minumum value to return.
		 * @param   {number} [max] The maximum value to return.
		 * @returns {number}       The text width in pixels.
		 */
		getTextWidth? (text: string, min?: number, max?: number): number;
		/** 
		 * Gets the top Y coordinate
		 * @method
		 * @public (method)
		 * @param   {boolean} local
		 * True to get the local css position instead of page
		 * coordinates
		 * @returns {number}        
		 */
		getTop? (local: boolean): number;
		/** 
		 * Returns the value of the `value` attribute.
		 * @method
		 * @public (method)
		 * @param   {boolean}       asNumber `true` to parse the value as a number.
		 * @returns {string|number}          
		 */
		getValue? (asNumber: boolean): string | number;
		/** 
		 * Returns the **content** region of this element. That is the region within the borders
		 * and padding.
		 * @method
		 * @public (method)
		 * @returns {Ext.util.Region}  A Region containing "top, left, bottom, right" member data.
		 */
		getViewRegion? (): Ext.util.Region;
		/** 
		 * Returns the dimensions of the element available to lay content out in.  For
		 * most elements this is the clientHeight/clientWidth.  If the element is
		 * the document/document.body the window's innerHeight/innerWidth is returned
		 * 
		 * If the element (or any ancestor element) has CSS style `display: none`, the
		 * dimensions will be zero.
		 * @method
		 * @public (method)
		 * @returns {object}  Object describing width and height.
		 */
		getViewSize? (): object;
		/** 
		 * Returns the offset width of the element.
		 * @method
		 * @public (method)
		 * @param   {boolean} [contentWidth] `true` to get the width minus borders and padding.
		 * @returns {number}                 The element's width.
		 */
		getWidth? (contentWidth?: boolean): number;
		/** 
		 * Gets element X position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getX? (): number;
		/** 
		 * Gets element X and Y positions in page coordinates
		 * @method
		 * @public (method)
		 * @returns {any[]}  [x, y]
		 */
		getXY? (): any[];
		/** 
		 * Gets element Y position in page coordinates
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getY? (): number;
		/** 
		 * Returns this element's z-index
		 * @method
		 * @public (method)
		 * @returns {number}  
		 */
		getZIndex? (): number;
		/** 
		 * Checks if the specified CSS class exists on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string}  name The CSS class to check for.
		 * @returns {boolean}      `true` if the class exists, else `false`.
		 */
		hasCls? (name: string): boolean;
		/** 
		 * Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
		 * indicates whether the event needs firing or not.
		 * @method
		 * @public (method)
		 * @param   {string}  eventName The name of the event to check for
		 * @returns {boolean}           `true` if the event is being listened for or bubbles, else `false`
		 */
		hasListener? (eventName: string): boolean;
		/** 
		 * Hide this element - Uses display mode to determine whether to use "display",
		 * "visibility", or "offsets". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  this
		 */
		hide? (): Ext.dom.Layer;
		hide? (): Ext.dom.Element;
		/** 
		 * Inserts this element after the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to insert after.
		 * The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         This element.
		 */
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Layer;
		insertAfter? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Inserts this element before the passed element in the DOM.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element before which this element will be inserted.
		 * The id of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         This element.
		 */
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Layer;
		insertBefore? (el: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Inserts (or creates) an element as the first child of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The id or element to insert
		 * or a DomHelper config to create and insert
		 * @param   {boolean}                                   [returnDom]
		 * True to return the raw DOM element instead
		 * of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The new child element (or HTMLElement if
		 * _returnDom_ is _true_).
		 */
		insertFirst? (el: string | HTMLElement | Ext.dom.Element | object, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Inserts an html fragment into this element
		 * @method
		 * @public (method)
		 * @param   {string}                      where
		 * Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
		 * See [Ext.dom.Helper.insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml) for details.
		 * @param   {string}                      html       The HTML fragment
		 * @param   {boolean}                     [returnEl] True to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element}            The inserted node (or nearest related if more than 1 inserted)
		 */
		insertHtml? (where: string, html: string, returnEl?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object|any[]} el
		 * The id, element to insert or a DomHelper config
		 * to create and insert _or_ an array of any of those.
		 * @param   {string}                                          [where]     'before' or 'after'
		 * @param   {boolean}                                         [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}                     
		 * The inserted [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_). If an array is passed, the last
		 * inserted element is returned.
		 */
		insertSibling? (el: string | HTMLElement | Ext.dom.Element | object | any[], where?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Returns `true` if this element matches the passed simple selector
		 * (e.g. 'div.some-class' or 'span:first-child').
		 * @method
		 * @public (method)
		 * @param   {Function|string} selector
		 * The simple selector to test or a function which is passed
		 * candidate nodes, and should return `true` for nodes which match.
		 * @returns {boolean}                  `true` if this element matches the selector, else `false`.
		 */
		is? (selector: ExtGlobalFunction | string): boolean;
		/** 
		 * Returns `true` if this element is an ancestor of the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element or id of the element
		 * to search for in this elements descendants.
		 * @returns {boolean}                               
		 */
		isAncestor? (el: string | HTMLElement | Ext.dom.Element): boolean;
		/** 
		 * Determines if this element is a descendant of the passed in Element.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		isDescendent? (): void;
		/** 
		 * Returns true if this element is scrollable.
		 * @method
		 * @public (method)
		 * @returns {boolean}  
		 */
		isScrollable? (): boolean;
		/** 
		 * Checks if the current value of a style is equal to a given value.
		 * @method
		 * @public (method)
		 * @param   {string}  style property whose value is returned.
		 * @param   {string}  value to check against.
		 * @returns {boolean}       `true` for when the current value equals the given value.
		 */
		isStyle? (style: string, value: string): boolean;
		/** 
		 * Checks if all events, or a specific event, is suspended.
		 * @method
		 * @public (method)
		 * @param   {string}  [event] The name of the specific event to check
		 * @returns {boolean}         `true` if events are suspended
		 */
		isSuspended? (event?: string): boolean;
		/** 
		 * Returns `true` if the value of the given property is visually transparent. This
		 * may be due to a 'transparent' style value or an rgba value with 0 in the alpha
		 * component.
		 * @method
		 * @public (method)
		 * @param   {string}  prop The style property whose value is to be tested.
		 * @returns {boolean}      `true` if the style property is visually transparent.
		 */
		isTransparent? (prop: string): boolean;
		/** 
		 * Checks whether the element is currently visible using both visibility and display properties.
		 * @method
		 * @public (method)
		 * @param   {boolean} [deep]
		 * True to walk the dom and see if parent elements are hidden.
		 * If false, the function only checks the visibility of the element itself and it may return
		 * `true` even though a parent is not visible.
		 * @returns {boolean}        `true` if the element is currently visible, else `false`
		 */
		isVisible? (deep?: boolean): boolean;
		/** 
		 * Gets the last child, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The last child [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		last? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Shorthand for [addManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item      The item to which to add a listener/listeners.
		 * @param   {object|string}                       ename     The event name, or an object containing event name properties.
		 * @param   {Function|string}                     [fn]
		 * If the `ename` parameter was an event
		 * name, this is the handler function or the name of a method on the specified
		 * `scope`.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @param   {object}                              [options]
		 * If the `ename` parameter was an event name, this is the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) options.
		 * @returns {object}                              
		 * **Only when the `destroyable` option is specified. **
		 * 
		 *  A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:
		 * 
		 *    this.btnListeners = myButton.mon({
		 *        destroyable: true
		 *        mouseover:   function() { console.log('mouseover'); },
		 *        mouseout:    function() { console.log('mouseout'); },
		 *        click:       function() { console.log('click'); }
		 *    });
		 * 
		 * And when those listeners need to be removed:
		 * 
		 *    Ext.destroy(this.btnListeners);
		 * 
		 * or
		 * 
		 *    this.btnListeners.destroy();
		 * 
		 */
		mon? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction | string, scope?: object, options?: object): object;
		/** 
		 * Move the element relative to its current position.
		 * @method
		 * @public (method)
		 * @param   {string} direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number} distance  How far to move the element in pixels
		 * @returns {void}             
		 */
		move? (direction: string, distance: number): void;
		/** 
		 * Shorthand for [removeManagedListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeManagedListener).
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		mun? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Gets the next sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the next sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The next sibling [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) (or
		 * HTMLElement if _asDom_ is _true_).  Or null if no match is found.
		 */
		next? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Appends an after-event handler.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Appends a before-event handler.  Returning `false` from the handler will stop the event.
		 * 
		 * Same as [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) with `order` set
		 * to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event to listen for.
		 * @param   {Function|string}        fn        The method the event invokes.
		 * @param   {object}                 [scope]   The scope for `fn`.
		 * @param   {object}                 [options] An object containing handler configuration.
		 * @returns {void}                             
		 */
		onBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Gets the parent node for this element, optionally chaining up trying to match a selector
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find a parent node that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] True to return a raw dom node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The parent node ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		parent? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Initializes positioning on this element. If a desired position is not passed,
		 * it will make the the element positioned relative IF it is not already positioned.
		 * @method
		 * @public (method)
		 * @param   {string} [pos]    Positioning to use "relative", "absolute" or "fixed"
		 * @param   {number} [zIndex] The zIndex to apply
		 * @param   {number} [x]      Set the page X position
		 * @param   {number} [y]      Set the page Y position
		 * @returns {void}            
		 */
		position? (pos?: string, zIndex?: number, x?: number, y?: number): void;
		/** 
		 * Gets the previous sibling, skipping text nodes
		 * @method
		 * @public (method)
		 * @param   {string}                      [selector]
		 * Find the previous sibling that matches the passed simple selector.
		 * See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {boolean}                     [returnDom] `true` to return a raw DOM node instead of an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement} 
		 * The previous sibling ([Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) or
		 * HTMLElement if _returnDom_ is _true_).  Or null if no match is found.
		 */
		prev? (selector?: string, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		purgeAllListeners? (): void;
		/** 
		 * Selects child nodes based on the passed CSS selector.
		 * Delegates to document.querySelectorAll. More information can be found at
		 * [http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)
		 * 
		 * All selectors, attribute filters and pseudos below can be combined infinitely
		 * in any order. For example `div.foo:nth-child(odd)[@foo=bar].bar:first` would be
		 * a perfectly valid selector.
		 * 
		 * ## Element Selectors:
		 * 
		 * - * any element
		 * - E an element with the tag E
		 * - E F All descendant elements of E that have the tag F
		 * - E > F or E/F all direct children elements of E that have the tag F
		 * - E + F all elements with the tag F that are immediately preceded by an element with the tag E
		 * - E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
		 * 
		 * ## Attribute Selectors:
		 * 
		 * The use of  and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
		 * 
		 * - E[foo] has an attribute "foo"
		 * - E[foo=bar] has an attribute "foo" that equals "bar"
		 * - E[foo^=bar] has an attribute "foo" that starts with "bar"
		 * - E[foo$=bar] has an attribute "foo" that ends with "bar"
		 * - E[foo*=bar] has an attribute "foo" that contains the substring "bar"
		 * - E[foo%=2] has an attribute "foo" that is evenly divisible by 2
		 * - E[foo!=bar] has an attribute "foo" that does not equal "bar"
		 * 
		 * ## Pseudo Classes:
		 * 
		 * - E:first-child E is the first child of its parent
		 * - E:last-child E is the last child of its parent
		 * - E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
		 * - E:nth-child(odd) E is an odd child of its parent
		 * - E:nth-child(even) E is an even child of its parent
		 * - E:only-child E is the only child of its parent
		 * - E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
		 * - E:first the first E in the resultset
		 * - E:last the last E in the resultset
		 * - E:nth(n) the nth E in the resultset (1 based)
		 * - E:odd shortcut for :nth-child(odd)
		 * - E:even shortcut for :nth-child(even)
		 * - E:not(S) an E element that does not match simple selector S
		 * - E:has(S) an E element that has a descendant that matches simple selector S
		 * - E:next(S) an E element whose next sibling matches simple selector S
		 * - E:prev(S) an E element whose previous sibling matches simple selector S
		 * - E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\
		 * 
		 * ## CSS Value Selectors:
		 * 
		 * - E{display=none} CSS value "display" that equals "none"
		 * - E{display^=none} CSS value "display" that starts with "none"
		 * - E{display$=none} CSS value "display" that ends with "none"
		 * - E{display*=none} CSS value "display" that contains the substring "none"
		 * - E{display%=2} CSS value "display" that is evenly divisible by 2
		 * - E{display!=none} CSS value "display" that does not equal "none"
		 * @method
		 * @public (method)
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements (
		 * HTMLElement or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if _asDom_ is _false_) that match the selector.<br/>
		 * If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|string[]}               className The CSS class to add, or an array of classes.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}           this
		 */
		radioCls? (className: string | string[]): Ext.dom.Layer;
		radioCls? (className: string | string[]): Ext.dom.Element;
		/** 
		 * Relays selected events from the specified Observable as if the events were fired by `this`.
		 * 
		 * For example if you are extending Grid, you might decide to forward some events from store.
		 * So you can do this inside your initComponent:
		 * 
		 *    this.relayEvents(this.getStore(), ['load']);
		 * 
		 * The grid instance will then have an observable 'load' event which will be passed
		 * the parameters of the store's load event and any function fired with the grid's
		 * load event would have access to the grid using the this keyword (unless the event
		 * is handled by a controller's control/listen event listener in which case 'this'
		 * will be the controller rather than the grid).
		 * @method
		 * @public (method)
		 * @param   {object}          origin   The Observable whose events this object is to relay.
		 * @param   {string[]|object} events
		 * Array of event names to relay or an Object with key/value
		 * pairs translating to ActualEventName/NewEventName respectively. For example:
		 *     this.relayEvents(this, {add:'push', remove:'pop'});
		 * 
		 * Would now redispatch the add event of this as a push event and the remove event as a pop event.
		 * @param   {string}          [prefix]
		 * A common prefix to prepend to the event names. For example:
		 * 
		 *    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
		 * @returns {object}          
		 * A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:
		 * 
		 *    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
		 * 
		 * Can be undone by calling
		 * 
		 *    Ext.destroy(this.storeRelayers);
		 * 
		 * or
		 *     this.store.relayers.destroy();
		 */
		relayEvents? (origin: object, events: string[] | object, prefix?: string): object;
		/** 
		 * Destroys this element by removing it from the cache, removing its DOM reference,
		 * and removing all of its event listeners.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		remove? (): void;
		/** 
		 * Alias for [unAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unAfter).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAfterListener? (): void;
		/** 
		 * Removes all listeners for this object including the managed listeners
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeAllListeners? (): void;
		/** 
		 * Alias for [unBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-unBefore).
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		removeBeforeListener? (): void;
		/** 
		 * Removes the given CSS class(es) from this Element.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} names
		 * The CSS classes to remove separated by space,
		 * or an array of classes
		 * @param   {string}          [prefix]
		 * Prefix to prepend to each class. The separator `-` will be
		 * appended to the prefix.
		 * @param   {string}          [suffix]
		 * Suffix to append to each class. The separator `-` will be
		 * prepended to the suffix.
		 * return {[Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)} this
		 * @returns {void}                     
		 */
		removeCls? (names: string | string[], prefix?: string, suffix?: string): void;
		/** 
		 * Removes an event handler.
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		removeListener? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes listeners that were added by the [mon](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-mon) method.
		 * @method
		 * @public (method)
		 * @param   {Ext.util.Observable|Ext.dom.Element} item    The item from which to remove a listener/listeners.
		 * @param   {object|string}                       ename   The event name, or an object containing event name properties.
		 * @param   {Function}                            [fn]    If the `ename` parameter was an event name, this is the handler function.
		 * @param   {object}                              [scope]
		 * If the `ename` parameter was an event name, this is the scope (`this` reference)
		 * in which the handler function is executed.
		 * @returns {void}                                        
		 */
		removeManagedListener? (item: Ext.util.Observable | Ext.dom.Element, ename: object | string, fn?: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Forces the browser to repaint this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  this
		 */
		repaint? (): Ext.dom.Layer;
		repaint? (): Ext.dom.Element;
		/** 
		 * Replaces the passed element with this element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.dom.Element} el
		 * The element to replace.
		 * The id of the node, a DOM Node or an existing Element.
		 * @param   {boolean}                            [destroy]
		 * `false` to prevent destruction of the replaced
		 * element
		 * @returns {Ext.dom.Layer|Ext.dom.Element}                This element
		 */
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.Layer;
		replace? (el: string | HTMLElement | Ext.dom.Element, destroy?: boolean): Ext.dom.Element;
		/** 
		 * Replaces a CSS class on the element with another.
		 * If the old name does not exist, the new name will simply be added.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                        oldName  The CSS class to replace.
		 * @param   {string}                        newName  The replacement CSS class.
		 * @param   {string}                        [prefix] Prefix to prepend to each class to be replaced.
		 * @param   {string}                        [suffix] Suffix to append to each class to be replaced.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}          this
		 */
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.Layer;
		replaceCls? (oldName: string, newName: string, prefix?: string, suffix?: string): Ext.dom.Element;
		/** 
		 * Replaces this element with the passed element
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|object} el
		 * The new element (id of the
		 * node, a DOM Node or an existing Element) or a DomHelper config of an element to create
		 * @returns {Ext.dom.Element}                              This element
		 */
		replaceWith? (el: string | HTMLElement | Ext.dom.Element | object): Ext.dom.Element;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		resumeEvent? (): void;
		/** 
		 * Resumes firing of the named event(s).
		 * 
		 * After calling this method to resume events, the events will fire when requested to fire.
		 * 
		 * **Note that if the [suspendEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvent) method is called multiple times for a certain event,
		 * this converse method will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to resume.
		 * @returns {void}                
		 */
		resumeEvent? (...eventName: string[]): void;
		/** 
		 * Resumes firing events (see [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents)).
		 * 
		 * If events were suspended using the `queueSuspended` parameter, then all events fired
		 * during event suspension will be sent to any listeners now.
		 * @method
		 * @public (method)
		 * @param   {boolean} [discardQueue]
		 * `true` to prevent any previously queued events from firing
		 * while we were suspended. See [suspendEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-suspendEvents).
		 * @returns {void}                   
		 */
		resumeEvents? (discardQueue?: boolean): void;
		/** 
		 * Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
		 * within this element's scrollable range.
		 * @method
		 * @public (method)
		 * @param   {string}         direction
		 * Possible values are:
		 * 
		 * - `"l"` (or `"left"`)
		 * - `"r"` (or `"right"`)
		 * - `"t"` (or `"top"`, or `"up"`)
		 * - `"b"` (or `"bottom"`, or `"down"`)
		 * @param   {number}         distance  How far to scroll the element in pixels
		 * @param   {boolean|object} [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {boolean}        
		 * Returns true if a scroll was triggered or false if the element
		 * was scrolled as far as it could go.
		 */
		scroll? (direction: string, distance: number, animate?: boolean | object): boolean;
		/** 
		 * Scrolls this element by the passed delta values, optionally animating.
		 * 
		 * All of the following are equivalent:
		 * 
		 *     el.scrollBy(10, 10, true);
		 *     el.scrollBy([10, 10], true);
		 *     el.scrollBy({ x: 10, y: 10 }, true);
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|number[]|object}        deltaX
		 * Either the x delta, an Array specifying x and y deltas or
		 * an object with "x" and "y" properties.
		 * @param   {number|boolean|object}         deltaY  Either the y delta, or an animate flag or config object.
		 * @param   {boolean|object}                animate Animate flag/config object if the delta values were passed separately.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         this
		 */
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.Layer;
		scrollBy? (deltaX: number | number[] | object, deltaY: number | boolean | object, animate: boolean | object): Ext.dom.Element;
		/** 
		 * Scrolls this element into view within the passed container.
		 * 
		 *      Ext.create('Ext.data.Store', {
		 *          storeId:'simpsonsStore',
		 *          fields:['name', 'email', 'phone'],
		 *          data:{'items':[
		 *              { 'name': 'Lisa',  "email":"lisa@simpsons.com",  "phone":"555-111-1224"  },
		 *              { 'name': 'Bart',  "email":"bart@simpsons.com",  "phone":"555-222-1234" },
		 *              { 'name': 'Homer', "email":"homer@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Marge', "email":"marge@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Milhouse', "email":"milhouse@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Willy', "email":"willy@simpsons.com", "phone":"555-222-1254"  },
		 *              { 'name': 'Skinner', "email":"skinner@simpsons.com",  "phone":"555-222-1244"  },
		 *              { 'name': 'Hank (last row)', "email":"hank@simpsons.com", "phone":"555-222-1254"  }
		 *          ]},
		 *          proxy: {
		 *              type: 'memory',
		 *              reader: {
		 *                  type: 'json',
		 *                  rootProperty: 'items'
		 *              }
		 *          }
		 *      });
		 *    
		 *      var grid = Ext.create('Ext.grid.Panel', {
		 *          title: 'Simpsons',
		 *          store: Ext.data.StoreManager.lookup('simpsonsStore'),
		 *          columns: [
		 *              { text: 'Name',  dataIndex: 'name', width: 125 },
		 *              { text: 'Email', dataIndex: 'email', flex: 1 },
		 *              { text: 'Phone', dataIndex: 'phone' }
		 *          ],
		 *          height: 190,
		 *          width: 400,
		 *          renderTo: Ext.getBody(),
		 *          tbar: [{
		 *              text: 'Scroll row 7 into view',
		 *              handler: function () {
		 *                  var view = grid.getView();
		 *    
		 *                  Ext.get(view.getRow(7)).scrollIntoView(view.getEl(), null, true);
		 *              }
		 *          }]
		 *      });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|HTMLElement|Ext.Element} [container]
		 * The container element
		 * to scroll.  Should be a string (id), dom node, or [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @param   {boolean}                        [hscroll]   False to disable horizontal scroll.
		 * @param   {boolean|object}                 [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @param   {boolean}                        [highlight] true to highlight the element when it is in view.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}              this
		 */
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.Layer;
		scrollIntoView? (container?: string | HTMLElement | Ext.Element, hscroll?: boolean, animate?: boolean | object, highlight?: boolean): Ext.dom.Element;
		/** 
		 * Scrolls this element the specified scroll point. It does NOT do bounds checking so
		 * if you scroll to a weird value it will try to do it. For auto bounds checking, use [scroll](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#event-scroll).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                        side      Either "left" for scrollLeft values or "top" for scrollTop values.
		 * @param   {number}                        value     The new scroll value
		 * @param   {boolean|object}                [animate]
		 * true for the default animation or a standard Element
		 * animation config object
		 * @returns {Ext.dom.Layer|Ext.dom.Element}           this
		 */
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.Layer;
		scrollTo? (side: string, value: number, animate?: boolean | object): Ext.dom.Element;
		/** 
		 * Selects descendant elements of this element based on the passed CSS selector to
		 * enable [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement[]}                                  selector  The CSS selector or an array of elements
		 * @param   {boolean}                                               composite
		 * Return a CompositeElement as opposed to a
		 * CompositeElementLite. Defaults to false.
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}           
		 */
		select? (selector: string | HTMLElement[], composite: boolean): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Selects a single descendant element of this element using a CSS selector
		 * (see [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)).
		 * @method
		 * @public (method)
		 * @param   {string}                      selector The selector query
		 * @param   {boolean}                     [asDom]  `false` to return an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {HTMLElement|Ext.dom.Element} 
		 * The DOM element (or [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) if
		 * _asDom_ is _false_) which matched the selector.
		 */
		selectNode? (selector: string, asDom?: boolean): HTMLElement | Ext.dom.Element;
		/** 
		 * Sets the passed attributes as attributes of this element (a `style` attribute
		 * can be a string, object or function).
		 * 
		 * Example component (though any [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) would suffice):
		 * 
		 *    var cmp = Ext.create({
		 *        xtype: 'component',
		 *        html: 'test',
		 *        renderTo: Ext.getBody()
		 *    });
		 * 
		 * Once the component is rendered, you can fetch a reference to its outer
		 * element to use `set`:
		 * 
		 *    cmp.el.set({
		 *        foo: 'bar'
		 *    });
		 * 
		 * This sets an attribute on the element of **foo="bar"**:
		 * 
		 *    &lt;div class="x-component x-component-default x-border-box" id="component-1009" foo="bar"&gt;test&lt;/div&gt;
		 * 
		 * To remove the attribute pass a value of **undefined**:
		 * 
		 *    cmp.el.set({
		 *        foo: undefined
		 *    });
		 * 
		 * **Note:**
		 * 
		 * - You cannot remove an attribute by passing `undefined` when the
		 *   `expandos` param is set to **false**.
		 * - Passing an attribute of `style` results in the request being handed off to
		 *   [applyStyles](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-applyStyles).
		 * - Passing an attribute of `cls` results in the element's dom's
		 *   [className](http://www.w3schools.com/jsref/prop_html_classname.asp) property
		 *   being set directly.  For additional flexibility when setting / removing
		 *   classes see:
		 *   <ul>
		 *   <li>[addCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-addCls)
		 * - [removeCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-removeCls)
		 * - [replaceCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-replaceCls)
		 * - [setCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setCls)
		 * - [toggleCls](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggleCls)
		 * 
		 * </li>
		 * </ul>
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                        attributes The object with the attributes.
		 * @param   {boolean}                       [useSet]
		 * `false` to override the default `setAttribute`
		 * to use [expandos](http://help.dottoro.com/ljvovanq.php).
		 * @returns {Ext.dom.Layer|Ext.dom.Element}            this
		 */
		set? (attributes: object, useSet?: boolean): Ext.dom.Layer;
		set? (attributes: object, useSet?: boolean): Ext.dom.Element;
		/** 
		 * Sets the element's CSS bottom style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 bottom
		 * Number of pixels or CSS string value to set as
		 * the bottom CSS property value
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		setBottom? (bottom: number | string): Ext.dom.Layer;
		setBottom? (bottom: number | string): Ext.dom.Element;
		/** 
		 * Sets the element's box.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {object}                        box The box to fill {x, y, width, height}
		 * @returns {Ext.dom.Layer|Ext.dom.Element}     this
		 */
		setBox? (box: object): Ext.dom.Layer;
		setBox? (box: object): Ext.dom.Element;
		/** 
		 * Sets the specified CSS class on this element's DOM node.
		 * @method
		 * @public (method)
		 * @param   {string|string[]} className The CSS class to set on this element.
		 * @returns {void}                      
		 */
		setCls? (className: string | string[]): void;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                          name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                                 [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Layer;
		setConfig? (name: string | object, value?: object): Ext.dom.Element;
		setConfig? (name: string | object, value?: object): Ext.Base;
		/** 
		 * Sets the CSS display property. Uses originalDisplay if the specified value is a
		 * boolean true.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean|string}                value
		 * Boolean value to display the element using its
		 * default display, or a string to set the display directly.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}       this
		 */
		setDisplayed? (value: boolean | string): Ext.dom.Layer;
		setDisplayed? (value: boolean | string): Ext.dom.Element;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                        html The new HTML.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}      this
		 */
		setHTML? (html: string): Ext.dom.Layer;
		setHTML? (html: string): Ext.dom.Element;
		/** 
		 * Set the height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 height The new height.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		setHeight? (height: number | string): Ext.dom.Layer;
		setHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                        html The new HTML.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}      this
		 */
		setHtml? (html: string): Ext.dom.Layer;
		setHtml? (html: string): Ext.dom.Element;
		/** 
		 * Sets the element's left position directly using CSS style
		 * (instead of [setX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setX)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 left
		 * Number of pixels or CSS string value to
		 * set as the left CSS property value
		 * @returns {Ext.dom.Layer|Ext.dom.Element}      this
		 */
		setLeft? (left: number | string): Ext.dom.Layer;
		setLeft? (left: number | string): Ext.dom.Element;
		/** 
		 * An alias for [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).  In
		 * versions prior to 5.1, [listeners](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#cfg-listeners) had a generated setter which could
		 * be called to add listeners.  In 5.1 the listeners config is not processed
		 * using the config system and has no generated setter, so this method is
		 * provided for backward compatibility.  The preferred way of adding listeners
		 * is to use the [on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-on) method.
		 * @method
		 * @public (method)
		 * @param   {object} listeners The listeners
		 * @returns {void}             
		 */
		setListeners? (listeners: object): void;
		/** 
		 * Sets the local x coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalX](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalX), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        x The x coordinate. A value of `null` sets the left style to 'auto'.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}   this
		 */
		setLocalX? (x: number): Ext.dom.Layer;
		setLocalX? (x: number): Ext.dom.Element;
		/** 
		 * Sets the local x and y coordinates of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalXY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalXY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|any[]}                  x
		 * The x coordinate or an array containing [x, y]. A value of
		 * `null` sets the left style to 'auto'
		 * @param   {number}                        [y]
		 * The y coordinate, required if x is not an array. A value of
		 * `null` sets the top style to 'auto'
		 * @returns {Ext.dom.Layer|Ext.dom.Element}     this
		 */
		setLocalXY? (x: number | any[], y?: number): Ext.dom.Layer;
		setLocalXY? (x: number | any[], y?: number): Ext.dom.Element;
		/** 
		 * Sets the local y coordinate of this element using CSS style. When used on an
		 * absolute positioned element this method is symmetrical with [getLocalY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-getLocalY), but
		 * may not be symmetrical when used on a relatively positioned element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        y The y coordinate. A value of `null` sets the top style to 'auto'.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}   this
		 */
		setLocalY? (y: number): Ext.dom.Layer;
		setLocalY? (y: number): Ext.dom.Element;
		/** 
		 * Set the maximum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 height The new maximum height.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		setMaxHeight? (height: number | string): Ext.dom.Layer;
		setMaxHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Set the maximum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 width The new maximum width.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}       this
		 */
		setMaxWidth? (width: number | string): Ext.dom.Layer;
		setMaxWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Set the minimum height of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 height The new minimum height.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		setMinHeight? (height: number | string): Ext.dom.Layer;
		setMinHeight? (height: number | string): Ext.dom.Element;
		/** 
		 * Set the minimum width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 width The new minimum width.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}       this
		 */
		setMinWidth? (width: number | string): Ext.dom.Layer;
		setMinWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Set the opacity of the element
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         this
		 */
		setOpacity? (opacity: number): Ext.dom.Layer;
		setOpacity? (opacity: number): Ext.dom.Element;
		/** 
		 * Sets the element's CSS right style.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 right
		 * Number of pixels or CSS string value to
		 * set as the right CSS property value
		 * @returns {Ext.dom.Layer|Ext.dom.Element}       this
		 */
		setRight? (right: number | string): Ext.dom.Layer;
		setRight? (right: number | string): Ext.dom.Element;
		/** 
		 * Sets the left scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        left The left scroll position
		 * @returns {Ext.dom.Layer|Ext.dom.Element}      this
		 */
		setScrollLeft? (left: number): Ext.dom.Layer;
		setScrollLeft? (left: number): Ext.dom.Element;
		/** 
		 * Sets the top scroll position
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        top The top scroll position
		 * @returns {Ext.dom.Layer|Ext.dom.Element}     this
		 */
		setScrollTop? (top: number): Ext.dom.Layer;
		setScrollTop? (top: number): Ext.dom.Element;
		/** 
		 * Set the size of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 width
		 * The new width. This may be one of:
		 * 
		 * - A Number specifying the new width in pixels.
		 * - A String used to set the CSS width style. Animation may **not** be used.
		 * - A size object in the format `{width: widthValue, height: heightValue}`.
		 * @param   {number|string}                 height
		 * The new height. This may be one of:
		 * 
		 * - A Number specifying the new height in pixels.
		 * - A String used to set the CSS height style. Animation may **not** be used.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		setSize? (width: number | string, height: number | string): Ext.dom.Layer;
		setSize? (width: number | string, height: number | string): Ext.dom.Element;
		/** 
		 * Wrapper for setting style properties, also takes single object parameter of
		 * multiple styles.
		 * 
		 * Styles should be a valid DOM element style property.<br/>
		 * [Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)
		 * (_along with the supported CSS version for each_)
		 * 
		 *    // &lt;div id="my-el"&gt;Phineas Flynn&lt;/div&gt;
		 *    
		 *    var el = Ext.get('my-el');
		 *    
		 *    // two-param syntax
		 *    el.setStyle('color', 'white');
		 *    
		 *    // single-param syntax
		 *    el.setStyle({
		 *        fontWeight: 'bold',
		 *        backgroundColor: 'gray',
		 *        padding: '10px'
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                 property
		 * The style property to be set, or an object of
		 * multiple styles.
		 * @param   {string}                        [value]
		 * The value to apply to the given property, or null if
		 * an object was passed.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}          this
		 */
		setStyle? (property: string | object, value?: string): Ext.dom.Layer;
		setStyle? (property: string | object, value?: string): Ext.dom.Element;
		/** 
		 * Sets the element's top position directly using CSS style
		 * (instead of [setY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setY)).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 top
		 * Number of pixels or CSS string value to
		 * set as the top CSS property value
		 * @returns {Ext.dom.Layer|Ext.dom.Element}     this
		 */
		setTop? (top: number | string): Ext.dom.Layer;
		setTop? (top: number | string): Ext.dom.Element;
		/** 
		 * Sets the element's top and left positions directly using CSS style.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		setTopLeft? (): void;
		/** 
		 * Use this to change the visibility mode between [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY),
		 * [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY), [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS), or [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {Ext.dom.Element.VISIBILITY|Ext.dom.Element.DISPLAY|Ext.dom.Element.OFFSETS|Ext.dom.Element.CLIP|number} mode
		 * The method by which the element will be [hidden](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-hide) (you can
		 * also use the [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible) or [toggle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-toggle) method to toggle element
		 * visibility).
		 * @returns {Ext.dom.Layer|Ext.dom.Element}                                                                               this
		 */
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.Layer;
		setVisibilityMode? (mode: Ext.dom.Element.VISIBILITY | Ext.dom.Element.DISPLAY | Ext.dom.Element.OFFSETS | Ext.dom.Element.CLIP | number): Ext.dom.Element;
		/** 
		 * Sets the visibility of the element based on the current visibility mode. Use
		 * [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode) to switch between the following visibility modes:
		 * 
		 * - [DISPLAY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-DISPLAY) (the default)
		 * - [VISIBILITY](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-VISIBILITY)
		 * - [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS)
		 * - [CLIP](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-CLIP)
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {boolean}                       visible Whether the element is visible.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}         this
		 */
		setVisible? (visible: boolean): Ext.dom.Layer;
		setVisible? (visible: boolean): Ext.dom.Element;
		/** 
		 * Set the width of this Element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number|string}                 width The new width.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}       this
		 */
		setWidth? (width: number | string): Ext.dom.Layer;
		setWidth? (width: number | string): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level x coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        x
		 * @returns {Ext.dom.Layer|Ext.dom.Element}   this
		 */
		setX? (x: number): Ext.dom.Layer;
		setX? (x: number): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level x and y coordinates
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number[]}                      xy
		 * @returns {Ext.dom.Layer|Ext.dom.Element}    this
		 */
		setXY? (xy: number[]): Ext.dom.Layer;
		setXY? (xy: number[]): Ext.dom.Element;
		/** 
		 * Sets this Element's page-level y coordinate
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        y
		 * @returns {Ext.dom.Layer|Ext.dom.Element}   this
		 */
		setY? (y: number): Ext.dom.Layer;
		setY? (y: number): Ext.dom.Element;
		/** 
		 * Sets the z-index of this Element and synchronizes the z-index of shadow and/or
		 * shim if present.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {number}                        zindex The new z-index to set
		 * @returns {Ext.dom.Layer|Ext.dom.Element}        this
		 */
		setZIndex? (zindex: number): Ext.dom.Layer;
		setZIndex? (zindex: number): Ext.dom.Element;
		/** 
		 * Show this element - Uses display mode to determine whether to use "display",
		 * "visibility", "offsets", or "clip". See [setVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisible).
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  this
		 */
		show? (): Ext.dom.Layer;
		show? (): Ext.dom.Element;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		suspendEvent? (): void;
		/** 
		 * Suspends firing of the named event(s).
		 * 
		 * After calling this method to suspend events, the events will no longer fire when requested to fire.
		 * 
		 * **Note that if this is called multiple times for a certain event, the converse method
		 * [resumeEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvent) will have to be called the same number of times for it to resume firing.**
		 * @method
		 * @public (method)
		 * @param   {...string} eventName Multiple event names to suspend.
		 * @returns {void}                
		 */
		suspendEvent? (...eventName: string[]): void;
		/** 
		 * Suspends the firing of all events. (see [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents))
		 * @method
		 * @public (method)
		 * @param   {boolean} queueSuspended
		 * `true` to queue up suspended events to be fired
		 * after the [resumeEvents](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-resumeEvents) call instead of discarding all suspended events.
		 * @returns {void}                   
		 */
		suspendEvents? (queueSuspended: boolean): void;
		/** 
		 * Toggles the element's visibility, depending on visibility mode.
		 * @method
		 * @public (method)
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  this
		 */
		toggle? (): Ext.dom.Layer;
		toggle? (): Ext.dom.Element;
		/** 
		 * Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                        className The CSS class to toggle.
		 * @param   {boolean}                       [state]
		 * If specified as `true`, causes the class to be added. If specified as `false`, causes
		 * the class to be removed.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}           this
		 */
		toggleCls? (className: string, state?: boolean): Ext.dom.Layer;
		toggleCls? (className: string, state?: boolean): Ext.dom.Element;
		/** 
		 * Translates the passed page coordinates into left/top css values for the element
		 * @method
		 * @public (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with left and top properties. e.g.
		 * {left: (value), top: (value)}
		 */
		translatePoints? (x: number | any[], y?: number): object;
		/** 
		 * Shorthand for [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener).
		 * @method
		 * @public (method)
		 * @param   {string}   eventName The type of event the handler was associated with.
		 * @param   {Function} fn
		 * The handler to remove. **This must be a reference to the function
		 * passed into the
		 * [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) call.**
		 * @param   {object}   [scope]
		 * The scope originally specified for the handler. It
		 * must be the same as the scope argument specified in the original call to
		 * [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) or the listener will not be removed.
		 * 
		 * **Convenience Syntax**
		 * 
		 * You can use the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener)
		 * `destroyable: true` config option in place of calling un().  For example:
		 * 
		 *    var listeners = cmp.on({
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide,
		 *        destroyable: true
		 *    });
		 *    
		 *    // Remove listeners
		 *    listeners.destroy();
		 *    // or
		 *    cmp.un(
		 *        scope: cmp,
		 *        afterrender: cmp.onAfterrender,
		 *        beforehide: cmp.onBeforeHide
		 *    );
		 * 
		 * **Exception - DOM event handlers using the element config option**
		 * 
		 * You must go directly through the element to detach an event handler attached using
		 * the [addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener) _element_ option.
		 * 
		 *    panel.on({
		 *        element: 'body',
		 *        click: 'onBodyCLick'
		 *    });
		 *    
		 *    panel.body.un({
		 *        click: 'onBodyCLick'
		 *    });
		 * 
		 * @returns {void}               
		 */
		un? (eventName: string, fn: ExtGlobalFunction, scope?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'after'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unAfter? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * Removes a before-event handler.
		 * 
		 * Same as [removeListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-removeListener) with `order` set to `'before'`.
		 * @method
		 * @public (method)
		 * @param   {string|string[]|object} eventName The name of the event the handler was associated with.
		 * @param   {Function|string}        fn        The handler to remove.
		 * @param   {object}                 [scope]   The scope originally specified for `fn`.
		 * @param   {object}                 [options] Extra options object.
		 * @returns {void}                             
		 */
		unBefore? (eventName: string | string[] | object, fn: ExtGlobalFunction | string, scope?: object, options?: object): void;
		/** 
		 * .
		 * Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 'div.some-class' or 'span:first-child').
		 * This is a shortcut for findParentNode() that always returns an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
		 * @method
		 * @public (method)
		 * @param   {string}                                    selector    The simple selector to test. See [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html) for information about simple selectors.
		 * @param   {number|string|HTMLElement|Ext.dom.Element} [limit]
		 * The max depth to search as a number or an element that causes the upward
		 * traversal to stop and is **not** considered for inclusion as the result.
		 * (defaults to 50 || document.documentElement)
		 * @param   {boolean}                                   [returnDom] True to return the DOM node instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @returns {Ext.dom.Element|HTMLElement}               
		 * The matching DOM node (or HTMLElement if
		 * _returnDom_ is _true_).  Or null if no match was found.
		 */
		up? (selector: string, limit?: number | string | HTMLElement | Ext.dom.Element, returnDom?: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Sets the `innerHTML` of this element.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string}                        html The new HTML.
		 * @returns {Ext.dom.Layer|Ext.dom.Element}      this
		 */
		update? (html: string): Ext.dom.Layer;
		update? (html: string): Ext.dom.Element;
		/** 
		 * Creates and wraps this element with another element
		 * @method
		 * @public (method)
		 * @param   {object}                      [config]    DomHelper element config object for the wrapper element or null for an empty div
		 * @param   {boolean}                     [returnDom] True to return the raw DOM element instead of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {string}                      [selector]  A CSS selector to select a descendant node within the created element to use as the wrapping element.
		 * @returns {HTMLElement|Ext.dom.Element}             The newly created wrapper element
		 */
		wrap? (config?: object, returnDom?: boolean, selector?: string): HTMLElement | Ext.dom.Element;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                                 config
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}        this
		 */
		initConfig? (config: object): Ext.dom.Layer;
		initConfig? (config: object): Ext.dom.Element;
		initConfig? (config: object): Ext.Base;
		/** 
		 * Gets the default scope for firing late bound events (string names with
		 * no scope attached) at runtime.
		 * @method
		 * @protected (method)
		 * @param   {object} [defaultScope] The default scope to return if none is found.
		 * @returns {object}                The default event scope
		 */
		resolveListenerScope? (defaultScope?: object): object;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Layer.Statics|Ext.dom.Element.Statics|Ext.Base.Statics}  
		 */
		statics? (): Ext.dom.Layer.Statics;
		statics? (): Ext.dom.Element.Statics;
		statics? (): Ext.Base.Statics;
		/** 
		 * Adds declarative listeners as nested arrays of listener objects.
		 * @method
		 * @private (method)
		 * @param   {any[]}   listeners
		 * @returns {boolean}           `true` if any listeners were added
		 */
		_addDeclaredListeners? (listeners: any[]): boolean;
		/** 
		 * Returns the publisher for a given event
		 * @method
		 * @private (method)
		 * @param   {string}                        eventName
		 * @returns {Ext.event.publisher.Publisher}           
		 */
		_getPublisher? (eventName: string): Ext.event.publisher.Publisher;
		/** 
		 * This method applies a versioned, deprecation declaration to this class. This
		 * is typically called by the `deprecated` config.
		 * @method
		 * @private (method)
		 * @param   {object} deprecations
		 * @returns {void}                
		 */
		addDeprecations? (deprecations: object): void;
		/** 
		 * Returns the fractional portion of this element's measurement in the given dimension.
		 * (IE9+ only)
		 * @method
		 * @private (method)
		 * @param   {object} dimension
		 * @returns {number}           
		 */
		adjustDirect2DDimension? (dimension: object): number;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} xy
		 * @param   {object} parent
		 * @returns {void}          
		 */
		adjustForConstraints? (xy: object, parent: object): void;
		/** 
		 * Stub implementation called after positioning.
		 * May be implemented in subclasses. Component has an implementation.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		afterSetPosition? (): void;
		/** 
		 * Calculates x,y coordinates specified by the anchor position on the element, adding
		 * extraX and extraY values.
		 * @method
		 * @private (method)
		 * @param   {string}   [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Positionable.html#method-alignTo) for details on supported anchor positions.
		 * @param   {number}   [extraX] value to be added to the x coordinate
		 * @param   {number}   [extraY] value to be added to the y coordinate
		 * @param   {object}   [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}          [x, y] An array containing the element's x and y coordinates
		 */
		calculateAnchorXY? (anchor?: string, extraX?: number, extraY?: number, size?: object): number[];
		/** 
		 * Calculates the new [x,y] position to move this Positionable into a constrain region.
		 * 
		 * By default, this Positionable is constrained to be within the container it was added to, or the element it was
		 * rendered to.
		 * 
		 * Priority is given to constraining the top and left within the constraint.
		 * 
		 * An alternative constraint may be passed.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.dom.Element|Ext.util.Region} [constrainTo]
		 * The Element or [Region](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Region.html)
		 * into which this Component is to be constrained. Defaults to the element into which this Positionable
		 * was rendered, or this Component's {@link [Ext.Component.constrainTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#cfg-constrainTo).
		 * @param   {number[]}                                           [proposedPosition]
		 * A proposed `[X, Y]` position to test for validity
		 * and to coerce into constraints instead of using this Positionable's current position.
		 * @param   {boolean}                                            [local]            The proposedPosition is local _(relative to floatParent if a floating Component)_
		 * @param   {number[]}                                           [proposedSize]
		 * A proposed `[width, height]` size to use when calculating
		 * constraints instead of using this Positionable's current size.
		 * @returns {number[]}                                           
		 * **If** the element _needs_ to be translated, the new `[X, Y]` position within
		 * constraints if possible, giving priority to keeping the top and left edge in the constrain region.
		 * Otherwise, `false`.
		 */
		calculateConstrainedPosition? (constrainTo?: string | HTMLElement | Ext.dom.Element | Ext.util.Region, proposedPosition?: number[], local?: boolean, proposedSize?: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} o
		 * @param   {object} fn
		 * @param   {object} scope
		 * @returns {void}         
		 */
		captureArgs? (o: object, fn: object, scope: object): void;
		/** 
		 * Removes the element from the cache and removes listeners.
		 * Used for cleaning up orphaned elements after they have been removed from the dom.
		 * Similar to [destroy](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy) except it assumes the element has already been
		 * removed from the dom.
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		collect? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} box
		 * @returns {void}       
		 */
		constrainBox? (box: object): void;
		/** 
		 * Creates an event handling function which re-fires the event from this object as the passed event name.
		 * @method
		 * @private (method)
		 * @param   {string}   newName    The name under which to re-fire the passed parameters.
		 * @param   {any[]}    [beginEnd] The caller can specify on which indices to slice.
		 * @returns {Function}            
		 */
		createRelayer? (newName: string, beginEnd?: any[]): ExtGlobalFunction;
		/** 
		 * Disables the shadow element created by [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShadow? (): void;
		/** 
		 * Disables the shim element created by [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableShim? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchContextMenu? (): void;
		/** 
		 * Disables native scrolling of an overflowing element using touch-screen input
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		disableTouchScroll? (): void;
		/** 
		 * Continue to fire event.
		 * @method
		 * @private (method)
		 * @param   {string}  eventName
		 * @param   {any[]}   args
		 * @param   {boolean} bubbles
		 * @returns {void}              
		 */
		doFireEvent? (eventName: string, args: any[], bubbles: boolean): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} element
		 * @returns {void}           
		 */
		doReplaceWith? (element: object): void;
		/** 
		 * A scrollIntoView implementation for scrollIntoView/rtlScrollIntoView to call
		 * after current scrollX has been determined.
		 * @method
		 * @private (method)
		 * @param   {object} container
		 * @param   {object} hscroll
		 * @param   {object} animate
		 * @param   {object} highlight
		 * @param   {object} getScrollX
		 * @param   {object} scrollTo
		 * @returns {void}              
		 */
		doScrollIntoView? (container: object, hscroll: object, animate: object, highlight: object, getScrollX: object, scrollTo: object): void;
		/** 
		 * Enables an iframe shim for this element to keep windowed objects from
		 * showing through.  The position, size, and visibility of the shim will be
		 * automatically synchronized as the position, size, and visibility of this
		 * Element are changed.
		 * @method
		 * @private (method)
		 * @param   {object}          [options] Configuration options for the shim
		 * @returns {Ext.dom.Element}           The new shim element
		 */
		enableShim? (options?: object): Ext.dom.Element;
		/** 
		 * Gets the x,y coordinates of an element specified by the anchor position on the
		 * element.
		 * @method
		 * @private (method)
		 * @param   {Ext.dom.Element} el       The element
		 * @param   {string}          [anchor]
		 * The specified anchor position.
		 * See [alignTo](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html#method-alignTo) for details on supported anchor positions.
		 * @param   {boolean}         [local]
		 * True to get the local (element top/left-relative) anchor
		 * position instead of page coordinates
		 * @param   {object}          [size]
		 * An object containing the size to use for calculating anchor
		 * position {width: (target width), height: (target height)} (defaults to the
		 * element's current size)
		 * @returns {number[]}                 [x, y] An array containing the element's x and y coordinates
		 */
		getAnchorToXY? (el: Ext.dom.Element, anchor?: string, local?: boolean, size?: object): number[];
		/** 
		 * Returns the size of the element's borders and padding.
		 * @method
		 * @private (method)
		 * @returns {object} 
		 * an object with the following numeric properties
		 * 
		 * - beforeX
		 * - afterX
		 * - beforeY
		 * - afterY
		 */
		getBorderPadding? (): object;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getBorders? (): void;
		/** 
		 * Gets the bubbling parent for an Observable
		 * @method
		 * @private (method)
		 * @returns {Ext.util.Observable}  The bubble parent. null is returned if no bubble target exists
		 */
		getBubbleParent? (): Ext.util.Observable;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		getCurrentConfig? (): void;
		/** 
		 * Gets the x and y coordinates needed for scrolling an element into view within
		 * a given container.  These coordinates translate into the scrollLeft and scrollTop
		 * positions that will need to be set on an ancestor of the element in order to make
		 * this element visible within its container.
		 * @method
		 * @private (method)
		 * @param   {string|HTMLElement|Ext.Element} container The container
		 * @param   {number}                         scrollX   The container's current scroll position on the x axis
		 * @param   {number}                         scrollY   The container's current scroll position on the y axis
		 * @returns {object}                                   An object with "x" and "y" properties
		 */
		getScrollIntoViewXY? (container: string | HTMLElement | Ext.Element, scrollX: number, scrollY: number): object;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} config
		 * @returns {void}          
		 */
		hasConfig? (config: object): void;
		/** 
		 * Adds a "destroyable" object to an internal list of objects that will be destroyed
		 * when this instance is destroyed (via [`destroy`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-destroy)).
		 * @method
		 * @private (method)
		 * @param   {string} name
		 * @param   {object} value
		 * @returns {object}       The `value` passed.
		 */
		link? (name: string, value: object): object;
		/** 
		 * Mask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		maskIframes? (): void;
		/** 
		 * Prepares a given class for observable instances. This method is called when a
		 * class derives from this class or uses this class as a mixin.
		 * @method
		 * @private (method)
		 * @param   {Function}            T     The class constructor to prepare.
		 * @param   {Ext.util.Observable} mixin The mixin if being used as a mixin.
		 * @param   {object}              data  The raw class creation data if this is an extend.
		 * @returns {void}                      
		 */
		prepareClass? (T: ExtGlobalFunction, mixin: Ext.util.Observable, data: object): void;
		/** 
		 * Remove a single managed listener item
		 * @method
		 * @private (method)
		 * @param   {boolean} isClear         True if this is being called during a clear
		 * @param   {object}  managedListener
		 * The managed listener item
		 * See removeManagedListener for other args
		 * @returns {void}                    
		 */
		removeManagedListenerItem? (isClear: boolean, managedListener: object): void;
		/** 
		 * Converts local coordinates into page-level coordinates
		 * @method
		 * @private (method)
		 * @param   {number[]} xy The local x and y coordinates
		 * @returns {number[]}    The translated coordinates
		 */
		reverseTranslateXY? (xy: number[]): number[];
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} child
		 * @param   {object} hscroll
		 * @returns {void}           
		 */
		scrollChildIntoView? (child: object, hscroll: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {object} isVisible
		 * @returns {void}             
		 */
		setVisibility? (isVisible: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @param   {string}  firstClass
		 * @param   {string}  secondClass
		 * @param   {boolean} flag
		 * @param   {string}  prefix
		 * @returns {any}                 
		 */
		swapCls? (firstClass: string, secondClass: string, flag: boolean, prefix: string): any;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		syncUnderlays? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		synchronize? (): void;
		/** 
		 * Translates the passed page coordinates into x and y css values for the element
		 * @method
		 * @private (method)
		 * @param   {number|any[]} x   The page x or an array containing [x, y]
		 * @param   {number}       [y] The page y, required if x is not an array
		 * @returns {object}       
		 * An object with x and y properties. e.g.
		 * {x: (value), y: (value)}
		 */
		translateXY? (x: number | any[], y?: number): object;
		/** 
		 * Destroys a given set of [`linked`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-link) objects. This is only needed if
		 * the linked object is being destroyed before this instance.
		 * @method
		 * @private (method)
		 * @chainable
		 * @param   {string[]}                               names The names of the linked objects to destroy.
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}       this
		 */
		unlink? (names: string[]): Ext.dom.Layer;
		unlink? (names: string[]): Ext.dom.Element;
		unlink? (names: string[]): Ext.Base;
		/** 
		 * Unmask iframes when shim is true. See [Ext.util.Floating.shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim).
		 * @method
		 * @private (method)
		 * @returns {void}  
		 */
		unmaskIframes? (): void;
		/** 
		 * @method
		 * @private (method)
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  this
		 */
		unwrap? (): Ext.dom.Layer;
		unwrap? (): Ext.dom.Element;
	}
	/** 
	 * [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html)
	 * Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes
	 * and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
	 * 
	 * DomQuery supports most of the [CSS3 selectors spec](http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors), along with some custom selectors and basic XPath.
	 * 
	 * All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example
	 * `div.foo:nth-child(odd)[@foo=bar].bar:first` would be a perfectly valid selector. Node filters are processed
	 * in the order in which they appear, which allows you to optimize your queries for your document structure.
	 * 
	 * ## Simple Selectors
	 * 
	 * For performance reasons, some query methods accept selectors that are termed as **simple selectors**. A simple
	 * selector is a selector that does not include contextual information about any parent/sibling elements.
	 * 
	 * Some examples of valid simple selectors:
	 * 
	 *    var simple = '.foo'; // Only asking for the class name on the element
	 *    var simple = 'div.bar'; // Only asking for the tag/class name on the element
	 *    var simple = '[href];' // Asking for an attribute on the element.
	 *    var simple = ':not(.foo)'; // Only asking for the non-matches against the class name
	 *    var simple = 'span:first-child'; // Doesn't require any contextual information about the parent node
	 * 
	 * Simple examples of invalid simple selectors:
	 * 
	 *    var notSimple = 'div.foo div.bar'; // Requires matching a parent node by class name
	 *    var notSimple = 'span + div'; //  Requires matching a sibling by tag name
	 * 
	 * ## Element Selectors:
	 * 
	 * - **`*`** any element
	 * - **`E`** an element with the tag E
	 * - **`E F`** All descendent elements of E that have the tag F
	 * - **`E &gt; F`** or **E/F** all direct children elements of E that have the tag F
	 * - **`E + F`** all elements with the tag F that are immediately preceded by an element with the tag E
	 * - **`E ~ F`** all elements with the tag F that are preceded by a sibling element with the tag E
	 * 
	 * ## Attribute Selectors:
	 * 
	 * The use of `@` and quotes are optional. For example, `div[@foo='bar']` is also a valid attribute selector.
	 * 
	 * - **`E[foo]`** has an attribute "foo"
	 * - **`E[foo=bar]`** has an attribute "foo" that equals "bar"
	 * - **`E[foo^=bar]`** has an attribute "foo" that starts with "bar"
	 * - **`E[foo$=bar]`** has an attribute "foo" that ends with "bar"
	 * - **`E[foo*=bar]`** has an attribute "foo" that contains the substring "bar"
	 * - **`E[foo%=2]`** has an attribute "foo" that is evenly divisible by 2
	 * - **`E[foo!=bar]`** attribute "foo" does not equal "bar"
	 * 
	 * ## Pseudo Classes:
	 * 
	 * - **`E:first-child`** E is the first child of its parent
	 * - **`E:last-child`** E is the last child of its parent
	 * - **`E:nth-child(_n_)`** E is the _n_th child of its parent (1 based as per the spec)
	 * - **`E:nth-child(odd)`** E is an odd child of its parent
	 * - **`E:nth-child(even)`** E is an even child of its parent
	 * - **`E:only-child`** E is the only child of its parent
	 * - **`E:checked`** E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
	 * - **`E:first`** the first E in the resultset
	 * - **`E:last`** the last E in the resultset
	 * - **`E:nth(_n_)`** the _n_th E in the resultset (1 based)
	 * - **`E:odd`** shortcut for :nth-child(odd)
	 * - **`E:even`** shortcut for :nth-child(even)
	 * - **`E:contains(foo)`** E's innerHTML contains the substring "foo"
	 * - **`E:nodeValue(foo)`** E contains a textNode with a nodeValue that equals "foo"
	 * - **`E:not(S)`** an E element that does not match simple selector S
	 * - **`E:has(S)`** an E element that has a descendent that matches simple selector S
	 * - **`E:next(S)`** an E element whose next sibling matches simple selector S
	 * - **`E:prev(S)`** an E element whose previous sibling matches simple selector S
	 * - **`E:any(S1|S2|S2)`** an E element which matches any of the simple selectors S1, S2 or S3
	 * - **`E:visible(true)`** an E element which is deeply visible according to [Ext.dom.Element.isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible)
	 * 
	 * ## CSS Value Selectors:
	 * 
	 * - **`E{display=none}`** css value "display" that equals "none"
	 * - **`E{display^=none}`** css value "display" that starts with "none"
	 * - **`E{display$=none}`** css value "display" that ends with "none"
	 * - **`E{display*=none}`** css value "display" that contains the substring "none"
	 * - **`E{display%=2}`** css value "display" that is evenly divisible by 2
	 * - **`E{display!=none}`** css value "display" that does not equal "none"
	 * 
	 * ## XML Namespaces:
	 * 
	 * - **`ns|E`** an element with tag E and namespace prefix ns
	 * @singleton (definition)
	 */
	interface Query extends Ext.Base {
		/** 
		 * Collection of matching regular expressions and code snippets.
		 * Each capture group within `()` will be replace the `{}` in the select
		 * statement as specified by their index.
		 * @property
		 * @public (property)
		 * @type {object}
		 */
		matchers?: object;
		/** 
		 * Collection of operator comparison functions.
		 * The default operators are `=`, `!=`, `^=`, `$=`, `*=`, `%=`, `|=` and `~=`.
		 * 
		 * New operators can be added as long as the match the format _c_`=` where _c_
		 * is any character other than space, `&gt;`, or `&lt;`.
		 * 
		 * Operator functions are passed the following parameters:
		 * 
		 * - `propValue` : The property value to test.
		 * - `compareTo` : The value to compare to.
		 * @property
		 * @public (property)
		 * @type {object}
		 */
		operators?: object;
		/** 
		 * Object hash of "pseudo class" filter functions which are used when filtering selections.
		 * Each function is passed two parameters:
		 * 
		 * - **c** : Array
		 *   An Array of DOM elements to filter.
		 * - **v** : String
		 *   The argument (if any) supplied in the selector.
		 * 
		 * A filter function returns an Array of DOM elements which conform to the pseudo class.
		 * In addition to the provided pseudo classes listed above such as `first-child` and `nth-child`,
		 * developers may add additional, custom psuedo class filters to select elements according to application-specific requirements.
		 * 
		 * For example, to filter `a` elements to only return links to **external** resources:
		 * 
		 *    Ext.DomQuery.pseudos.external = function(c, v) {
		 *        var r = [], ri = -1;
		 *        for(var i = 0, ci; ci = c[i]; i++) {
		 *            // Include in result set only if it's a link to an external resource
		 *            if (ci.hostname != location.hostname) {
		 *                r[++ri] = ci;
		 *            }
		 *        }
		 *        return r;
		 *    };
		 * 
		 * Then external links could be gathered with the following statement:
		 * 
		 *    var externalLinks = Ext.select("a:external");
		 * 
		 * @property
		 * @public (property)
		 * @type {object}
		 */
		pseudos?: object;
		/** 
		 * Compiles a selector/xpath query into a reusable function. The returned function
		 * takes one parameter "root" (optional), which is the context node from where the query should start.
		 * @method
		 * @public (method)
		 * @param   {string}   selector The selector/xpath query
		 * @param   {string}   [type]   Either "select" or "simple" for a simple selector match
		 * @returns {Function}          
		 */
		compile? (selector: string, type?: string): ExtGlobalFunction;
		/** 
		 * Filters an array of elements to only include matches of a simple selector
		 * @method
		 * @public (method)
		 * @param   {HTMLElement[]} el         An array of elements to filter
		 * @param   {string}        selector   The simple selector to test
		 * @param   {boolean}       nonMatches
		 * If true, it returns the elements that DON'T match the selector instead of the
		 * ones that match
		 * @returns {HTMLElement[]} 
		 * An Array of DOM elements which match the selector. If there are no matches, and empty
		 * Array is returned.
		 */
		filter? (el: HTMLElement[], selector: string, nonMatches: boolean): HTMLElement[];
		/** 
		 * Get the text value for a node, optionally replacing null with the defaultValue.
		 * @method
		 * @public (method)
		 * @param   {object} node           The node
		 * @param   {string} [defaultValue] When specified, this is return as empty value.
		 * @returns {string}                The value
		 */
		getNodeValue? (node: object, defaultValue?: string): string;
		/** 
		 * Returns true if the passed element(s) match the passed simple selector
		 * @method
		 * @public (method)
		 * @param   {string|HTMLElement|HTMLElement[]} el       An element id, element or array of elements
		 * @param   {string}                           selector The simple selector to test
		 * @returns {boolean}                                   
		 */
		is? (el: string | HTMLElement | HTMLElement[], selector: string): boolean;
		/** 
		 * Selects an array of DOM nodes using JavaScript-only implementation.
		 * 
		 * Use [select](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html#method-select) to take advantage of browsers built-in support for CSS selectors.
		 * @method
		 * @public (method)
		 * @param   {string}             selector The selector/xpath query (can be a comma separated list of selectors)
		 * @param   {HTMLElement|string} [root]   The start of the query.
		 * @returns {HTMLElement[]}      
		 * An Array of DOM elements which match the selector. If there are
		 * no matches, and empty Array is returned.
		 */
		jsSelect? (selector: string, root?: HTMLElement | string): HTMLElement[];
		/** 
		 * Selects an array of DOM nodes by CSS/XPath selector.
		 * 
		 * Uses [document.querySelectorAll](https://developer.mozilla.org/en/DOM/document.querySelectorAll) if browser supports that, otherwise falls back to
		 * [jsSelect](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html#method-jsSelect) to do the work.
		 * @method
		 * @public (method)
		 * @param   {string}        path     The selector/xpath query
		 * @param   {HTMLElement}   [root]   The start of the query.
		 * @param   {string}        [type]
		 * Either "select" or "simple" for a simple selector match (only valid when
		 * used when the call is deferred to the jsSelect method)
		 * @param   {boolean}       [single] Pass `true` to select only the first matching node using `document.querySelector` (where available)
		 * @returns {HTMLElement[]}          An array of DOM elements (not a NodeList as returned by `querySelectorAll`).
		 */
		select? (path: string, root?: HTMLElement, type?: string, single?: boolean): HTMLElement[];
		/** 
		 * Selects a single element.
		 * @method
		 * @public (method)
		 * @param   {string}      selector The selector/xpath query
		 * @param   {HTMLElement} [root]   The start of the query.
		 * @returns {HTMLElement}          The DOM element which matched the selector.
		 */
		selectNode? (selector: string, root?: HTMLElement): HTMLElement;
		/** 
		 * Selects the value of a node, parsing integers and floats.
		 * Returns the defaultValue, or 0 if none is specified.
		 * @method
		 * @public (method)
		 * @param   {string}      selector       The selector/xpath query
		 * @param   {HTMLElement} [root]         The start of the query.
		 * @param   {number}      [defaultValue] When specified, this is return as empty value.
		 * @returns {number}                     
		 */
		selectNumber? (selector: string, root?: HTMLElement, defaultValue?: number): number;
		/** 
		 * Selects the value of a node, optionally replacing null with the defaultValue.
		 * @method
		 * @public (method)
		 * @param   {string}      selector       The selector/xpath query
		 * @param   {HTMLElement} [root]         The start of the query.
		 * @param   {string}      [defaultValue] When specified, this is return as empty value.
		 * @returns {string}                     
		 */
		selectValue? (selector: string, root?: HTMLElement, defaultValue?: string): string;
	}
	/** 
	 * Simple class that can provide a shadow effect for any absolutely positioned [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
	 * 
	 * Not meant to be used directly. To apply a shadow to an Element use the
	 * [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow) method.
	 * @private (class)
	 */
	class Shadow extends Ext.dom.Underlay {}
	/** 
	 * Simple class that provides an iframe shim for any absolutely positioned [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to prevent windowed objects from showing through.
	 * 
	 * Not meant to be used directly. Internally shims are applied to Elements using
	 * [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).  Developers should use the
	 * [shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim) config to add shims to their
	 * [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) or set Ext.useShims=true.
	 * @private (class)
	 */
	class Shim extends Ext.dom.Underlay {}
	/** 
	 * A class that provides an underlay element which displays behind an absolutely positioned
	 * target element and tracks its size and position. Abstract base class for
	 * [Ext.dom.Shadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html) and [Ext.dom.Shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html)
	 * @private (class)
	 */
	class Underlay extends Ext.Base {}
	/** 
	 * Private utility class that manages the internal cache for [Underlays](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html)
	 * and [Shims](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html).
	 * @private (class)
	 */
	class UnderlayPool extends Ext.Base {}
}
declare namespace Ext.dom.Element {
	interface CLIP extends Number {}
	interface DISPLAY extends Number {}
	interface OFFSETS extends Number {}
	interface VISIBILITY extends Number {}
}
declare namespace Ext {
	class CompositeElement extends Ext.dom.CompositeElement {}
	class CompositeElementLite extends Ext.dom.CompositeElementLite {}
}
declare namespace Ext.core {
	interface DomQuery extends Ext.dom.Query {}
}
declare namespace Ext {
	class dom {
		/** 
		 * Garbage collector for [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  Automatically cleans up Elements
		 * that are no longer in the dom, but were not properly destroyed using
		 * [destroy()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy).  Recommended practice is for Components to
		 * clean up their own elements, but the GarbageCollector runs on regularly scheduled
		 * intervals to attempt to clean up orphaned Elements that may have slipped through the cracks.
		 * @private (class)
		 * @singleton (instance)
		 */
		static readonly GarbageCollector?: Ext.dom.GarbageCollector;
		/** 
		 * [Ext.dom.Helper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html)
		 * The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or
		 * using HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.
		 * 
		 * ## DomHelper element specification object
		 * 
		 * A specification object is used when creating elements. Attributes of this object are assumed to be element
		 * attributes, except for 4 special attributes:
		 * 
		 * - **tag**: The tag name of the element
		 * - **children (or cn)**: An array of the same kind of element definition objects to be created and appended. These
		 *   can be nested as deep as you want.
		 * - **cls**: The class attribute of the element. This will end up being either the "class" attribute on a HTML
		 *   fragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.
		 * - **html**: The innerHTML for the element
		 * 
		 * ## Insertion methods
		 * 
		 * Commonly used insertion methods:
		 * 
		 * - [append](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-append)
		 * - [insertBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertBefore)
		 * - [insertAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertAfter)
		 * - [overwrite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-overwrite)
		 * - [insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml)
		 * 
		 * ## Example
		 * 
		 * This is an example, where an unordered list with 3 children items is appended to an existing element with id
		 * 'my-div':
		 * 
		 *    var dh = Ext.DomHelper; // create shorthand alias
		 *    // specification object
		 *    var spec = {
		 *        id: 'my-ul',
		 *        tag: 'ul',
		 *        cls: 'my-list',
		 *        // append children after creating
		 *        children: [     // may also specify 'cn' instead of 'children'
		 *            {tag: 'li', id: 'item0', html: 'List Item 0'},
		 *            {tag: 'li', id: 'item1', html: 'List Item 1'},
		 *            {tag: 'li', id: 'item2', html: 'List Item 2'}
		 *        ]
		 *    };
		 *    var list = dh.append(
		 *        'my-div', // the context element 'my-div' can either be the id or the actual node
		 *        spec      // the specification object
		 *    );
		 * 
		 * Element creation specification parameters in this class may also be passed as an Array of specification objects.
		 * This can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add
		 * more list items to the example above:
		 * 
		 *    dh.append('my-ul', [
		 *        {tag: 'li', id: 'item3', html: 'List Item 3'},
		 *        {tag: 'li', id: 'item4', html: 'List Item 4'}
		 *    ]);
		 * 
		 * ## Templating
		 * 
		 * The real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns
		 * a Template object which can be used over and over to insert new elements. Revisiting the example above, we could
		 * utilize templating this time:
		 * 
		 *    // create the node
		 *    var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
		 *    // get template
		 *    var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
		 *    
		 *    for(var i = 0; i &lt; 5; i++){
		 *        tpl.append(list, i); // use template to append to the actual node
		 *    }
		 * 
		 * An example using a template:
		 * 
		 *    var html = '"{0}" href="{1}" class="nav"&gt;{2}';
		 *    
		 *    var tpl = new Ext.DomHelper.createTemplate(html);
		 *    tpl.append('blog-roll', ['link1', 'http://www.foxmulder.com/', "Fox's Site"]);
		 *    tpl.append('blog-roll', ['link2', 'http://www.danascully.org/', "Scully's Site"]);
		 * 
		 * The same example using named parameters:
		 * 
		 *    var html = '"{id}" href="{url}" class="nav"&gt;{text}';
		 *    
		 *    var tpl = new Ext.DomHelper.createTemplate(html);
		 *    tpl.append('blog-roll', {
		 *        id: 'link1',
		 *        url: 'http://www.danascully.org/',
		 *        text: "Scully's Site"
		 *    });
		 *    tpl.append('blog-roll', {
		 *        id: 'link2',
		 *        url: 'http://www.foxmulder.com/',
		 *        text: "Fox's Site"
		 *    });
		 * 
		 * ## Compiling Templates
		 * 
		 * Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM
		 * elements using the same template, you can increase performance even further by "compiling" the template. The way
		 * "compile()" works is the template is parsed and broken up at the different variable points and a dynamic function is
		 * created and eval'ed. The generated function performs string concatenation of these parts and the passed variables
		 * instead of using regular expressions.
		 * 
		 *    var html = '"{id}" href="{url}" class="nav"&gt;{text}';
		 *    
		 *    var tpl = new Ext.DomHelper.createTemplate(html);
		 *    tpl.compile();
		 *    
		 *    // ... use template like normal
		 * 
		 * ## Performance Boost
		 * 
		 * DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can
		 * significantly boost performance.
		 * 
		 * Element creation specification parameters may also be strings which are used as innerHTML.
		 * @singleton (instance)
		 */
		static readonly Helper?: Ext.dom.Helper;
		/** 
		 * [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html)
		 * Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes
		 * and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
		 * 
		 * DomQuery supports most of the [CSS3 selectors spec](http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors), along with some custom selectors and basic XPath.
		 * 
		 * All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example
		 * `div.foo:nth-child(odd)[@foo=bar].bar:first` would be a perfectly valid selector. Node filters are processed
		 * in the order in which they appear, which allows you to optimize your queries for your document structure.
		 * 
		 * ## Simple Selectors
		 * 
		 * For performance reasons, some query methods accept selectors that are termed as **simple selectors**. A simple
		 * selector is a selector that does not include contextual information about any parent/sibling elements.
		 * 
		 * Some examples of valid simple selectors:
		 * 
		 *    var simple = '.foo'; // Only asking for the class name on the element
		 *    var simple = 'div.bar'; // Only asking for the tag/class name on the element
		 *    var simple = '[href];' // Asking for an attribute on the element.
		 *    var simple = ':not(.foo)'; // Only asking for the non-matches against the class name
		 *    var simple = 'span:first-child'; // Doesn't require any contextual information about the parent node
		 * 
		 * Simple examples of invalid simple selectors:
		 * 
		 *    var notSimple = 'div.foo div.bar'; // Requires matching a parent node by class name
		 *    var notSimple = 'span + div'; //  Requires matching a sibling by tag name
		 * 
		 * ## Element Selectors:
		 * 
		 * - **`*`** any element
		 * - **`E`** an element with the tag E
		 * - **`E F`** All descendent elements of E that have the tag F
		 * - **`E &gt; F`** or **E/F** all direct children elements of E that have the tag F
		 * - **`E + F`** all elements with the tag F that are immediately preceded by an element with the tag E
		 * - **`E ~ F`** all elements with the tag F that are preceded by a sibling element with the tag E
		 * 
		 * ## Attribute Selectors:
		 * 
		 * The use of `@` and quotes are optional. For example, `div[@foo='bar']` is also a valid attribute selector.
		 * 
		 * - **`E[foo]`** has an attribute "foo"
		 * - **`E[foo=bar]`** has an attribute "foo" that equals "bar"
		 * - **`E[foo^=bar]`** has an attribute "foo" that starts with "bar"
		 * - **`E[foo$=bar]`** has an attribute "foo" that ends with "bar"
		 * - **`E[foo*=bar]`** has an attribute "foo" that contains the substring "bar"
		 * - **`E[foo%=2]`** has an attribute "foo" that is evenly divisible by 2
		 * - **`E[foo!=bar]`** attribute "foo" does not equal "bar"
		 * 
		 * ## Pseudo Classes:
		 * 
		 * - **`E:first-child`** E is the first child of its parent
		 * - **`E:last-child`** E is the last child of its parent
		 * - **`E:nth-child(_n_)`** E is the _n_th child of its parent (1 based as per the spec)
		 * - **`E:nth-child(odd)`** E is an odd child of its parent
		 * - **`E:nth-child(even)`** E is an even child of its parent
		 * - **`E:only-child`** E is the only child of its parent
		 * - **`E:checked`** E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
		 * - **`E:first`** the first E in the resultset
		 * - **`E:last`** the last E in the resultset
		 * - **`E:nth(_n_)`** the _n_th E in the resultset (1 based)
		 * - **`E:odd`** shortcut for :nth-child(odd)
		 * - **`E:even`** shortcut for :nth-child(even)
		 * - **`E:contains(foo)`** E's innerHTML contains the substring "foo"
		 * - **`E:nodeValue(foo)`** E contains a textNode with a nodeValue that equals "foo"
		 * - **`E:not(S)`** an E element that does not match simple selector S
		 * - **`E:has(S)`** an E element that has a descendent that matches simple selector S
		 * - **`E:next(S)`** an E element whose next sibling matches simple selector S
		 * - **`E:prev(S)`** an E element whose previous sibling matches simple selector S
		 * - **`E:any(S1|S2|S2)`** an E element which matches any of the simple selectors S1, S2 or S3
		 * - **`E:visible(true)`** an E element which is deeply visible according to [Ext.dom.Element.isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible)
		 * 
		 * ## CSS Value Selectors:
		 * 
		 * - **`E{display=none}`** css value "display" that equals "none"
		 * - **`E{display^=none}`** css value "display" that starts with "none"
		 * - **`E{display$=none}`** css value "display" that ends with "none"
		 * - **`E{display*=none}`** css value "display" that contains the substring "none"
		 * - **`E{display%=2}`** css value "display" that is evenly divisible by 2
		 * - **`E{display!=none}`** css value "display" that does not equal "none"
		 * 
		 * ## XML Namespaces:
		 * 
		 * - **`ns|E`** an element with tag E and namespace prefix ns
		 * @singleton (instance)
		 */
		static readonly Query?: Ext.dom.Query;
	}
}
declare namespace Ext.dom.Element {
	class Fly extends Ext.dom.Fly {}
}
declare namespace Ext {
	interface DomHelper extends Ext.dom.Helper {}
	interface DomQuery extends Ext.dom.Query {}
	class Element extends Ext.dom.Element {}
	class Layer extends Ext.dom.Layer {}
	class Shadow extends Ext.dom.Shadow {}
}
declare namespace Ext.dom.CompositeElement {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.dom.CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The methods from
	 * these classes will be performed on all the elements in this collection.
	 * 
	 * All methods return _this_ and can be chained.
	 * 
	 * Usage:
	 * 
	 *     var els = Ext.select("#some-el div.some-class", true);
	 *     // or select directly from an existing element
	 *     var el = Ext.get('some-el');
	 *     el.select('div.some-class', true);
	 *    
	 *     els.setWidth(100); // all elements become 100 width
	 *     els.hide(true); // all elements fade out and hide
	 *     // or
	 *     els.setWidth(100).hide(true);
	 * 
	 */
	interface Def extends Ext.dom.CompositeElement {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.dom.CompositeElement.Cfg}
		 */
		config?: Ext.dom.CompositeElement.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.dom.CompositeElement.Statics|Ext.dom.CompositeElementLite.Statics|Ext.Base.Statics}  
		 * @type {Ext.dom.CompositeElement.Statics}
		 */
		statics?: (() => Ext.dom.CompositeElement.Statics | Ext.dom.CompositeElementLite.Statics | Ext.Base.Statics) | Ext.dom.CompositeElement.Statics | any;
	}
}
declare namespace Ext.dom.CompositeElementLite {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.dom.CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The
	 * methods from these classes will be performed on all the elements in this collection.
	 * 
	 * Example:
	 * 
	 *    var els = Ext.select("#some-el div.some-class");
	 *    // or select directly from an existing element
	 *    var el = Ext.get('some-el');
	 *    el.select('div.some-class');
	 *    
	 *    els.setWidth(100); // all elements become 100 width
	 *    els.hide(true); // all elements fade out and hide
	 *    // or
	 *    els.setWidth(100).hide(true);
	 * 
	 */
	interface Def extends Ext.dom.CompositeElementLite {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.dom.CompositeElementLite.Cfg}
		 */
		config?: Ext.dom.CompositeElementLite.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.dom.CompositeElementLite.Statics|Ext.Base.Statics}  
		 * @type {Ext.dom.CompositeElementLite.Statics}
		 */
		statics?: (() => Ext.dom.CompositeElementLite.Statics | Ext.Base.Statics) | Ext.dom.CompositeElementLite.Statics | any;
	}
}
declare namespace Ext.dom.Element {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
	 * Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
	 * 
	 * **Note:** The events included in this Class are the ones we've found to be the most commonly used. Many events are
	 * not listed here due to the expedient rate of change across browsers. For a more comprehensive list, please visit the
	 * following resources:
	 * 
	 * - [Mozilla Event Reference Guide](https://developer.mozilla.org/en-US/docs/Web/Events)
	 * - [W3 Pointer Events](http://www.w3.org/TR/pointerevents/)
	 * - [W3 Touch Events](http://www.w3.org/TR/touch-events/)
	 * - [W3 DOM 2 Events](http://www.w3.org/TR/DOM-Level-2-Events/)
	 * - [W3 DOM 3 Events](http://www.w3.org/TR/DOM-Level-3-Events/)
	 * 
	 * ## Usage
	 * 
	 *    // by id
	 *    var el = Ext.get("my-div");
	 *    
	 *    // by DOM element reference
	 *    var el = Ext.get(myDivElement);
	 * 
	 * ## Selecting Descendant Elements
	 * 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances can be used to select descendant nodes using CSS selectors.
	 * There are 3 methods that can be used for this purpose, each with a slightly different
	 * twist:
	 * 
	 * - [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)
	 * - [selectNode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-selectNode)
	 * - [select](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-select)
	 * 
	 * These methods can accept any valid CSS selector since they all use
	 * [querySelectorAll](http://www.w3.org/TR/css3-selectors/) under the hood. The primary
	 * difference between these three methods is their return type:
	 * 
	 * To get an array of HTMLElement instances matching the selector '.foo' use the query
	 * method:
	 * 
	 *    element.query('.foo');
	 * 
	 * This can easily be transformed into an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances by setting
	 * the `asDom` parameter to `false`:
	 * 
	 *    element.query('.foo', false);
	 * 
	 * If the desired result is only the first matching HTMLElement use the selectNode method:
	 * 
	 *    element.selectNode('.foo');
	 * 
	 * Once again, the dom node can be wrapped in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) by setting the `asDom`
	 * parameter to `false`:
	 * 
	 *    element.selectNode('.foo', false);
	 * 
	 * The `select` method is used when the desired return type is a [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) or a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html).  These are collections of elements that can be operated on as a
	 * group using any of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).  The only difference between the two
	 * is that CompositeElementLite is a collection of HTMLElement instances, while
	 * CompositeElement is a collection of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  To retrieve a
	 * CompositeElementLite that represents a collection of HTMLElements for selector '.foo':
	 * 
	 *    element.select('.foo');
	 * 
	 * For a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html) simply pass `true` as the
	 * `composite` parameter:
	 * 
	 *    element.select('.foo', true);
	 * 
	 * The query selection methods can be used even if you don't have a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to
	 * start with For example to select an array of all HTMLElements in the document that match the
	 * selector '.foo', simply wrap the document object in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance using
	 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly):
	 * 
	 *    Ext.fly(document).query('.foo');
	 * 
	 * # Animations
	 * 
	 * When an element is manipulated, by default there is no animation.
	 * 
	 *    var el = Ext.get("my-div");
	 *    
	 *    // no animation
	 *    el.setWidth(100);
	 * 
	 * specified as boolean (true) for default animation effects.
	 * 
	 *    // default animation
	 *    el.setWidth(100, true);
	 * 
	 * To configure the effects, an object literal with animation options to use as the Element animation configuration
	 * object can also be specified. Note that the supported Element animation configuration options are a subset of the
	 * [Ext.fx.Anim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.fx.Anim.html) animation options specific to Fx effects. The supported Element animation configuration options
	 * are:
	 * 
	 *    Option    Default   Description
	 *    --------- --------  ---------------------------------------------
	 *    duration  350       The duration of the animation in milliseconds
	 *    easing    easeOut   The easing method
	 *    callback  none      A function to execute when the anim completes
	 *    scope     this      The scope (this) of the callback function
	 * 
	 * Usage:
	 * 
	 *    // Element animation options object
	 *    var opt = {
	 *        duration: 1000,
	 *        easing: 'elasticIn',
	 *        callback: this.foo,
	 *        scope: this
	 *    };
	 *    // animation with some options set
	 *    el.setWidth(100, opt);
	 * 
	 * The Element animation object being used for the animation will be set on the options object as "anim", which allows
	 * you to stop or manipulate the animation. Here is an example:
	 * 
	 *    // using the "anim" property to get the Anim object
	 *    if(opt.anim.isAnimated()){
	 *        opt.anim.stop();
	 *    }
	 * 
	 */
	interface Def extends Ext.dom.Element {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		config?: object;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.dom.Element.Statics|Ext.Base.Statics}  
		 * @type {Ext.dom.Element.Statics}
		 */
		statics?: (() => Ext.dom.Element.Statics | Ext.Base.Statics) | Ext.dom.Element.Statics | any;
	}
}
declare namespace Ext.dom.Fly {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.dom.Fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html)
	 * A flyweight [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) that can be dynamically attached to a DOM node.
	 * In general this class should not be instantiated directly.  Use [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)
	 * to create and retrieve Fly instances.
	 */
	interface Def extends Ext.dom.Fly {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		config?: object;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.dom.Fly.Statics|Ext.dom.Element.Statics|Ext.Base.Statics}  
		 * @type {Ext.dom.Fly.Statics}
		 */
		statics?: (() => Ext.dom.Fly.Statics | Ext.dom.Element.Statics | Ext.Base.Statics) | Ext.dom.Fly.Statics | any;
	}
}
declare namespace Ext.dom.Layer {
	/** 
	 * @definitions
	 * Config interface to declare class: 
	 * [Ext.dom.Layer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html)
	 * An extended [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object that supports a shadow and shim
	 */
	interface Def extends Ext.dom.Layer {
		/** 
		 * List of short aliases for class names. An alias consists of a namespace and a name
		 * concatenated by a period as &#60;namespace&#62;.&#60;name&#62;
		 * 
		 * - **namespace** - The namespace describes what kind of alias this is and must be
		 *   all lowercase.
		 * - **name** - The name of the alias which allows the lazy-instantiation via the
		 *   alias. The name shouldn't contain any periods.
		 * 
		 * A list of namespaces and the usages are:
		 * 
		 * - **feature** - [Grid](https://docs.sencha.com/extjs/6.0.1/classic/Ext.grid.Panel.html) features
		 * - **plugin** - Plugins
		 * - **store** - [Ext.data.Store](https://docs.sencha.com/extjs/6.0.1/classic/Ext.data.Store.html)
		 * - **widget** - Components
		 * 
		 * Most useful for defining xtypes for widgets:
		 * 
		 *    Ext.define('MyApp.CoolPanel', {
		 *        extend: 'Ext.panel.Panel',
		 *        alias: ['widget.coolpanel'],
		 *        title: 'Yeah!'
		 *    });
		 *    
		 *    // Using Ext.create
		 *    Ext.create('widget.coolpanel');
		 *    
		 *    // Using the shorthand for defining widgets by xtype
		 *    Ext.widget('panel', {
		 *        items: [
		 *            {xtype: 'coolpanel', html: 'Foo'},
		 *            {xtype: 'coolpanel', html: 'Bar'}
		 *        ]
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alias?: string | string[];
		/** 
		 * Defines alternate names for this class.  For example:
		 * 
		 *    Ext.define('Developer', {
		 *        alternateClassName: ['Coder', 'Hacker'],
		 *        code: function(msg) {
		 *            alert('Typing... ' + msg);
		 *        }
		 *    });
		 *    
		 *    var joe = Ext.create('Developer');
		 *    joe.code('stackoverflow');
		 *    
		 *    var rms = Ext.create('Hacker');
		 *    rms.code('hack hack');
		 * 
		 * @property
		 * @protected (property)
		 * @type {string|string[]}
		 */
		alternateClassName?: string | string[];
		/** 
		 * This configuration works in a very similar manner to the [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config) option.
		 * The difference is that the configurations are only ever processed when the first instance
		 * of that class is created. The processed value is then stored on the class prototype and
		 * will not be processed on subsequent instances of the class. Getters/setters will be generated
		 * in exactly the same way as [config](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-config).
		 * 
		 * This option is useful for expensive objects that can be shared across class instances.
		 * The class itself ensures that the creation only occurs once.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		cachedConfig?: object;
		/** 
		 * List of configuration options with their default values.
		 * 
		 * **Note:** You need to make sure [Ext.Base.initConfig](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig) is called from your constructor if you are defining
		 * your own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter
		 * methods will not be initialized.
		 * 
		 * Each config item will have its own setter and getter method automatically generated inside the class prototype
		 * during class creation time, if the class does not have those methods explicitly defined.
		 * 
		 * As an example, let's convert the name property of a Person class to be a config item, then add extra age and
		 * gender items.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            name: 'Mr. Unknown',
		 *            age: 0,
		 *            gender: 'Male'
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *    
		 *            return this;
		 *        }
		 *    
		 *        // ...
		 *    });
		 * 
		 * Within the class, this.name still has the default value of "Mr. Unknown". However, it's now publicly accessible
		 * without sacrificing encapsulation, via setter and getter methods.
		 * 
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 35
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 35
		 *    alert(jacky.getGender());   // alerts "Male"
		 *    
		 *    jacky.walk(10);             // alerts "Jacky is walking 10 steps"
		 *    
		 *    jacky.setName("Mr. Nguyen");
		 *    alert(jacky.getName());     // alerts "Mr. Nguyen"
		 *    
		 *    jacky.walk(10);             // alerts "Mr. Nguyen is walking 10 steps"
		 * 
		 * Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.
		 * Two key things happened:
		 * 
		 * - The provided config object when the class is instantiated is recursively merged with the default config object.
		 * - All corresponding setter methods are called with the merged values.
		 * 
		 * Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:
		 * 
		 * - Filtering / validation / transformation of the given value before it's actually stored within the instance.
		 * - Notification (such as firing events) / post-processing after the value has been set, or changed from a
		 *   previous value.
		 * 
		 * By standardize this common pattern, the default generated setters provide two extra template methods that you
		 * can put your own custom logics into, i.e: an "applyFoo" and "updateFoo" method for a "foo" config item, which are
		 * executed before and after the value is actually set, respectively. Back to the example class, let's validate that
		 * age must be a valid positive number, and fire an 'agechange' if the value is modified.
		 * 
		 *    Ext.define('My.sample.Person', {
		 *        config: {
		 *            // ...
		 *        },
		 *    
		 *        constructor: {
		 *            // ...
		 *        },
		 *    
		 *        applyAge: function(age) {
		 *            if (typeof age !== 'number' || age &lt; 0) {
		 *                console.warn("Invalid age, must be a positive number");
		 *                return;
		 *            }
		 *    
		 *            return age;
		 *        },
		 *    
		 *        updateAge: function(newAge, oldAge) {
		 *            // age has changed from "oldAge" to "newAge"
		 *            this.fireEvent('agechange', this, newAge, oldAge);
		 *        }
		 *    
		 *        // ...
		 *    });
		 *    
		 *    var jacky = new Person({
		 *        name: "Jacky",
		 *        age: 'invalid'
		 *    });
		 *    
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(-100));  // alerts 0
		 *    alert(jacky.getAge());      // alerts 0
		 *    
		 *    alert(jacky.setAge(35));    // alerts 0
		 *    alert(jacky.getAge());      // alerts 35
		 * 
		 * In other words, when leveraging the config feature, you mostly never need to define setter and getter methods
		 * explicitly. Instead, "apply_" and "update_" methods should be implemented where necessary. Your code will be
		 * consistent throughout and only contain the minimal logic that you actually care about.
		 * 
		 * When it comes to inheritance, the default config of the parent class is automatically, recursively merged with
		 * the child's default config. The same applies for mixins.
		 * @property
		 * @protected (property)
		 * @type {Ext.dom.Layer.Cfg}
		 */
		config?: Ext.dom.Layer.Cfg;
		/** 
		 * The parent class that this class extends. For example:
		 * 
		 *    Ext.define('Person', {
		 *        say: function(text) { alert(text); }
		 *    });
		 *    
		 *    Ext.define('Developer', {
		 *        extend: 'Person',
		 *        say: function(text) { this.callParent(["print "+text]); }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		extend?: string;
		/** 
		 * List of inheritable static methods for this class.
		 * Otherwise just like [statics](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Class.html#cfg-statics) but subclasses inherit these methods.
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		inheritableStatics?: object;
		/** 
		 * List of classes to mix into this class. For example:
		 * 
		 *    Ext.define('CanSing', {
		 *         sing: function() {
		 *             alert("For he's a jolly good fellow...")
		 *         }
		 *    });
		 *    
		 *    Ext.define('Musician', {
		 *         mixins: ['CanSing']
		 *    })
		 * 
		 * In this case the Musician class will get a `sing` method from CanSing mixin.
		 * 
		 * But what if the Musician already has a `sing` method? Or you want to mix
		 * in two classes, both of which define `sing`?  In such a cases it's good
		 * to define mixins as an object, where you assign a name to each mixin:
		 * 
		 *    Ext.define('Musician', {
		 *         mixins: {
		 *             canSing: 'CanSing'
		 *         },
		 *    
		 *         sing: function() {
		 *             // delegate singing operation to mixin
		 *             this.mixins.canSing.sing.call(this);
		 *         }
		 *    })
		 * 
		 * In this case the `sing` method of Musician will overwrite the
		 * mixed in `sing` method. But you can access the original mixed in method
		 * through special `mixins` property.
		 * @property
		 * @protected (property)
		 * @type {string[]|object}
		 */
		mixins?: string[] | object;
		/** 
		 * Overrides members of the specified `target` class.
		 * 
		 * **NOTE:** the overridden class must have been defined using
		 * [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) in order to use the `override` config.
		 * 
		 * Methods defined on the overriding class will not automatically call the methods of
		 * the same name in the ancestor class chain.  To call the parent's method of the
		 * same name you must call [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).  To skip the
		 * method of the overridden class and call its parent you will instead call
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper).
		 * 
		 * See [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define) for additional usage examples.
		 * @property
		 * @protected (property)
		 * @type {string}
		 */
		override?: string;
		/** 
		 * Allows setting config values for a class based on specific platforms. The value
		 * of this config is an object whose properties are "rules" and whose values are
		 * objects containing config values.
		 * 
		 * For example:
		 * 
		 *     Ext.define('App.view.Foo', {
		 *         extend: 'Ext.panel.Panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * In the above, "desktop" and "!desktop" are (mutually exclusive) rules. Whichever
		 * evaluates to `true` will have its configs applied to the class. In this case, only
		 * the "title" property, but the object can contain any number of config properties.
		 * In this case, the `platformConfig` is evaluated as part of the class and there is
		 * not cost for each instance created.
		 * 
		 * The rules are evaluated expressions in the context of the platform tags contained
		 * in [`Ext.platformTags`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#property-platformTags). Any properties of that object are
		 * implicitly usable (as shown above).
		 * 
		 * If a `platformConfig` specifies a config value, it will replace any values declared
		 * on the class itself.
		 * 
		 * Use of `platformConfig` on instances is handled by the config system when classes
		 * call [`initConfig`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-initConfig). For example:
		 * 
		 *     Ext.create({
		 *         xtype: 'panel',
		 *    
		 *         platformConfig: {
		 *             desktop: {
		 *                 title: 'Some Rather Descriptive Title'
		 *             },
		 *    
		 *             '!desktop': {
		 *                 title: 'Short Title'
		 *             }
		 *         }
		 *     });
		 * 
		 * The following is equivalent to the above:
		 * 
		 *     if (Ext.platformTags.desktop) {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Some Rather Descriptive Title'
		 *         });
		 *     } else {
		 *         Ext.create({
		 *             xtype: 'panel',
		 *             title: 'Short Title'
		 *         });
		 *     }
		 * 
		 * To adjust configs based on dynamic conditions, see [`Ext.mixin.Responsive`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Responsive.html).
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		platformConfig?: object;
		/** 
		 * The `privates` config is a list of methods intended to be used internally by the
		 * framework.  Methods are placed in a `privates` block to prevent developers from
		 * accidentally overriding framework methods in custom classes.
		 * 
		 *    Ext.define('Computer', {
		 *        privates: {
		 *            runFactory: function(brand) {
		 *                // internal only processing of brand passed to factory
		 *                this.factory(brand);
		 *            }
		 *        },
		 *    
		 *        factory: function (brand) {}
		 *    });
		 * 
		 * In order to override a method from a `privates` block, the overridden method must
		 * also be placed in a `privates` block within the override class.
		 * 
		 *    Ext.define('Override.Computer', {
		 *        override: 'Computer',
		 *        privates: {
		 *            runFactory: function() {
		 *                // overriding logic
		 *            }
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {object}
		 */
		privates?: object;
		/** 
		 * List of classes that have to be loaded before instantiating this class.
		 * For example:
		 * 
		 *    Ext.define('Mother', {
		 *        requires: ['Child'],
		 *        giveBirth: function() {
		 *            // we can be sure that child class is available.
		 *            return new Child();
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		requires?: string[];
		/** 
		 * When set to true, the class will be instantiated as singleton.  For example:
		 * 
		 *    Ext.define('Logger', {
		 *        singleton: true,
		 *        log: function(msg) {
		 *            console.log(msg);
		 *        }
		 *    });
		 *    
		 *    Logger.log('Hello');
		 * 
		 * @property
		 * @protected (property)
		 * @type {boolean}
		 */
		singleton?: boolean;
		/** 
		 * List of optional classes to load together with this class. These aren't neccessarily loaded before
		 * this class is created, but are guaranteed to be available before [Ext.onReady](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-onReady) listeners are
		 * invoked. For example:
		 * 
		 *    Ext.define('Mother', {
		 *        uses: ['Child'],
		 *        giveBirth: function() {
		 *            // This code might, or might not work:
		 *            // return new Child();
		 *    
		 *            // Instead use Ext.create() to load the class at the spot if not loaded already:
		 *            return Ext.create('Child');
		 *        }
		 *    });
		 * 
		 * @property
		 * @protected (property)
		 * @type {string[]}
		 */
		uses?: string[];
		/** 
		 * **Note:** Only applies to [Ext.Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) derived classes when used as
		 * a config in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define).
		 * 
		 * This property provides a shorter alternative to creating objects than using a full
		 * class name. Using `xtype` is the most common way to define component instances,
		 * especially in a container. For example, the items in a form containing text fields
		 * could be created explicitly like so:
		 * 
		 *     items: [
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Foo'
		 *         }),
		 *         Ext.create('Ext.form.field.Text', {
		 *             fieldLabel: 'Bar'
		 *         }),
		 *         Ext.create('Ext.form.field.Number', {
		 *             fieldLabel: 'Num'
		 *         })
		 *     ]
		 * 
		 * But by using `xtype`, the above becomes:
		 * 
		 *     items: [
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Foo'
		 *         },
		 *         {
		 *             xtype: 'textfield',
		 *             fieldLabel: 'Bar'
		 *         },
		 *         {
		 *             xtype: 'numberfield',
		 *             fieldLabel: 'Num'
		 *         }
		 *     ]
		 * 
		 * When the `xtype` is common to many items, [Ext.container.Container.defaultType](https://docs.sencha.com/extjs/6.0.1/classic/Ext.container.Container.html#cfg-defaultType)
		 * is another way to specify the `xtype` for all items that don't have an explicit `xtype`:
		 * 
		 *     defaultType: 'textfield',
		 *     items: [
		 *         { fieldLabel: 'Foo' },
		 *         { fieldLabel: 'Bar' },
		 *         { fieldLabel: 'Num', xtype: 'numberfield' }
		 *     ]
		 * 
		 * Each member of the `items` array is now just a "configuration object". These objects
		 * are used to create and configure component instances. A configuration object can be
		 * manually used to instantiate a component using [Ext.widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-widget):
		 * 
		 *     var text1 = Ext.create('Ext.form.field.Text', {
		 *         fieldLabel: 'Foo'
		 *     });
		 *    
		 *     // or alternatively:
		 *    
		 *     var text1 = Ext.widget({
		 *         xtype: 'textfield',
		 *         fieldLabel: 'Foo'
		 *     });
		 * 
		 * This conversion of configuration objects into instantiated components is done when
		 * a container is created as part of its {Ext.container.AbstractContainer#initComponent}
		 * process. As part of the same process, the `items` array is converted from its raw
		 * array form into a [Ext.util.MixedCollection](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.MixedCollection.html) instance.
		 * 
		 * You can define your own `xtype` on a custom [component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) by specifying
		 * the `xtype` property in [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define). For example:
		 * 
		 *    Ext.define('MyApp.PressMeButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'pressmebutton',
		 *        text: 'Press Me'
		 *    });
		 * 
		 * Care should be taken when naming an `xtype` in a custom component because there is
		 * a single, shared scope for all xtypes. Third part components should consider using
		 * a prefix to avoid collisions.
		 * 
		 *    Ext.define('Foo.form.CoolButton', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'ux-coolbutton',
		 *        text: 'Cool!'
		 *    });
		 * 
		 * See [Ext.enums.Widget](https://docs.sencha.com/extjs/6.0.1/classic/Ext.enums.Widget.html) for list of all available xtypes.
		 * @property
		 * @protected (property)
		 * @type {Ext.enums.Widget}
		 */
		xtype?: Ext.enums.Widget;
		/** 
		 * @mixed
		 * @method
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @configuration
		 * List of static methods for this class. For example:
		 * 
		 *    Ext.define('Computer', {
		 *         statics: {
		 *             factory: function(brand) {
		 *                 // 'this' in static methods refer to the class itself
		 *                 return new this(brand);
		 *             }
		 *         },
		 *    
		 *         constructor: function() { ... }
		 *    });
		 *    
		 *    var dellComputer = Computer.factory('Dell');
		 * 
		 * @protected (method+configuration)
		 * @returns {Ext.dom.Layer.Statics|Ext.dom.Element.Statics|Ext.Base.Statics}  
		 * @type {Ext.dom.Layer.Statics}
		 */
		statics?: (() => Ext.dom.Layer.Statics | Ext.dom.Element.Statics | Ext.Base.Statics) | Ext.dom.Layer.Statics | any;
	}
}
declare namespace Ext.dom.ButtonElement {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.ButtonElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.ButtonElement.html)
	 * A special [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) used by Buttons.  Since buttons use `display:table` elements
	 * for their layout, some special adjustments are needed when the width switches from
	 * auto to fixed width and back.
	 * 
	 * When the button has a width other than `auto`, and a right-aligned arrow, long button
	 * text will cause the arrow to disappear off the right edge of the button if the btnWrap
	 * element has table-layout:auto.  To prevent this, we need to set table-layout:fixed
	 * on the btnWrap when the button has a width, however, when the button is shrinkwrap
	 * width the btnWrap cannot have table-layout:fixed because its width:100% style will
	 * cause the button to expand outward.
	 * 
	 * Additionally, in shrinkWrap height mode, the button css sets a height on the btnEl
	 * element, but if the height is being stretched, the btnEl's height will cause the contents
	 * to be incorrectly vertically centered, so we dynamically set the btnEl's height to
	 * "auto" in fixed-height mode.
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                         members    The members to add to this class.
		 * @param   {boolean}                                        [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                        [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.ButtonElement|Ext.dom.Element|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.ButtonElement;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                         members
		 * @returns {Ext.dom.ButtonElement|Ext.dom.Element|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.ButtonElement;
		addStatics? (members: object): typeof Ext.dom.Element;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		_onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		_onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                         members
		 * @returns {Ext.dom.ButtonElement|Ext.dom.Element|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.ButtonElement;
		addInheritableStatics? (members: object): typeof Ext.dom.Element;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                         name
		 * @param   {object}                                         member
		 * @returns {Ext.dom.ButtonElement|Ext.dom.Element|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.ButtonElement;
		addMember? (name: object, member: object): typeof Ext.dom.Element;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.ButtonElement|Ext.dom.Element}  
		 */
		detach? (): typeof Ext.dom.ButtonElement;
		detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                         fn
		 * @param   {object}                                         scope
		 * @returns {Ext.dom.ButtonElement|Ext.dom.Element|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.ButtonElement;
		onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.CompositeElement {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The methods from
	 * these classes will be performed on all the elements in this collection.
	 * 
	 * All methods return _this_ and can be chained.
	 * 
	 * Usage:
	 * 
	 *     var els = Ext.select("#some-el div.some-class", true);
	 *     // or select directly from an existing element
	 *     var el = Ext.get('some-el');
	 *     el.select('div.some-class', true);
	 *    
	 *     els.setWidth(100); // all elements become 100 width
	 *     els.hide(true); // all elements fade out and hide
	 *     // or
	 *     els.setWidth(100).hide(true);
	 * 
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         members    The members to add to this class.
		 * @param   {boolean}                                                        [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                                        [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.CompositeElement;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.CompositeElementLite;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         members
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.CompositeElement;
		addStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		_onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		_onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         members
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.CompositeElement;
		addInheritableStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         name
		 * @param   {object}                                                         member
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.CompositeElement;
		addMember? (name: object, member: object): typeof Ext.dom.CompositeElementLite;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite}  
		 */
		detach? (): typeof Ext.dom.CompositeElement;
		detach? (): typeof Ext.dom.CompositeElementLite;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                                         fn
		 * @param   {object}                                                         scope
		 * @returns {Ext.dom.CompositeElement|Ext.dom.CompositeElementLite|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.CompositeElement;
		onExtended? (fn: object, scope: object): typeof Ext.dom.CompositeElementLite;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.CompositeElementLite {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The
	 * methods from these classes will be performed on all the elements in this collection.
	 * 
	 * Example:
	 * 
	 *    var els = Ext.select("#some-el div.some-class");
	 *    // or select directly from an existing element
	 *    var el = Ext.get('some-el');
	 *    el.select('div.some-class');
	 *    
	 *    els.setWidth(100); // all elements become 100 width
	 *    els.hide(true); // all elements fade out and hide
	 *    // or
	 *    els.setWidth(100).hide(true);
	 * 
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS `clip` property to reduce element's dimensions to 0px by 0px, effectively
		 * making it hidden while not being truly invisible. This is useful when an element
		 * needs to be published to the Assistive Technologies such as screen readers.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 4
		 * @type {number}
		 */
		CLIP?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'display' property to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 2
		 * @type {number}
		 */
		DISPLAY?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS absolute positioning and top/left offsets to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 3
		 * @type {number}
		 */
		OFFSETS?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'visibility' property to hide the element.
		 * 
		 * Note that in this mode, [isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible) may return true
		 * for an element even though it actually has a parent element that is hidden. For this
		 * reason, and in most cases, using the [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS) mode is a better choice.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 1
		 * @type {number}
		 */
		VISIBILITY?: number;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @type {object}
		 */
		cache?: object;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @default 'input,textarea,[contenteditable="true"]'
		 * @type {string}
		 */
		editableSelector?: string;
		/** 
		 * This property indicates a minimum threshold of vertical resize movement for
		 * virtual keyboard detection.
		 * 
		 * On some mobile browsers the framework needs to keep track of whether window
		 * resize events were triggered by the opening or closing of a virtual keyboard
		 * so that it can prevent unnecessary re-layout of the viewport.  It does this
		 * by detecting resize events in the horizontal direction that occur immediately
		 * after an editable element is focused or blurred.
		 * @property
		 * @private (property)
		 * @static
		 * @default 100
		 * @type {number}
		 */
		minKeyboardHeight?: number;
		/** 
		 * True to globally disable the delegated event system.  The results of
		 * setting this to false are unpredictable since the Gesture publisher relies
		 * on delegated events in order to work correctly.  Disabling delegated events
		 * may cause Gestures to function incorrectly or to stop working completely.
		 * Use at your own risk!
		 * @property
		 * @private (property)
		 * @static
		 * @default true
		 * @type {boolean}
		 */
		useDelegatedEvents?: boolean;
		/** 
		 * The list of valid nodeTypes that are allowed to be wrapped
		 * @property
		 * @private (property)
		 * @static
		 * @default {1: 1, 9: 1}
		 * @type {object}
		 */
		validNodeTypes?: object;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                members    The members to add to this class.
		 * @param   {boolean}                               [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                               [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.CompositeElementLite;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                members
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		_onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		_onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                members
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.CompositeElementLite;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                name
		 * @param   {object}                                member
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.CompositeElementLite;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.CompositeElementLite}  
		 */
		detach? (): typeof Ext.dom.CompositeElementLite;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                fn
		 * @param   {object}                                scope
		 * @returns {Ext.dom.CompositeElementLite|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.CompositeElementLite;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Element {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
	 * Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
	 * 
	 * **Note:** The events included in this Class are the ones we've found to be the most commonly used. Many events are
	 * not listed here due to the expedient rate of change across browsers. For a more comprehensive list, please visit the
	 * following resources:
	 * 
	 * - [Mozilla Event Reference Guide](https://developer.mozilla.org/en-US/docs/Web/Events)
	 * - [W3 Pointer Events](http://www.w3.org/TR/pointerevents/)
	 * - [W3 Touch Events](http://www.w3.org/TR/touch-events/)
	 * - [W3 DOM 2 Events](http://www.w3.org/TR/DOM-Level-2-Events/)
	 * - [W3 DOM 3 Events](http://www.w3.org/TR/DOM-Level-3-Events/)
	 * 
	 * ## Usage
	 * 
	 *    // by id
	 *    var el = Ext.get("my-div");
	 *    
	 *    // by DOM element reference
	 *    var el = Ext.get(myDivElement);
	 * 
	 * ## Selecting Descendant Elements
	 * 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances can be used to select descendant nodes using CSS selectors.
	 * There are 3 methods that can be used for this purpose, each with a slightly different
	 * twist:
	 * 
	 * - [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)
	 * - [selectNode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-selectNode)
	 * - [select](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-select)
	 * 
	 * These methods can accept any valid CSS selector since they all use
	 * [querySelectorAll](http://www.w3.org/TR/css3-selectors/) under the hood. The primary
	 * difference between these three methods is their return type:
	 * 
	 * To get an array of HTMLElement instances matching the selector '.foo' use the query
	 * method:
	 * 
	 *    element.query('.foo');
	 * 
	 * This can easily be transformed into an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances by setting
	 * the `asDom` parameter to `false`:
	 * 
	 *    element.query('.foo', false);
	 * 
	 * If the desired result is only the first matching HTMLElement use the selectNode method:
	 * 
	 *    element.selectNode('.foo');
	 * 
	 * Once again, the dom node can be wrapped in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) by setting the `asDom`
	 * parameter to `false`:
	 * 
	 *    element.selectNode('.foo', false);
	 * 
	 * The `select` method is used when the desired return type is a [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) or a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html).  These are collections of elements that can be operated on as a
	 * group using any of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).  The only difference between the two
	 * is that CompositeElementLite is a collection of HTMLElement instances, while
	 * CompositeElement is a collection of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  To retrieve a
	 * CompositeElementLite that represents a collection of HTMLElements for selector '.foo':
	 * 
	 *    element.select('.foo');
	 * 
	 * For a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html) simply pass `true` as the
	 * `composite` parameter:
	 * 
	 *    element.select('.foo', true);
	 * 
	 * The query selection methods can be used even if you don't have a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to
	 * start with For example to select an array of all HTMLElements in the document that match the
	 * selector '.foo', simply wrap the document object in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance using
	 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly):
	 * 
	 *    Ext.fly(document).query('.foo');
	 * 
	 * # Animations
	 * 
	 * When an element is manipulated, by default there is no animation.
	 * 
	 *    var el = Ext.get("my-div");
	 *    
	 *    // no animation
	 *    el.setWidth(100);
	 * 
	 * specified as boolean (true) for default animation effects.
	 * 
	 *    // default animation
	 *    el.setWidth(100, true);
	 * 
	 * To configure the effects, an object literal with animation options to use as the Element animation configuration
	 * object can also be specified. Note that the supported Element animation configuration options are a subset of the
	 * [Ext.fx.Anim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.fx.Anim.html) animation options specific to Fx effects. The supported Element animation configuration options
	 * are:
	 * 
	 *    Option    Default   Description
	 *    --------- --------  ---------------------------------------------
	 *    duration  350       The duration of the animation in milliseconds
	 *    easing    easeOut   The easing method
	 *    callback  none      A function to execute when the anim completes
	 *    scope     this      The scope (this) of the callback function
	 * 
	 * Usage:
	 * 
	 *    // Element animation options object
	 *    var opt = {
	 *        duration: 1000,
	 *        easing: 'elasticIn',
	 *        callback: this.foo,
	 *        scope: this
	 *    };
	 *    // animation with some options set
	 *    el.setWidth(100, opt);
	 * 
	 * The Element animation object being used for the animation will be set on the options object as "anim", which allows
	 * you to stop or manipulate the animation. Here is an example:
	 * 
	 *    // using the "anim" property to get the Anim object
	 *    if(opt.anim.isAnimated()){
	 *        opt.anim.stop();
	 *    }
	 * 
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS `clip` property to reduce element's dimensions to 0px by 0px, effectively
		 * making it hidden while not being truly invisible. This is useful when an element
		 * needs to be published to the Assistive Technologies such as screen readers.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 4
		 * @type {number}
		 */
		CLIP?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'display' property to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 2
		 * @type {number}
		 */
		DISPLAY?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use CSS absolute positioning and top/left offsets to hide the element.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 3
		 * @type {number}
		 */
		OFFSETS?: number;
		/** 
		 * Visibility mode constant for use with [setVisibilityMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-setVisibilityMode).
		 * Use the CSS 'visibility' property to hide the element.
		 * 
		 * Note that in this mode, [isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible) may return true
		 * for an element even though it actually has a parent element that is hidden. For this
		 * reason, and in most cases, using the [OFFSETS](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-property-OFFSETS) mode is a better choice.
		 * @property
		 * @public (property)
		 * @static
		 * @readonly
		 * @default 1
		 * @type {number}
		 */
		VISIBILITY?: number;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @type {object}
		 */
		cache?: object;
		/** 
		 * @property
		 * @private (property)
		 * @static
		 * @default 'input,textarea,[contenteditable="true"]'
		 * @type {string}
		 */
		editableSelector?: string;
		/** 
		 * This property indicates a minimum threshold of vertical resize movement for
		 * virtual keyboard detection.
		 * 
		 * On some mobile browsers the framework needs to keep track of whether window
		 * resize events were triggered by the opening or closing of a virtual keyboard
		 * so that it can prevent unnecessary re-layout of the viewport.  It does this
		 * by detecting resize events in the horizontal direction that occur immediately
		 * after an editable element is focused or blurred.
		 * @property
		 * @private (property)
		 * @static
		 * @default 100
		 * @type {number}
		 */
		minKeyboardHeight?: number;
		/** 
		 * True to globally disable the delegated event system.  The results of
		 * setting this to false are unpredictable since the Gesture publisher relies
		 * on delegated events in order to work correctly.  Disabling delegated events
		 * may cause Gestures to function incorrectly or to stop working completely.
		 * Use at your own risk!
		 * @property
		 * @private (property)
		 * @static
		 * @default true
		 * @type {boolean}
		 */
		useDelegatedEvents?: boolean;
		/** 
		 * The list of valid nodeTypes that are allowed to be wrapped
		 * @property
		 * @private (property)
		 * @static
		 * @default {1: 1, 9: 1}
		 * @type {object}
		 */
		validNodeTypes?: object;
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                   members    The members to add to this class.
		 * @param   {boolean}                  [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                  [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Element|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                   members
		 * @returns {Ext.dom.Element|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Element;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		_onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		_onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                   members
		 * @returns {Ext.dom.Element|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Element;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                   name
		 * @param   {object}                   member
		 * @returns {Ext.dom.Element|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Element;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.Element}  
		 */
		detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                   fn
		 * @param   {object}                   scope
		 * @returns {Ext.dom.Element|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.ElementEvent {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.ElementEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.ElementEvent.html)
	 * A special [Ext.util.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Event.html) subclass that adds support for capture (top-down propagation)
	 * listeners, and non-delegated (directly attached to the dom) listeners.
	 * 
	 * An [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will have one instance of this class per event type that is being listened
	 * for.  The ElementEvent instance provides a single point for attaching event listeners
	 * and abstracts away important details on the timing and ordering of event firing.
	 * Internally this class manages up to 3 separate [Ext.util.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Event.html) instances.  These represent
	 * separate stacks of listeners that may be invoked during different phases of event propagation.
	 * 
	 * - `captures` - tracks listeners that should fire during the "capture" phase of the
	 *   standard delegated model (listeners attached using capture:true)
	 * - `direct` - tracks directly attached listeners, that is listeners that should fire
	 *   immediately when the event is dispatched to the dom element, before the event bubbles
	 *   upward and delegated listener processing begins
	 *   (listeners attached using delegated:false)
	 * - `directCaptures` - tracks directly attached capture listeners (only works in IE10+)
	 * 
	 * For more detail on the timing of when these event stacks are dispatched please see
	 * [Ext.event.publisher.Dom](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.publisher.Dom.html)
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                       members    The members to add to this class.
		 * @param   {boolean}                                      [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                      [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.ElementEvent|Ext.util.Event|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.ElementEvent;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.util.Event;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                       members
		 * @returns {Ext.dom.ElementEvent|Ext.util.Event|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.ElementEvent;
		addStatics? (members: object): typeof Ext.util.Event;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                       members
		 * @returns {Ext.dom.ElementEvent|Ext.util.Event|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.ElementEvent;
		addInheritableStatics? (members: object): typeof Ext.util.Event;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                       name
		 * @param   {object}                                       member
		 * @returns {Ext.dom.ElementEvent|Ext.util.Event|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.ElementEvent;
		addMember? (name: object, member: object): typeof Ext.util.Event;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                       fn
		 * @param   {object}                                       scope
		 * @returns {Ext.dom.ElementEvent|Ext.util.Event|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.ElementEvent;
		onExtended? (fn: object, scope: object): typeof Ext.util.Event;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Fly {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html)
	 * A flyweight [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) that can be dynamically attached to a DOM node.
	 * In general this class should not be instantiated directly.  Use [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)
	 * to create and retrieve Fly instances.
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                               members    The members to add to this class.
		 * @param   {boolean}                              [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                              [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Fly;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                               members
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Fly;
		addStatics? (members: object): typeof Ext.dom.Element;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		_onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		_onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                               members
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Fly;
		addInheritableStatics? (members: object): typeof Ext.dom.Element;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                               name
		 * @param   {object}                               member
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Fly;
		addMember? (name: object, member: object): typeof Ext.dom.Element;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.Fly|Ext.dom.Element}  
		 */
		detach? (): typeof Ext.dom.Fly;
		detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                               fn
		 * @param   {object}                               scope
		 * @returns {Ext.dom.Fly|Ext.dom.Element|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Fly;
		onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.GarbageCollector {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.GarbageCollector](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.GarbageCollector.html)
	 * Garbage collector for [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  Automatically cleans up Elements
	 * that are no longer in the dom, but were not properly destroyed using
	 * [destroy()](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-destroy).  Recommended practice is for Components to
	 * clean up their own elements, but the GarbageCollector runs on regularly scheduled
	 * intervals to attempt to clean up orphaned Elements that may have slipped through the cracks.
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                            members    The members to add to this class.
		 * @param   {boolean}                           [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                           [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.GarbageCollector|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.GarbageCollector;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                            members
		 * @returns {Ext.dom.GarbageCollector|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.GarbageCollector;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                            members
		 * @returns {Ext.dom.GarbageCollector|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.GarbageCollector;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                            name
		 * @param   {object}                            member
		 * @returns {Ext.dom.GarbageCollector|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.GarbageCollector;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                            fn
		 * @param   {object}                            scope
		 * @returns {Ext.dom.GarbageCollector|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.GarbageCollector;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Helper {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Helper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html)
	 * The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or
	 * using HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.
	 * 
	 * ## DomHelper element specification object
	 * 
	 * A specification object is used when creating elements. Attributes of this object are assumed to be element
	 * attributes, except for 4 special attributes:
	 * 
	 * - **tag**: The tag name of the element
	 * - **children (or cn)**: An array of the same kind of element definition objects to be created and appended. These
	 *   can be nested as deep as you want.
	 * - **cls**: The class attribute of the element. This will end up being either the "class" attribute on a HTML
	 *   fragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.
	 * - **html**: The innerHTML for the element
	 * 
	 * ## Insertion methods
	 * 
	 * Commonly used insertion methods:
	 * 
	 * - [append](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-append)
	 * - [insertBefore](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertBefore)
	 * - [insertAfter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertAfter)
	 * - [overwrite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-overwrite)
	 * - [insertHtml](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Helper.html#method-insertHtml)
	 * 
	 * ## Example
	 * 
	 * This is an example, where an unordered list with 3 children items is appended to an existing element with id
	 * 'my-div':
	 * 
	 *    var dh = Ext.DomHelper; // create shorthand alias
	 *    // specification object
	 *    var spec = {
	 *        id: 'my-ul',
	 *        tag: 'ul',
	 *        cls: 'my-list',
	 *        // append children after creating
	 *        children: [     // may also specify 'cn' instead of 'children'
	 *            {tag: 'li', id: 'item0', html: 'List Item 0'},
	 *            {tag: 'li', id: 'item1', html: 'List Item 1'},
	 *            {tag: 'li', id: 'item2', html: 'List Item 2'}
	 *        ]
	 *    };
	 *    var list = dh.append(
	 *        'my-div', // the context element 'my-div' can either be the id or the actual node
	 *        spec      // the specification object
	 *    );
	 * 
	 * Element creation specification parameters in this class may also be passed as an Array of specification objects.
	 * This can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add
	 * more list items to the example above:
	 * 
	 *    dh.append('my-ul', [
	 *        {tag: 'li', id: 'item3', html: 'List Item 3'},
	 *        {tag: 'li', id: 'item4', html: 'List Item 4'}
	 *    ]);
	 * 
	 * ## Templating
	 * 
	 * The real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns
	 * a Template object which can be used over and over to insert new elements. Revisiting the example above, we could
	 * utilize templating this time:
	 * 
	 *    // create the node
	 *    var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
	 *    // get template
	 *    var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
	 *    
	 *    for(var i = 0; i &lt; 5; i++){
	 *        tpl.append(list, i); // use template to append to the actual node
	 *    }
	 * 
	 * An example using a template:
	 * 
	 *    var html = '"{0}" href="{1}" class="nav"&gt;{2}';
	 *    
	 *    var tpl = new Ext.DomHelper.createTemplate(html);
	 *    tpl.append('blog-roll', ['link1', 'http://www.foxmulder.com/', "Fox's Site"]);
	 *    tpl.append('blog-roll', ['link2', 'http://www.danascully.org/', "Scully's Site"]);
	 * 
	 * The same example using named parameters:
	 * 
	 *    var html = '"{id}" href="{url}" class="nav"&gt;{text}';
	 *    
	 *    var tpl = new Ext.DomHelper.createTemplate(html);
	 *    tpl.append('blog-roll', {
	 *        id: 'link1',
	 *        url: 'http://www.danascully.org/',
	 *        text: "Scully's Site"
	 *    });
	 *    tpl.append('blog-roll', {
	 *        id: 'link2',
	 *        url: 'http://www.foxmulder.com/',
	 *        text: "Fox's Site"
	 *    });
	 * 
	 * ## Compiling Templates
	 * 
	 * Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM
	 * elements using the same template, you can increase performance even further by "compiling" the template. The way
	 * "compile()" works is the template is parsed and broken up at the different variable points and a dynamic function is
	 * created and eval'ed. The generated function performs string concatenation of these parts and the passed variables
	 * instead of using regular expressions.
	 * 
	 *    var html = '"{id}" href="{url}" class="nav"&gt;{text}';
	 *    
	 *    var tpl = new Ext.DomHelper.createTemplate(html);
	 *    tpl.compile();
	 *    
	 *    // ... use template like normal
	 * 
	 * ## Performance Boost
	 * 
	 * DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can
	 * significantly boost performance.
	 * 
	 * Element creation specification parameters may also be strings which are used as innerHTML.
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                  members    The members to add to this class.
		 * @param   {boolean}                 [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                 [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Helper|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Helper;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                  members
		 * @returns {Ext.dom.Helper|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Helper;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                  members
		 * @returns {Ext.dom.Helper|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Helper;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                  name
		 * @param   {object}                  member
		 * @returns {Ext.dom.Helper|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Helper;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                  fn
		 * @param   {object}                  scope
		 * @returns {Ext.dom.Helper|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Helper;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Layer {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Layer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html)
	 * An extended [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object that supports a shadow and shim
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members    The members to add to this class.
		 * @param   {boolean}                                [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Layer;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Element;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Layer;
		addStatics? (members: object): typeof Ext.dom.Element;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Gets the globally shared flyweight Element, with the passed node as the active
		 * element. Do not store a reference to this element - the dom node can be overwritten
		 * by other code. [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly) is alias for [fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-fly).
		 * 
		 * Use this to make one-time references to DOM elements which are not going to be
		 * accessed again either by application code, or by Ext's classes. If accessing an
		 * element which will be processed regularly, then [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) will be
		 * more appropriate to take advantage of the caching provided by the
		 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) class.
		 * 
		 * If this method is called with and id or element that has already been cached by
		 * a previous call to [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get)() it will return the cached Element instead of the
		 * flyweight instance.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement} dom     The DOM node or `id`.
		 * @param   {string}             [named]
		 * Allows for creation of named reusable flyweights to prevent
		 * conflicts (e.g. internally Ext uses "_global").
		 * @returns {Ext.dom.Element}    
		 * The shared Element object (or `null` if no matching
		 * element was found).
		 */
		fly? (dom: string | HTMLElement, named?: string): Ext.dom.Element;
		/** 
		 * Returns the top Element that is located at the passed coordinates
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number} x The x coordinate
		 * @param   {number} y The y coordinate
		 * @returns {string}   The found Element
		 */
		fromPoint? (x: number, y: number): string;
		/** 
		 * Retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) objects. [Ext.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-get) is alias for [get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#static-method-get).
		 * 
		 * **This method does not retrieve [Component](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html)s.** This method retrieves [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * objects which encapsulate DOM elements. To retrieve a Component by its ID, use [Ext.ComponentManager.get](https://docs.sencha.com/extjs/6.0.1/classic/Ext.ComponentManager.html#method-get).
		 * 
		 * When passing an id, it should not include the `#` character that is used for a css selector.
		 * 
		 *    // For an element with id 'foo'
		 *    Ext.get('foo'); // Correct
		 *    Ext.get('#foo'); // Incorrect
		 * 
		 * Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
		 * the same id via AJAX or DOM.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement|Ext.dom.Element} element The `id` of the node, a DOM Node or an existing Element.
		 * @returns {Ext.dom.Element}                            The Element object (or `null` if no matching element was found).
		 */
		get? (element: string | HTMLElement | Ext.dom.Element): Ext.dom.Element;
		/** 
		 * Returns the active element in the DOM. If the browser supports activeElement
		 * on the document, this is returned. If not, the focus is tracked and the active
		 * element is maintained internally.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {boolean}     asElement Return [Ext.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance instead of DOM node.
		 * @returns {HTMLElement}           The active (focused) element in the document.
		 */
		getActiveElement? (asElement: boolean): HTMLElement;
		/** 
		 * Returns the common ancestor of the two passed elements.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {Ext.dom.Element|HTMLElement} nodeA
		 * @param   {Ext.dom.Element|HTMLElement} nodeB
		 * @param   {boolean}                     returnDom Pass `true` to return a DOM element. Otherwise An [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) will be returned.
		 * @returns {Ext.dom.Element|HTMLElement}           The common ancestor.
		 */
		getCommonAncestor? (nodeA: Ext.dom.Element | HTMLElement, nodeB: Ext.dom.Element | HTMLElement, returnDom: boolean): Ext.dom.Element | HTMLElement;
		/** 
		 * Retrieves the document height
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentHeight
		 */
		getDocumentHeight? (): number;
		/** 
		 * Retrieves the document width
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  documentWidth
		 */
		getDocumentWidth? (): number;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Retrieves the current orientation of the window. This is calculated by
		 * determining if the height is greater than the width.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  Orientation of window: 'portrait' or 'landscape'
		 */
		getOrientation? (): string;
		/** 
		 * Retrieves the viewport size of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  object containing width and height properties
		 */
		getViewSize? (): object;
		/** 
		 * Retrieves the viewport height of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportHeight
		 */
		getViewportHeight? (): number;
		/** 
		 * Retrieves the viewport width of the window.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {number}  viewportWidth
		 */
		getViewportWidth? (): number;
		/** 
		 * Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
		 * For example:
		 * 
		 * - border-width -> borderWidth
		 * - padding-top -> paddingTop
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} prop The property to normalize
		 * @returns {string}      The normalized string
		 */
		normalize? (prop: string): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string} box The encoded margins
		 * @returns {object}            An object with margin sizes for top, right, bottom and left containing the unit
		 */
		parseBox? (box: number | string): object;
		/** 
		 * Converts a CSS string into an object with a property for each style.
		 * 
		 * The sample code below would return an object with 2 properties, one
		 * for background-color and one for color.
		 * 
		 *    var css = 'background-color: red; color: blue;';
		 *    console.log(Ext.dom.Element.parseStyles(css));
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string} styles A CSS string
		 * @returns {object}        styles
		 */
		parseStyles? (styles: string): object;
		/** 
		 * Selects child nodes of a given root based on the passed CSS selector.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string}                          selector The CSS selector.
		 * @param   {boolean}                         [asDom]  `false` to return an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 * @param   {HTMLElement|string}              [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {HTMLElement[]|Ext.dom.Element[]} 
		 * An Array of elements that match
		 * the selector.  If there are no matches, an empty Array is returned.
		 */
		query? (selector: string, asDom?: boolean, root?: HTMLElement | string): HTMLElement[] | Ext.dom.Element[];
		/** 
		 * Selects elements based on the passed CSS selector to enable
		 * [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) methods to be applied to many related
		 * elements in one statement through the returned
		 * [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) object.
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|HTMLElement[]}                                  selector
		 * The CSS selector or an array of
		 * elements
		 * @param   {boolean}                                               [composite]
		 * Return a CompositeElement as opposed to
		 * a CompositeElementLite. Defaults to false.
		 * @param   {HTMLElement|string}                                    [root]
		 * The root element of the query or id of
		 * the root
		 * @returns {Ext.dom.CompositeElementLite|Ext.dom.CompositeElement}             
		 */
		select? (selector: string | HTMLElement[], composite?: boolean, root?: HTMLElement | string): Ext.dom.CompositeElementLite | Ext.dom.CompositeElement;
		/** 
		 * Serializes a DOM form into a url encoded string
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object} form The form
		 * @returns {string}      The url encoded form
		 */
		serializeForm? (form: object): string;
		/** 
		 * Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
		 * (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
		 * @method
		 * @public (method)
		 * @static
		 * @param   {number|string|object} box   The encoded margins, or an object with top, right,
		 * @param   {string}               units The type of units to add
		 * @returns {string}                     An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		 */
		unitizeBox? (box: number | string | object, units: string): string;
		/** 
		 * Create method to add support for a DomHelper config. Creates
		 * and appends elements/children using document.createElement/appendChild.
		 * This method is used by Sencha Touch for a significant performance gain
		 * in webkit browsers as opposed to using DomQuery which generates HTML
		 * markup and sets it as innerHTML.
		 * 
		 * However, the createElement/appendChild
		 * method of creating elements is significantly slower in all versions of IE
		 * at the time of this writing (6 - 11), so Ext JS should not use this method,
		 * but should instead use DomHelper methods, or Element methods that use
		 * DomHelper under the hood (e.g. createChild).
		 * see https:*fiddle.sencha.com/#fiddle/tj
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} attributes
		 * @param   {object} domNode
		 * @returns {void}              
		 */
		create? (attributes: object, domNode: object): void;
		/** 
		 * @compatible DO NOT USE THIS METHOD VARIANT. It's only compatibility for class [Ext.Base.create](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-create).
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {void|object}  the created instance.
		 */
		create? (): object;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} e
		 * @returns {void}     
		 */
		_onWindowFocusChange? (e: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		_onWindowResize? (): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Layer;
		addInheritableStatics? (members: object): typeof Ext.dom.Element;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 name
		 * @param   {object}                                 member
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Layer;
		addMember? (name: object, member: object): typeof Ext.dom.Element;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} size  The size to set.
		 * @param   {string} units The units to append to a numeric size value.
		 * @returns {string}       
		 */
		addUnits? (size: object, units: string): string;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @returns {Ext.dom.Layer|Ext.dom.Element}  
		 */
		detach? (): typeof Ext.dom.Layer;
		detach? (): typeof Ext.dom.Element;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 fn
		 * @param   {object}                                 scope
		 * @returns {Ext.dom.Layer|Ext.dom.Element|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Layer;
		onExtended? (fn: object, scope: object): typeof Ext.dom.Element;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Query {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Query.html)
	 * Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes
	 * and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
	 * 
	 * DomQuery supports most of the [CSS3 selectors spec](http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors), along with some custom selectors and basic XPath.
	 * 
	 * All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example
	 * `div.foo:nth-child(odd)[@foo=bar].bar:first` would be a perfectly valid selector. Node filters are processed
	 * in the order in which they appear, which allows you to optimize your queries for your document structure.
	 * 
	 * ## Simple Selectors
	 * 
	 * For performance reasons, some query methods accept selectors that are termed as **simple selectors**. A simple
	 * selector is a selector that does not include contextual information about any parent/sibling elements.
	 * 
	 * Some examples of valid simple selectors:
	 * 
	 *    var simple = '.foo'; // Only asking for the class name on the element
	 *    var simple = 'div.bar'; // Only asking for the tag/class name on the element
	 *    var simple = '[href];' // Asking for an attribute on the element.
	 *    var simple = ':not(.foo)'; // Only asking for the non-matches against the class name
	 *    var simple = 'span:first-child'; // Doesn't require any contextual information about the parent node
	 * 
	 * Simple examples of invalid simple selectors:
	 * 
	 *    var notSimple = 'div.foo div.bar'; // Requires matching a parent node by class name
	 *    var notSimple = 'span + div'; //  Requires matching a sibling by tag name
	 * 
	 * ## Element Selectors:
	 * 
	 * - **`*`** any element
	 * - **`E`** an element with the tag E
	 * - **`E F`** All descendent elements of E that have the tag F
	 * - **`E &gt; F`** or **E/F** all direct children elements of E that have the tag F
	 * - **`E + F`** all elements with the tag F that are immediately preceded by an element with the tag E
	 * - **`E ~ F`** all elements with the tag F that are preceded by a sibling element with the tag E
	 * 
	 * ## Attribute Selectors:
	 * 
	 * The use of `@` and quotes are optional. For example, `div[@foo='bar']` is also a valid attribute selector.
	 * 
	 * - **`E[foo]`** has an attribute "foo"
	 * - **`E[foo=bar]`** has an attribute "foo" that equals "bar"
	 * - **`E[foo^=bar]`** has an attribute "foo" that starts with "bar"
	 * - **`E[foo$=bar]`** has an attribute "foo" that ends with "bar"
	 * - **`E[foo*=bar]`** has an attribute "foo" that contains the substring "bar"
	 * - **`E[foo%=2]`** has an attribute "foo" that is evenly divisible by 2
	 * - **`E[foo!=bar]`** attribute "foo" does not equal "bar"
	 * 
	 * ## Pseudo Classes:
	 * 
	 * - **`E:first-child`** E is the first child of its parent
	 * - **`E:last-child`** E is the last child of its parent
	 * - **`E:nth-child(_n_)`** E is the _n_th child of its parent (1 based as per the spec)
	 * - **`E:nth-child(odd)`** E is an odd child of its parent
	 * - **`E:nth-child(even)`** E is an even child of its parent
	 * - **`E:only-child`** E is the only child of its parent
	 * - **`E:checked`** E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
	 * - **`E:first`** the first E in the resultset
	 * - **`E:last`** the last E in the resultset
	 * - **`E:nth(_n_)`** the _n_th E in the resultset (1 based)
	 * - **`E:odd`** shortcut for :nth-child(odd)
	 * - **`E:even`** shortcut for :nth-child(even)
	 * - **`E:contains(foo)`** E's innerHTML contains the substring "foo"
	 * - **`E:nodeValue(foo)`** E contains a textNode with a nodeValue that equals "foo"
	 * - **`E:not(S)`** an E element that does not match simple selector S
	 * - **`E:has(S)`** an E element that has a descendent that matches simple selector S
	 * - **`E:next(S)`** an E element whose next sibling matches simple selector S
	 * - **`E:prev(S)`** an E element whose previous sibling matches simple selector S
	 * - **`E:any(S1|S2|S2)`** an E element which matches any of the simple selectors S1, S2 or S3
	 * - **`E:visible(true)`** an E element which is deeply visible according to [Ext.dom.Element.isVisible](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-isVisible)
	 * 
	 * ## CSS Value Selectors:
	 * 
	 * - **`E{display=none}`** css value "display" that equals "none"
	 * - **`E{display^=none}`** css value "display" that starts with "none"
	 * - **`E{display$=none}`** css value "display" that ends with "none"
	 * - **`E{display*=none}`** css value "display" that contains the substring "none"
	 * - **`E{display%=2}`** css value "display" that is evenly divisible by 2
	 * - **`E{display!=none}`** css value "display" that does not equal "none"
	 * 
	 * ## XML Namespaces:
	 * 
	 * - **`ns|E`** an element with tag E and namespace prefix ns
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                 members    The members to add to this class.
		 * @param   {boolean}                [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Query|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Query;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                 members
		 * @returns {Ext.dom.Query|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Query;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                 members
		 * @returns {Ext.dom.Query|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Query;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                 name
		 * @param   {object}                 member
		 * @returns {Ext.dom.Query|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Query;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                 fn
		 * @param   {object}                 scope
		 * @returns {Ext.dom.Query|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Query;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Shadow {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Shadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html)
	 * Simple class that can provide a shadow effect for any absolutely positioned [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
	 * 
	 * Not meant to be used directly. To apply a shadow to an Element use the
	 * [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow) method.
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                   members    The members to add to this class.
		 * @param   {boolean}                                  [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                  [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Shadow|Ext.dom.Underlay|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Shadow;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Underlay;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                   members
		 * @returns {Ext.dom.Shadow|Ext.dom.Underlay|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Shadow;
		addStatics? (members: object): typeof Ext.dom.Underlay;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                   members
		 * @returns {Ext.dom.Shadow|Ext.dom.Underlay|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Shadow;
		addInheritableStatics? (members: object): typeof Ext.dom.Underlay;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                   name
		 * @param   {object}                                   member
		 * @returns {Ext.dom.Shadow|Ext.dom.Underlay|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Shadow;
		addMember? (name: object, member: object): typeof Ext.dom.Underlay;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                   fn
		 * @param   {object}                                   scope
		 * @returns {Ext.dom.Shadow|Ext.dom.Underlay|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Shadow;
		onExtended? (fn: object, scope: object): typeof Ext.dom.Underlay;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Shim {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html)
	 * Simple class that provides an iframe shim for any absolutely positioned [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to prevent windowed objects from showing through.
	 * 
	 * Not meant to be used directly. Internally shims are applied to Elements using
	 * [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).  Developers should use the
	 * [shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim) config to add shims to their
	 * [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) or set Ext.useShims=true.
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members    The members to add to this class.
		 * @param   {boolean}                                [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                                [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Shim|Ext.dom.Underlay|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Shim;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Underlay;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members
		 * @returns {Ext.dom.Shim|Ext.dom.Underlay|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Shim;
		addStatics? (members: object): typeof Ext.dom.Underlay;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 members
		 * @returns {Ext.dom.Shim|Ext.dom.Underlay|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Shim;
		addInheritableStatics? (members: object): typeof Ext.dom.Underlay;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 name
		 * @param   {object}                                 member
		 * @returns {Ext.dom.Shim|Ext.dom.Underlay|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Shim;
		addMember? (name: object, member: object): typeof Ext.dom.Underlay;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                                 fn
		 * @param   {object}                                 scope
		 * @returns {Ext.dom.Shim|Ext.dom.Underlay|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Shim;
		onExtended? (fn: object, scope: object): typeof Ext.dom.Underlay;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.Underlay {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.Underlay](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Underlay.html)
	 * A class that provides an underlay element which displays behind an absolutely positioned
	 * target element and tracks its size and position. Abstract base class for
	 * [Ext.dom.Shadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html) and [Ext.dom.Shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html)
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                    members    The members to add to this class.
		 * @param   {boolean}                   [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                   [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.Underlay|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.Underlay;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                    members
		 * @returns {Ext.dom.Underlay|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.Underlay;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                    members
		 * @returns {Ext.dom.Underlay|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.Underlay;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                    name
		 * @param   {object}                    member
		 * @returns {Ext.dom.Underlay|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.Underlay;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                    fn
		 * @param   {object}                    scope
		 * @returns {Ext.dom.Underlay|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.Underlay;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.UnderlayPool {
	/** 
	 * @statics
	 * Class static members interface: 
	 * [Ext.dom.UnderlayPool](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.UnderlayPool.html)
	 * Private utility class that manages the internal cache for [Underlays](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html)
	 * and [Shims](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html).
	 */
	interface Statics extends Ext.base.Statics {
		/** 
		 * Add methods / properties to the prototype of this class.
		 * 
		 *    Ext.define('My.awesome.Cat', {
		 *        constructor: function() {
		 *            ...
		 *        }
		 *    });
		 *    
		 *     My.awesome.Cat.addMembers({
		 *         meow: function() {
		 *            alert('Meowww...');
		 *         }
		 *     });
		 *    
		 *     var kitty = new My.awesome.Cat();
		 *     kitty.meow();
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                        members    The members to add to this class.
		 * @param   {boolean}                       [isStatic] Pass `true` if the members are static.
		 * @param   {boolean}                       [privacy]
		 * Pass `true` if the members are private. This
		 * only has meaning in debug mode and only for methods.
		 * @returns {Ext.dom.UnderlayPool|Ext.Base}            
		 */
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.dom.UnderlayPool;
		addMembers? (members: object, isStatic?: boolean, privacy?: boolean): typeof Ext.Base;
		/** 
		 * Add / override static properties of this class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.addStatics({
		 *        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
		 *        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
		 *        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
		 *    });
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @chainable
		 * @param   {object}                        members
		 * @returns {Ext.dom.UnderlayPool|Ext.Base}         this
		 */
		addStatics? (members: object): typeof Ext.dom.UnderlayPool;
		addStatics? (members: object): typeof Ext.Base;
		/** 
		 * Create a new instance of this Class.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        ...
		 *    });
		 *    
		 *    My.cool.Class.create({
		 *        someConfig: true
		 *    });
		 * 
		 * All parameters are passed to the constructor of the class.
		 * @method
		 * @public (method)
		 * @static
		 * @returns {object}  the created instance.
		 */
		create? (): object;
		/** 
		 * Create aliases for existing prototype methods. Example:
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        method1: function() { ... },
		 *        method2: function() { ... }
		 *    });
		 *    
		 *    var test = new My.cool.Class();
		 *    
		 *    My.cool.Class.createAlias({
		 *        method3: 'method1',
		 *        method4: 'method2'
		 *    });
		 *    
		 *    test.method3(); // test.method1()
		 *    
		 *    My.cool.Class.createAlias('method5', 'method3');
		 *    
		 *    test.method5(); // test.method3() -&gt; test.method1()
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @param   {string|object} alias
		 * The new method name, or an object to set multiple aliases. See
		 * [flexSetter](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-flexSetter)
		 * @param   {string|object} origin The original method name
		 * @returns {void}                 
		 */
		createAlias? (alias: string | object, origin: string | object): void;
		/** 
		 * Get the current class' name in string format.
		 * 
		 *    Ext.define('My.cool.Class', {
		 *        constructor: function() {
		 *            alert(this.self.getName()); // alerts 'My.cool.Class'
		 *        }
		 *    });
		 *    
		 *    My.cool.Class.getName(); // 'My.cool.Class'
		 * 
		 * @method
		 * @public (method)
		 * @static
		 * @returns {string}  className
		 */
		getName? (): string;
		/** 
		 * Override members of this class. Overridden methods can be invoked via
		 * [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent).
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * Direct use of this method should be rare. Use [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)
		 * instead:
		 * 
		 *    Ext.define('My.CatOverride', {
		 *        override: 'My.Cat',
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callParent(arguments);
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 * 
		 * The above accomplishes the same result but can be managed by the [Ext.Loader](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Loader.html)
		 * which can properly order the override and its target class and the build process
		 * can determine whether the override is needed based on the required state of the
		 * target class (My.Cat).
		 * @method
		 * @public (method)
		 * @static
		 * @param   {object}   members
		 * The properties to add to this class. This should be
		 * specified as an object literal containing one or more properties.
		 * @returns {Ext.Base}         this class
		 */
		override? (members: object): Ext.Base;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callParent? (args: object): void;
		/** 
		 * @method
		 * @protected (method)
		 * @static
		 * @param   {object} args
		 * @returns {void}        
		 */
		callSuper? (args: object): void;
		/** 
		 * Adds new config properties to this class. This is called for classes when they
		 * are declared, then for any mixins that class may define and finally for any
		 * overrides defined that target the class.
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object}    config
		 * @param   {Ext.Class} [mixinClass] The mixin class if the configs are from a mixin.
		 * @returns {void}                   
		 */
		addConfig? (config: object, mixinClass?: Ext.Class): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                        members
		 * @returns {Ext.dom.UnderlayPool|Ext.Base}         
		 */
		addInheritableStatics? (members: object): typeof Ext.dom.UnderlayPool;
		addInheritableStatics? (members: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                        name
		 * @param   {object}                        member
		 * @returns {Ext.dom.UnderlayPool|Ext.Base}        
		 */
		addMember? (name: object, member: object): typeof Ext.dom.UnderlayPool;
		addMember? (name: object, member: object): typeof Ext.Base;
		/** 
		 * Borrow another class' members to the prototype of this class.
		 * 
		 *    Ext.define('Bank', {
		 *        money: '$$$',
		 *        printMoney: function() {
		 *            alert('$$$$$$$');
		 *        }
		 *    });
		 *    
		 *    Ext.define('Thief', {
		 *        ...
		 *    });
		 *    
		 *    Thief.borrow(Bank, ['money', 'printMoney']);
		 *    
		 *    var steve = new Thief();
		 *    
		 *    alert(steve.money); // alerts '$$$'
		 *    steve.printMoney(); // alerts '$$$$$$$'
		 * 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {Ext.Base}     fromClass The class to borrow members from
		 * @param   {any[]|string} members   The names of the members to borrow
		 * @returns {Ext.Base}               this
		 */
		borrow? (fromClass: Ext.Base, members: any[] | string): Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} config
		 * @returns {void}          
		 */
		extend? (config: object): void;
		/** 
		 * Returns the [`Ext.Configurator`](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Configurator.html) for this class.
		 * @method
		 * @private (method)
		 * @static
		 * @returns {Ext.Configurator}  
		 */
		getConfigurator? (): Ext.Configurator;
		/** 
		 * Used internally by the mixins pre-processor
		 * @method
		 * @private (method)
		 * @static
		 * @param   {object} name
		 * @param   {object} mixinClass
		 * @returns {void}              
		 */
		mixin? (name: object, mixinClass: object): void;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @chainable
		 * @param   {object}                        fn
		 * @param   {object}                        scope
		 * @returns {Ext.dom.UnderlayPool|Ext.Base}       
		 */
		onExtended? (fn: object, scope: object): typeof Ext.dom.UnderlayPool;
		onExtended? (fn: object, scope: object): typeof Ext.Base;
		/** 
		 * @method
		 * @private (method)
		 * @static
		 * @returns {void}  
		 */
		triggerExtended? (): void;
	}
}
declare namespace Ext.dom.ButtonElement.eventsParams.focusmove {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.ButtonElement.focusmove](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.ButtonElement.html#event-focusmove)
	 * The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
	 */
	interface E extends Ext.event.Event {
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _recieved_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element} In current class.
		 * @type {HTMLElement}     In parent class `Ext.event.Event`.
		 * @type {any}             TS compatibility for types in parent class: `Ext.event.Event`.
		 */
		target?: Ext.dom.Element | /* @compatible Ext.event.Event.target[HTMLElement] */ any;
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _lost_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		relatedTarget?: Ext.dom.Element;
	}
}
declare namespace Ext.dom.ButtonElement.methodParams.addListener {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.ButtonElement.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.ButtonElement.html#method-addListener)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.ButtonElement.methodParams.enableShadow {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.ButtonElement.enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.ButtonElement.html#method-enableShadow)
	 * Configuration options for the shadow
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The shadow display mode.  Supports the following
		 * options:
		 * 
		 *    - `'sides'`: Shadow displays on both sides and bottom only<ul>
		 *    <li>`'frame'`: Shadow displays equally on all four sides</li>
		 *    <li>`'drop'`: Traditional bottom-right drop shadow</li>
		 *    <li>`'bottom'`: Shadow is offset to the bottom
		 * 
		 * </li>
		 * </ul>
		 * @configuration
		 * @optional
		 * @default 'sides'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * `true` to animate the shadow while
		 * the element is animating.  By default the shadow will be hidden during animation.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		animate?: boolean;
	}
}
declare namespace Ext.dom.ButtonElement.methodParams.on {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.ButtonElement.on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.ButtonElement.html#method-on)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.CompositeElement.eventsParams.focusmove {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElement.focusmove](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html#event-focusmove)
	 * The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
	 */
	interface E extends Ext.event.Event {
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _recieved_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element} In current class.
		 * @type {HTMLElement}     In parent class `Ext.event.Event`.
		 * @type {any}             TS compatibility for types in parent class: `Ext.event.Event`.
		 */
		target?: Ext.dom.Element | /* @compatible Ext.event.Event.target[HTMLElement] */ any;
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _lost_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		relatedTarget?: Ext.dom.Element;
	}
}
declare namespace Ext.dom.CompositeElement.methodParams.addListener {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElement.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html#method-addListener)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.CompositeElement.methodParams.enableShadow {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElement.enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html#method-enableShadow)
	 * Configuration options for the shadow
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The shadow display mode.  Supports the following
		 * options:
		 * 
		 *    - `'sides'`: Shadow displays on both sides and bottom only<ul>
		 *    <li>`'frame'`: Shadow displays equally on all four sides</li>
		 *    <li>`'drop'`: Traditional bottom-right drop shadow</li>
		 *    <li>`'bottom'`: Shadow is offset to the bottom
		 * 
		 * </li>
		 * </ul>
		 * @configuration
		 * @optional
		 * @default 'sides'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * `true` to animate the shadow while
		 * the element is animating.  By default the shadow will be hidden during animation.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		animate?: boolean;
	}
}
declare namespace Ext.dom.CompositeElement.methodParams.on {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElement.on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html#method-on)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.CompositeElementLite.eventsParams.focusmove {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElementLite.focusmove](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html#event-focusmove)
	 * The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
	 */
	interface E extends Ext.event.Event {
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _recieved_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element} In current class.
		 * @type {HTMLElement}     In parent class `Ext.event.Event`.
		 * @type {any}             TS compatibility for types in parent class: `Ext.event.Event`.
		 */
		target?: Ext.dom.Element | /* @compatible Ext.event.Event.target[HTMLElement] */ any;
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _lost_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		relatedTarget?: Ext.dom.Element;
	}
}
declare namespace Ext.dom.CompositeElementLite.methodParams.addListener {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElementLite.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html#method-addListener)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.CompositeElementLite.methodParams.enableShadow {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElementLite.enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html#method-enableShadow)
	 * Configuration options for the shadow
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The shadow display mode.  Supports the following
		 * options:
		 * 
		 *    - `'sides'`: Shadow displays on both sides and bottom only<ul>
		 *    <li>`'frame'`: Shadow displays equally on all four sides</li>
		 *    <li>`'drop'`: Traditional bottom-right drop shadow</li>
		 *    <li>`'bottom'`: Shadow is offset to the bottom
		 * 
		 * </li>
		 * </ul>
		 * @configuration
		 * @optional
		 * @default 'sides'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * `true` to animate the shadow while
		 * the element is animating.  By default the shadow will be hidden during animation.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		animate?: boolean;
	}
}
declare namespace Ext.dom.CompositeElementLite.methodParams.on {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.CompositeElementLite.on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html#method-on)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.Element.eventsParams.focusmove {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Element.focusmove](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#event-focusmove)
	 * The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
	 */
	interface E extends Ext.event.Event {
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _recieved_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element} In current class.
		 * @type {HTMLElement}     In parent class `Ext.event.Event`.
		 * @type {any}             TS compatibility for types in parent class: `Ext.event.Event`.
		 */
		target?: Ext.dom.Element | /* @compatible Ext.event.Event.target[HTMLElement] */ any;
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _lost_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		relatedTarget?: Ext.dom.Element;
	}
}
declare namespace Ext.dom.Element.methodParams.addListener {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Element.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-addListener)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.Element.methodParams.enableShadow {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Element.enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow)
	 * Configuration options for the shadow
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The shadow display mode.  Supports the following
		 * options:
		 * 
		 *    - `'sides'`: Shadow displays on both sides and bottom only<ul>
		 *    <li>`'frame'`: Shadow displays equally on all four sides</li>
		 *    <li>`'drop'`: Traditional bottom-right drop shadow</li>
		 *    <li>`'bottom'`: Shadow is offset to the bottom
		 * 
		 * </li>
		 * </ul>
		 * @configuration
		 * @optional
		 * @default 'sides'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * `true` to animate the shadow while
		 * the element is animating.  By default the shadow will be hidden during animation.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		animate?: boolean;
	}
}
declare namespace Ext.dom.Element.methodParams.on {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Element.on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-on)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.Fly.eventsParams.focusmove {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Fly.focusmove](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html#event-focusmove)
	 * The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
	 */
	interface E extends Ext.event.Event {
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _recieved_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element} In current class.
		 * @type {HTMLElement}     In parent class `Ext.event.Event`.
		 * @type {any}             TS compatibility for types in parent class: `Ext.event.Event`.
		 */
		target?: Ext.dom.Element | /* @compatible Ext.event.Event.target[HTMLElement] */ any;
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _lost_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		relatedTarget?: Ext.dom.Element;
	}
}
declare namespace Ext.dom.Fly.methodParams.addListener {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Fly.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html#method-addListener)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.Fly.methodParams.enableShadow {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Fly.enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html#method-enableShadow)
	 * Configuration options for the shadow
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The shadow display mode.  Supports the following
		 * options:
		 * 
		 *    - `'sides'`: Shadow displays on both sides and bottom only<ul>
		 *    <li>`'frame'`: Shadow displays equally on all four sides</li>
		 *    <li>`'drop'`: Traditional bottom-right drop shadow</li>
		 *    <li>`'bottom'`: Shadow is offset to the bottom
		 * 
		 * </li>
		 * </ul>
		 * @configuration
		 * @optional
		 * @default 'sides'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * `true` to animate the shadow while
		 * the element is animating.  By default the shadow will be hidden during animation.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		animate?: boolean;
	}
}
declare namespace Ext.dom.Fly.methodParams.on {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Fly.on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html#method-on)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.Layer.eventsParams.focusmove {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Layer.focusmove](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html#event-focusmove)
	 * The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
	 */
	interface E extends Ext.event.Event {
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _recieved_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element} In current class.
		 * @type {HTMLElement}     In parent class `Ext.event.Event`.
		 * @type {any}             TS compatibility for types in parent class: `Ext.event.Event`.
		 */
		target?: Ext.dom.Element | /* @compatible Ext.event.Event.target[HTMLElement] */ any;
		/** 
		 * The [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) element which _lost_ focus.
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		relatedTarget?: Ext.dom.Element;
	}
}
declare namespace Ext.dom.Layer.methodParams.addListener {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Layer.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html#method-addListener)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.Layer.methodParams.enableShadow {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Layer.enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html#method-enableShadow)
	 * Configuration options for the shadow
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The shadow display mode.  Supports the following
		 * options:
		 * 
		 *    - `'sides'`: Shadow displays on both sides and bottom only<ul>
		 *    <li>`'frame'`: Shadow displays equally on all four sides</li>
		 *    <li>`'drop'`: Traditional bottom-right drop shadow</li>
		 *    <li>`'bottom'`: Shadow is offset to the bottom
		 * 
		 * </li>
		 * </ul>
		 * @configuration
		 * @optional
		 * @default 'sides'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * `true` to animate the shadow while
		 * the element is animating.  By default the shadow will be hidden during animation.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		animate?: boolean;
	}
}
declare namespace Ext.dom.Layer.methodParams.on {
	/** 
	 * @params
	 * Config interface to call method: 
	 * [Ext.dom.Layer.on](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html#method-on)
	 * An object containing handler configuration.
	 * 
	 * **Note:** The options object will also be passed as the last argument to every
	 * event handler.
	 * 
	 * This object may contain any of the following properties:
	 */
	interface Options extends Ext.base.Params {
		/** 
		 * The scope (`this` reference) in which the handler function is executed. **If omitted,
		 *   defaults to the object which fired the event.**
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		scope?: object;
		/** 
		 * The number of milliseconds to delay the invocation of the handler after the event
		 *   fires.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		delay?: number;
		/** 
		 * True to add a handler to handle just the next firing of the event, and then remove
		 *   itself.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		single?: boolean;
		/** 
		 * Causes the handler to be scheduled to run in an [Ext.util.DelayedTask](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.DelayedTask.html) delayed
		 *   by the specified number of milliseconds. If the event fires again within that time,
		 *   the original handler is _not_ invoked, but the new handler is scheduled in its place.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		buffer?: number;
		/** 
		 * Causes the handler to be scheduled to run at the next
		 *   [animation frame event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Function.html#method-requestAnimationFrame). If the
		 *   event fires again before that time, the handler is not rescheduled - the handler
		 *   will only be called once when the next animation frame is fired, with the last set
		 *   of arguments passed.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		onFrame?: number;
		/** 
		 * Only call the handler if the event was fired on the target Observable, _not_ if the
		 *   event was bubbled up from a child Observable.
		 * @configuration
		 * @optional
		 * @type {Ext.util.Observable}
		 */
		target?: Ext.util.Observable;
		/** 
		 * **This option is only valid for listeners bound to [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html).**
		 *   The name of a Component property which references an [element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
		 *   to add a listener to.
		 * 
		 *   This option is useful during Component construction to add DOM event listeners to
		 *   elements of [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) which will exist only after the
		 *   Component is rendered.
		 * 
		 *   For example, to add a click listener to a Panel's body:
		 * 
		 *      var panel = new Ext.panel.Panel({
		 *          title: 'The title',
		 *          listeners: {
		 *              click: this.handlePanelClick,
		 *              element: 'body'
		 *          }
		 *      });
		 * 
		 * In order to remove listeners attached using the element, you'll need to reference
		 * the element itself as seen below.
		 * 
		 *     panel.body.un(...)
		 * 
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		element?: string;
		/** 
		 * A simple selector to filter the event target or look for a descendant of the target.
		 * 
		 *   The "delegate" option is only available on [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances (or
		 *   when attaching a listener to a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) via a Component using the
		 *   element option).
		 * 
		 *   See the _delegate_ example below.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		delegate?: string;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopPropagation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopPropagation) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopPropagation?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [preventDefault](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-preventDefault) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		preventDefault?: boolean;
		/** 
		 * **This option is only valid for listeners bound to [Elements](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).**
		 *   `true` to call [stopEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#method-stopEvent) on the event object
		 *   before firing the handler.
		 * @configuration
		 * @optional
		 * @type {boolean}
		 */
		stopEvent?: boolean;
		/** 
		 * Optional arguments to pass to the handler function. Any additional arguments
		 *   passed to [fireEvent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-fireEvent) will be appended
		 *   to these arguments.
		 * @configuration
		 * @optional
		 * @type {any[]}
		 */
		args?: any[];
		/** 
		 * When specified as `true`, the function returns a `destroyable` object. An object
		 *   which implements the `destroy` method which removes all listeners added in this call.
		 *   This syntax can be a helpful shortcut to using [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un); particularly when
		 *   removing multiple listeners.  _NOTE_ - not compatible when using the _element_
		 *   option.  See [un](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-un) for the proper syntax for removing listeners added using the
		 *   _element_ config.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		destroyable?: boolean;
		/** 
		 * An optional numeric priority that determines the order in which event handlers
		 *   are run. Event handlers with no priority will be run as if they had a priority
		 *   of 0. Handlers with a higher priority will be prioritized to run sooner than
		 *   those with a lower priority.  Negative numbers can be used to set a priority
		 *   lower than the default. Internally, the framework uses a range of 1000 or
		 *   greater, and -1000 or lesser for handlers that are intended to run before or
		 *   after all others, so it is recommended to stay within the range of -999 to 999
		 *   when setting the priority of event handlers in application-level code.
		 *   A priority must be an integer to be valid.  Fractional values are reserved for
		 *   internal framework use.
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		priority?: number;
		/** 
		 * A legacy option that is provided for backward compatibility.
		 *   It is recommended to use the `priority` option instead.  Available options are:
		 * 
		 * - `'before'`: equal to a priority of `100`
		 * - `'current'`: equal to a priority of `0` or default priority
		 * - `'after'`: equal to a priority of `-100`
		 * @configuration
		 * @optional
		 * @default 'current'
		 * @type {string}
		 */
		order?: string;
	}
}
declare namespace Ext.dom.CompositeElement {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.dom.CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The methods from
	 * these classes will be performed on all the elements in this collection.
	 * 
	 * All methods return _this_ and can be chained.
	 * 
	 * Usage:
	 * 
	 *     var els = Ext.select("#some-el div.some-class", true);
	 *     // or select directly from an existing element
	 *     var el = Ext.get('some-el');
	 *     el.select('div.some-class', true);
	 *    
	 *     els.setWidth(100); // all elements become 100 width
	 *     els.hide(true); // all elements fade out and hide
	 *     // or
	 *     els.setWidth(100).hide(true);
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		bubbleEvents?: object;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                           config
		 * @returns {Ext.dom.CompositeElement.Statics}        this
		 */
		initConfig? (config: object): Ext.dom.CompositeElement.Statics;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                    name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                           [value] The value to set for the name parameter.
		 * @returns {Ext.dom.CompositeElement.Statics}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.CompositeElement.Statics;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.CompositeElement.Statics}  
		 */
		statics? (): Ext.dom.CompositeElement.Statics;
	}
}
declare namespace Ext.dom.CompositeElementLite {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.dom.CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The
	 * methods from these classes will be performed on all the elements in this collection.
	 * 
	 * Example:
	 * 
	 *    var els = Ext.select("#some-el div.some-class");
	 *    // or select directly from an existing element
	 *    var el = Ext.get('some-el');
	 *    el.select('div.some-class');
	 *    
	 *    els.setWidth(100); // all elements become 100 width
	 *    els.hide(true); // all elements fade out and hide
	 *    // or
	 *    els.setWidth(100).hide(true);
	 * 
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * @configuration
		 * @optional
		 * @type {object}
		 */
		bubbleEvents?: object;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                               config
		 * @returns {Ext.dom.CompositeElementLite.Statics}        this
		 */
		initConfig? (config: object): Ext.dom.CompositeElementLite.Statics;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}                        name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                               [value] The value to set for the name parameter.
		 * @returns {Ext.dom.CompositeElementLite.Statics}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.CompositeElementLite.Statics;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.CompositeElementLite.Statics}  
		 */
		statics? (): Ext.dom.CompositeElementLite.Statics;
	}
}
declare namespace Ext.dom.Layer {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.dom.Layer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html)
	 * An extended [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object that supports a shadow and shim
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * CSS class to add to the element
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		cls?: string;
		/** 
		 * False to disable constrain to viewport.
		 * @configuration
		 * @optional
		 * @default true
		 * @type {boolean}
		 */
		constrain?: boolean;
		/** 
		 * DomHelper object config to create element with.
		 * @configuration
		 * @optional
		 * @default {tag: 'div', cls: 'x-layer'}
		 * @type {object}
		 */
		dh?: object;
		/** 
		 * A String which specifies how this Layer will be hidden.
		 * Values may be:
		 * 
		 * - `'display'` : The Component will be hidden using the `display: none` style.
		 * - `'visibility'` : The Component will be hidden using the `visibility: hidden` style.
		 * - `'offsets'` : The Component will be hidden by absolutely positioning it out of the visible area
		 *   of the document. This is useful when a hidden Component must maintain measurable dimensions.
		 *   Hiding using `display` results in a Component having zero dimensions.
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		hideMode?: string;
		/** 
		 * True to automatically create an [Ext.Shadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html), or a string indicating the
		 * shadow's display [Ext.Shadow.mode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html#cfg-mode). False to disable the shadow.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {string|boolean}
		 */
		shadow?: string | boolean;
		/** 
		 * Number of pixels to offset the shadow
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		shadowOffset?: number;
		/** 
		 * True to automatically create a [Ext.dom.Shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html).
		 * @configuration
		 * @optional
		 * @default false
		 * @type {string|boolean}
		 */
		shim?: string | boolean;
		/** 
		 * Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>
		 * to use css style <tt>'display:none;'</tt> to hide the Layer.
		 * @configuration
		 * @optional
		 * @default false
		 * @type {boolean}
		 */
		useDisplay?: boolean;
		/** 
		 * The CSS class name to add in order to hide this Layer if this layer
		 * is configured with [`hideMode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html#cfg-hideMode): 'asclass'`
		 * @configuration
		 * @optional
		 * @type {string}
		 */
		visibilityCls?: string;
		/** 
		 * Starting z-index.
		 * @configuration
		 * @optional
		 * @default 11000
		 * @type {number}
		 */
		zindex?: number;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                config
		 * @returns {Ext.dom.Layer.Statics}        this
		 */
		initConfig? (config: object): Ext.dom.Layer.Statics;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}         name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Layer.Statics}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Layer.Statics;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Layer.Statics}  
		 */
		statics? (): Ext.dom.Layer.Statics;
	}
}
declare namespace Ext.dom.Shadow {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.dom.Shadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html)
	 * Simple class that can provide a shadow effect for any absolutely positioned [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).
	 * 
	 * Not meant to be used directly. To apply a shadow to an Element use the
	 * [enableShadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShadow) method.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The shadow display mode.  Supports the following options:
		 * 
		 * - sides : Shadow displays on both sides and bottom only
		 * - frame : Shadow displays equally on all four sides
		 * - drop : Traditional bottom-right drop shadow
		 * @configuration
		 * @optional
		 * @default 'drop'
		 * @type {string}
		 */
		mode?: string;
		/** 
		 * The number of pixels to offset the shadow from the element
		 * @configuration
		 * @optional
		 * @default 4
		 * @type {number}
		 */
		offset?: number;
		/** 
		 * The target element
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		target?: Ext.dom.Element;
		/** 
		 * The CSS z-index to use for this underlay.  Defaults to the z-index of [target](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Underlay.html#cfg-target).
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		zIndex?: number;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                 config
		 * @returns {Ext.dom.Shadow.Statics}        this
		 */
		initConfig? (config: object): Ext.dom.Shadow.Statics;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}          name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                 [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Shadow.Statics}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Shadow.Statics;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Shadow.Statics}  
		 */
		statics? (): Ext.dom.Shadow.Statics;
	}
}
declare namespace Ext.dom.Shim {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.dom.Shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html)
	 * Simple class that provides an iframe shim for any absolutely positioned [Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to prevent windowed objects from showing through.
	 * 
	 * Not meant to be used directly. Internally shims are applied to Elements using
	 * [enableShim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-enableShim).  Developers should use the
	 * [shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Floating.html#cfg-shim) config to add shims to their
	 * [Components](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Component.html) or set Ext.useShims=true.
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The target element
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		target?: Ext.dom.Element;
		/** 
		 * The CSS z-index to use for this underlay.  Defaults to the z-index of [target](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Underlay.html#cfg-target).
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		zIndex?: number;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}               config
		 * @returns {Ext.dom.Shim.Statics}        this
		 */
		initConfig? (config: object): Ext.dom.Shim.Statics;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}        name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}               [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Shim.Statics}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Shim.Statics;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Shim.Statics}  
		 */
		statics? (): Ext.dom.Shim.Statics;
	}
}
declare namespace Ext.dom.Underlay {
	/** 
	 * @configurations
	 * Config interface to create class: 
	 * [Ext.dom.Underlay](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Underlay.html)
	 * A class that provides an underlay element which displays behind an absolutely positioned
	 * target element and tracks its size and position. Abstract base class for
	 * [Ext.dom.Shadow](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shadow.html) and [Ext.dom.Shim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Shim.html)
	 */
	interface Cfg extends Ext.base.Configs {
		/** 
		 * The target element
		 * @configuration
		 * @optional
		 * @type {Ext.dom.Element}
		 */
		target?: Ext.dom.Element;
		/** 
		 * The CSS z-index to use for this underlay.  Defaults to the z-index of [target](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Underlay.html#cfg-target).
		 * @configuration
		 * @optional
		 * @type {number}
		 */
		zIndex?: number;
		/** 
		 * Call the original method that was previously overridden with [override](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#static-method-override)
		 * 
		 *    Ext.define('My.Cat', {
		 *        constructor: function() {
		 *            alert("I'm a cat!");
		 *        }
		 *    });
		 *    
		 *    My.Cat.override({
		 *        constructor: function() {
		 *            alert("I'm going to be a cat!");
		 *    
		 *            this.callOverridden();
		 *    
		 *            alert("Meeeeoooowwww");
		 *        }
		 *    });
		 *    
		 *    var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
		 *                              // alerts "I'm a cat!"
		 *                              // alerts "Meeeeoooowwww"
		 * 
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callOverridden(arguments)`
		 * @returns {object}                Returns the result of calling the overridden method
		 */
		callOverridden? (args: any[] | IArguments): object;
		/** 
		 * Call the "parent" method of the current method. That is the method previously
		 * overridden by derivation or by an override (see [Ext.define](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-define)).
		 * 
		 *     Ext.define('My.Base', {
		 *         constructor: function (x) {
		 *             this.x = x;
		 *         },
		 *    
		 *         statics: {
		 *             method: function (x) {
		 *                 return x;
		 *             }
		 *         }
		 *     });
		 *    
		 *     Ext.define('My.Derived', {
		 *         extend: 'My.Base',
		 *    
		 *         constructor: function () {
		 *             this.callParent([21]);
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // alerts 21
		 * 
		 * This can be used with an override as follows:
		 * 
		 *     Ext.define('My.DerivedOverride', {
		 *         override: 'My.Derived',
		 *    
		 *         constructor: function (x) {
		 *             this.callParent([x*2]); // calls original My.Derived constructor
		 *         }
		 *     });
		 *    
		 *     var obj = new My.Derived();
		 *    
		 *     alert(obj.x);  // now alerts 42
		 * 
		 * This also works with static and private methods.
		 * 
		 *     Ext.define('My.Derived2', {
		 *         extend: 'My.Base',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Base.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Base.method(10));     // alerts 10
		 *     alert(My.Derived2.method(10)); // alerts 20
		 * 
		 * Lastly, it also works with overridden static methods.
		 * 
		 *     Ext.define('My.Derived2Override', {
		 *         override: 'My.Derived2',
		 *    
		 *         // privates: {
		 *         statics: {
		 *             method: function (x) {
		 *                 return this.callParent([x*2]); // calls My.Derived2.method
		 *             }
		 *         }
		 *     });
		 *    
		 *     alert(My.Derived2.method(10); // now alerts 40
		 * 
		 * To override a method and replace it and also call the superclass method, use
		 * [callSuper](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callSuper). This is often done to patch a method to fix a bug.
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callParent(arguments)`
		 * @returns {object}                Returns the result of calling the parent method
		 */
		callParent? (args: any[] | IArguments): object;
		/** 
		 * This method is used by an **override** to call the superclass method but
		 * bypass any overridden method. This is often done to "patch" a method that
		 * contains a bug but for whatever reason cannot be fixed directly.
		 * 
		 * Consider:
		 * 
		 *     Ext.define('Ext.some.Class', {
		 *         method: function () {
		 *             console.log('Good');
		 *         }
		 *     });
		 *    
		 *     Ext.define('Ext.some.DerivedClass', {
		 *         extend: 'Ext.some.Class',
		 *    
		 *         method: function () {
		 *             console.log('Bad');
		 *    
		 *             // ... logic but with a bug ...
		 *    
		 *             this.callParent();
		 *         }
		 *     });
		 * 
		 * To patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an
		 * override:
		 * 
		 *     Ext.define('App.patches.DerivedClass', {
		 *         override: 'Ext.some.DerivedClass',
		 *    
		 *         method: function () {
		 *             console.log('Fixed');
		 *    
		 *             // ... logic but with bug fixed ...
		 *    
		 *             this.callSuper();
		 *         }
		 *     });
		 * 
		 * The patch method cannot use [callParent](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#method-callParent) to call the superclass
		 * `method` since that would call the overridden method containing the bug. In
		 * other words, the above patch would only produce "Fixed" then "Good" in the
		 * console log, whereas, using `callParent` would produce "Fixed" then "Bad"
		 * then "Good".
		 * @method
		 * @protected (method)
		 * @param   {any[]|IArguments} args
		 * The arguments, either an array or the `arguments` object
		 * from the current method, for example: `this.callSuper(arguments)`
		 * @returns {object}                Returns the result of calling the superclass method
		 */
		callSuper? (args: any[] | IArguments): object;
		/** 
		 * This method is called to cleanup an object and its resources. After calling
		 * this method, the object should not be used any further.
		 * @method
		 * @public (method)
		 * @returns {void}  
		 */
		destroy? (): void;
		/** 
		 * Returns a specified config property value. If the name parameter is not passed,
		 * all current configuration options will be returned as key value pairs.
		 * @method
		 * @public (method)
		 * @param   {string}  [name] The name of the config property to get.
		 * @param   {boolean} [peek] `true` to peek at the raw value without calling the getter.
		 * @returns {object}         The config property value.
		 */
		getConfig? (name?: string, peek?: boolean): object;
		/** 
		 * Returns the initial configuration passed to the constructor when
		 * instantiating this class.
		 * 
		 * Given this example [Ext.button.Button](https://docs.sencha.com/extjs/6.0.1/classic/Ext.button.Button.html) definition and instance:
		 * 
		 *    Ext.define('MyApp.view.Button', {
		 *        extend: 'Ext.button.Button',
		 *        xtype: 'mybutton',
		 *    
		 *        scale: 'large',
		 *        enableToggle: true
		 *    });
		 *    
		 *    var btn = Ext.create({
		 *        xtype: 'mybutton',
		 *        renderTo: Ext.getBody(),
		 *        text: 'Test Button'
		 *    });
		 * 
		 * Calling `btn.getInitialConfig()` would return an object including the config
		 * options passed to the `create` method:
		 * 
		 *    xtype: 'mybutton',
		 *    renderTo: // The document body itself
		 *    text: 'Test Button'
		 * 
		 * Calling `btn.getInitialConfig('text')`returns **'Test Button'**.
		 * @method
		 * @public (method)
		 * @param   {string}     [name] Name of the config option to return.
		 * @returns {object|any} 
		 * The full config object or a single config value
		 * when `name` parameter specified.
		 */
		getInitialConfig? (name?: string): object | any;
		/** 
		 * Initialize configuration for this class. a typical example:
		 * 
		 *    Ext.define('My.awesome.Class', {
		 *        // The default config
		 *        config: {
		 *            name: 'Awesome',
		 *            isAwesome: true
		 *        },
		 *    
		 *        constructor: function(config) {
		 *            this.initConfig(config);
		 *        }
		 *    });
		 *    
		 *    var awesome = new My.awesome.Class({
		 *        name: 'Super Awesome'
		 *    });
		 *    
		 *    alert(awesome.getName()); // 'Super Awesome'
		 * 
		 * @method
		 * @protected (method)
		 * @chainable
		 * @param   {object}                   config
		 * @returns {Ext.dom.Underlay.Statics}        this
		 */
		initConfig? (config: object): Ext.dom.Underlay.Statics;
		/** 
		 * Sets a single/multiple configuration options.
		 * @method
		 * @public (method)
		 * @chainable
		 * @param   {string|object}            name    The name of the property to set, or a set of key value pairs to set.
		 * @param   {object}                   [value] The value to set for the name parameter.
		 * @returns {Ext.dom.Underlay.Statics}         this
		 */
		setConfig? (name: string | object, value?: object): Ext.dom.Underlay.Statics;
		/** 
		 * Get the reference to the class from which this object was instantiated. Note that unlike [self](https://docs.sencha.com/extjs/6.0.1/classic/Ext.Base.html#property-self),
		 * `this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what
		 * `this` points to during run-time
		 * 
		 *    Ext.define('My.Cat', {
		 *        statics: {
		 *            totalCreated: 0,
		 *            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
		 *        },
		 *    
		 *        constructor: function() {
		 *            var statics = this.statics();
		 *    
		 *            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
		 *                                            // equivalent to: My.Cat.speciesName
		 *    
		 *            alert(this.self.speciesName);   // dependent on 'this'
		 *    
		 *            statics.totalCreated++;
		 *        },
		 *    
		 *        clone: function() {
		 *            var cloned = new this.self();   // dependent on 'this'
		 *    
		 *            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
		 *    
		 *            return cloned;
		 *        }
		 *    });
		 *    
		 *    
		 *    Ext.define('My.SnowLeopard', {
		 *        extend: 'My.Cat',
		 *    
		 *        statics: {
		 *            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
		 *        },
		 *    
		 *        constructor: function() {
		 *            this.callParent();
		 *        }
		 *    });
		 *    
		 *    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
		 *    
		 *    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
		 *    
		 *    var clone = snowLeopard.clone();
		 *    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'
		 *    alert(clone.groupName);                 // alerts 'Cat'
		 *    
		 *    alert(My.Cat.totalCreated);             // alerts 3
		 * 
		 * @method
		 * @protected (method)
		 * @returns {Ext.dom.Underlay.Statics}  
		 */
		statics? (): Ext.dom.Underlay.Statics;
	}
}
declare namespace Ext.dom.CompositeElement {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.dom.CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The methods from
	 * these classes will be performed on all the elements in this collection.
	 * 
	 * All methods return _this_ and can be chained.
	 * 
	 * Usage:
	 * 
	 *     var els = Ext.select("#some-el div.some-class", true);
	 *     // or select directly from an existing element
	 *     var el = Ext.get('some-el');
	 *     el.select('div.some-class', true);
	 *    
	 *     els.setWidth(100); // all elements become 100 width
	 *     els.hide(true); // all elements fade out and hide
	 *     // or
	 *     els.setWidth(100).hide(true);
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMActivate? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when an attribute has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMAttrModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the character data has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMCharacterDataModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML focus event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusIn? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML blur event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusOut? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node has been added as a child of another node.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInserted? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being inserted into a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInsertedIntoDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a descendant node of the element is removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemoved? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being removed from a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemovedFromDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the subtree is modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMSubtreeModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an object/image is stopped from loading before completely loaded.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		abort? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element loses focus either via the pointing device or by tabbing navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		blur? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a control loses the input focus and its value has been modified since gaining focus.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		change? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		click? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a right click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		contextmenu? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse double click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		dblclick? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a double tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		doubletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when an object/image/frame cannot be loaded properly.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		error? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element receives focus either via the pointing device or by tab navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		focus? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when focus is moved _within_ an element.
		 * @event
		 * @param   {Ext.event.Event|Ext.dom.CompositeElement.eventsParams.focusmove.E} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}                                                       t     The target of the event.
		 * @param   {object}                                                            eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}                                                              
		 */
		focusmove? (e: Ext.event.Event | Ext.dom.CompositeElement.eventsParams.focusmove.E, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keydown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keydown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keypress is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keypress? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keyup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keyup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the user agent finishes loading all content within the element. Only supported by window, frames,
		 * objects and images.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		load? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		longpress? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a mousedown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousedown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse enters the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseenter? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse leaves the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseleave? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mousemove is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousemove? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseout is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseout? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseover is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseover? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
		 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		painted? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is pinching (the touch must move for this to be fired).
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinch? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a pinch has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a pinch has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchstart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is reset.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		reset? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor
		 * a Element's size.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `resize` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		resize? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is rotation (the touch must move for this to be fired).
		 * When listening to this, ensure you know about the [Ext.event.Event.angle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-angle) and [Ext.event.Event.rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-rotation)
		 * properties in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotate? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a rotation event has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotateend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a rotation has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotatestart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a document view is scrolled.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		scroll? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a user selects some text in a text field, including input and textarea.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		select? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a single tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		singletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is submitted.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		submit? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a swipe
		 * When listening to this, ensure you know about the [Ext.event.Event.direction](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-direction) property in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		swipe? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		taphold? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when the user agent removes all content from a window or frame. For elements, it fires when the target
		 * element or any of its content has been removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		unload? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
	}
}
declare namespace Ext.dom.CompositeElementLite {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.dom.CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html)
	 * This class encapsulates a _collection_ of DOM elements, providing methods to filter members, or to perform collective
	 * actions upon the whole set.
	 * 
	 * Although they are not listed, this class supports all of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html). The
	 * methods from these classes will be performed on all the elements in this collection.
	 * 
	 * Example:
	 * 
	 *    var els = Ext.select("#some-el div.some-class");
	 *    // or select directly from an existing element
	 *    var el = Ext.get('some-el');
	 *    el.select('div.some-class');
	 *    
	 *    els.setWidth(100); // all elements become 100 width
	 *    els.hide(true); // all elements fade out and hide
	 *    // or
	 *    els.setWidth(100).hide(true);
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMActivate? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when an attribute has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMAttrModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the character data has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMCharacterDataModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML focus event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusIn? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML blur event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusOut? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node has been added as a child of another node.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInserted? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being inserted into a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInsertedIntoDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a descendant node of the element is removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemoved? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being removed from a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemovedFromDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the subtree is modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMSubtreeModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an object/image is stopped from loading before completely loaded.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		abort? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element loses focus either via the pointing device or by tabbing navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		blur? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a control loses the input focus and its value has been modified since gaining focus.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		change? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		click? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a right click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		contextmenu? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse double click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		dblclick? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a double tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		doubletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when an object/image/frame cannot be loaded properly.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		error? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element receives focus either via the pointing device or by tab navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		focus? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when focus is moved _within_ an element.
		 * @event
		 * @param   {Ext.event.Event|Ext.dom.CompositeElementLite.eventsParams.focusmove.E} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}                                                           t     The target of the event.
		 * @param   {object}                                                                eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}                                                                  
		 */
		focusmove? (e: Ext.event.Event | Ext.dom.CompositeElementLite.eventsParams.focusmove.E, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keydown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keydown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keypress is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keypress? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keyup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keyup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the user agent finishes loading all content within the element. Only supported by window, frames,
		 * objects and images.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		load? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		longpress? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a mousedown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousedown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse enters the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseenter? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse leaves the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseleave? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mousemove is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousemove? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseout is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseout? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseover is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseover? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
		 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		painted? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is pinching (the touch must move for this to be fired).
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinch? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a pinch has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a pinch has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchstart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is reset.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		reset? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor
		 * a Element's size.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `resize` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		resize? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is rotation (the touch must move for this to be fired).
		 * When listening to this, ensure you know about the [Ext.event.Event.angle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-angle) and [Ext.event.Event.rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-rotation)
		 * properties in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotate? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a rotation event has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotateend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a rotation has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotatestart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a document view is scrolled.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		scroll? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a user selects some text in a text field, including input and textarea.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		select? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a single tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		singletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is submitted.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		submit? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a swipe
		 * When listening to this, ensure you know about the [Ext.event.Event.direction](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-direction) property in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		swipe? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		taphold? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when the user agent removes all content from a window or frame. For elements, it fires when the target
		 * element or any of its content has been removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		unload? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
	}
}
declare namespace Ext.dom.Element {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html)
	 * Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
	 * 
	 * **Note:** The events included in this Class are the ones we've found to be the most commonly used. Many events are
	 * not listed here due to the expedient rate of change across browsers. For a more comprehensive list, please visit the
	 * following resources:
	 * 
	 * - [Mozilla Event Reference Guide](https://developer.mozilla.org/en-US/docs/Web/Events)
	 * - [W3 Pointer Events](http://www.w3.org/TR/pointerevents/)
	 * - [W3 Touch Events](http://www.w3.org/TR/touch-events/)
	 * - [W3 DOM 2 Events](http://www.w3.org/TR/DOM-Level-2-Events/)
	 * - [W3 DOM 3 Events](http://www.w3.org/TR/DOM-Level-3-Events/)
	 * 
	 * ## Usage
	 * 
	 *    // by id
	 *    var el = Ext.get("my-div");
	 *    
	 *    // by DOM element reference
	 *    var el = Ext.get(myDivElement);
	 * 
	 * ## Selecting Descendant Elements
	 * 
	 * [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances can be used to select descendant nodes using CSS selectors.
	 * There are 3 methods that can be used for this purpose, each with a slightly different
	 * twist:
	 * 
	 * - [query](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-query)
	 * - [selectNode](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-selectNode)
	 * - [select](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html#method-select)
	 * 
	 * These methods can accept any valid CSS selector since they all use
	 * [querySelectorAll](http://www.w3.org/TR/css3-selectors/) under the hood. The primary
	 * difference between these three methods is their return type:
	 * 
	 * To get an array of HTMLElement instances matching the selector '.foo' use the query
	 * method:
	 * 
	 *    element.query('.foo');
	 * 
	 * This can easily be transformed into an array of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances by setting
	 * the `asDom` parameter to `false`:
	 * 
	 *    element.query('.foo', false);
	 * 
	 * If the desired result is only the first matching HTMLElement use the selectNode method:
	 * 
	 *    element.selectNode('.foo');
	 * 
	 * Once again, the dom node can be wrapped in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) by setting the `asDom`
	 * parameter to `false`:
	 * 
	 *    element.selectNode('.foo', false);
	 * 
	 * The `select` method is used when the desired return type is a [CompositeElementLite](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElementLite.html) or a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html).  These are collections of elements that can be operated on as a
	 * group using any of the methods of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html).  The only difference between the two
	 * is that CompositeElementLite is a collection of HTMLElement instances, while
	 * CompositeElement is a collection of [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instances.  To retrieve a
	 * CompositeElementLite that represents a collection of HTMLElements for selector '.foo':
	 * 
	 *    element.select('.foo');
	 * 
	 * For a [CompositeElement](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.CompositeElement.html) simply pass `true` as the
	 * `composite` parameter:
	 * 
	 *    element.select('.foo', true);
	 * 
	 * The query selection methods can be used even if you don't have a [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) to
	 * start with For example to select an array of all HTMLElements in the document that match the
	 * selector '.foo', simply wrap the document object in an [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) instance using
	 * [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly):
	 * 
	 *    Ext.fly(document).query('.foo');
	 * 
	 * # Animations
	 * 
	 * When an element is manipulated, by default there is no animation.
	 * 
	 *    var el = Ext.get("my-div");
	 *    
	 *    // no animation
	 *    el.setWidth(100);
	 * 
	 * specified as boolean (true) for default animation effects.
	 * 
	 *    // default animation
	 *    el.setWidth(100, true);
	 * 
	 * To configure the effects, an object literal with animation options to use as the Element animation configuration
	 * object can also be specified. Note that the supported Element animation configuration options are a subset of the
	 * [Ext.fx.Anim](https://docs.sencha.com/extjs/6.0.1/classic/Ext.fx.Anim.html) animation options specific to Fx effects. The supported Element animation configuration options
	 * are:
	 * 
	 *    Option    Default   Description
	 *    --------- --------  ---------------------------------------------
	 *    duration  350       The duration of the animation in milliseconds
	 *    easing    easeOut   The easing method
	 *    callback  none      A function to execute when the anim completes
	 *    scope     this      The scope (this) of the callback function
	 * 
	 * Usage:
	 * 
	 *    // Element animation options object
	 *    var opt = {
	 *        duration: 1000,
	 *        easing: 'elasticIn',
	 *        callback: this.foo,
	 *        scope: this
	 *    };
	 *    // animation with some options set
	 *    el.setWidth(100, opt);
	 * 
	 * The Element animation object being used for the animation will be set on the options object as "anim", which allows
	 * you to stop or manipulate the animation. Here is an example:
	 * 
	 *    // using the "anim" property to get the Anim object
	 *    if(opt.anim.isAnimated()){
	 *        opt.anim.stop();
	 *    }
	 * 
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMActivate? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when an attribute has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMAttrModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the character data has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMCharacterDataModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML focus event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusIn? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML blur event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusOut? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node has been added as a child of another node.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInserted? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being inserted into a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInsertedIntoDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a descendant node of the element is removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemoved? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being removed from a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemovedFromDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the subtree is modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMSubtreeModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an object/image is stopped from loading before completely loaded.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		abort? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element loses focus either via the pointing device or by tabbing navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		blur? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a control loses the input focus and its value has been modified since gaining focus.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		change? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		click? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a right click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		contextmenu? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse double click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		dblclick? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a double tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		doubletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when an object/image/frame cannot be loaded properly.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		error? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element receives focus either via the pointing device or by tab navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		focus? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when focus is moved _within_ an element.
		 * @event
		 * @param   {Ext.event.Event|Ext.dom.Element.eventsParams.focusmove.E} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}                                              t     The target of the event.
		 * @param   {object}                                                   eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}                                                     
		 */
		focusmove? (e: Ext.event.Event | Ext.dom.Element.eventsParams.focusmove.E, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keydown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keydown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keypress is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keypress? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keyup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keyup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the user agent finishes loading all content within the element. Only supported by window, frames,
		 * objects and images.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		load? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		longpress? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a mousedown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousedown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse enters the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseenter? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse leaves the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseleave? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mousemove is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousemove? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseout is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseout? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseover is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseover? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
		 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		painted? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is pinching (the touch must move for this to be fired).
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinch? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a pinch has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a pinch has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchstart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is reset.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		reset? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor
		 * a Element's size.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `resize` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		resize? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is rotation (the touch must move for this to be fired).
		 * When listening to this, ensure you know about the [Ext.event.Event.angle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-angle) and [Ext.event.Event.rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-rotation)
		 * properties in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotate? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a rotation event has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotateend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a rotation has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotatestart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a document view is scrolled.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		scroll? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a user selects some text in a text field, including input and textarea.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		select? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a single tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		singletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is submitted.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		submit? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a swipe
		 * When listening to this, ensure you know about the [Ext.event.Event.direction](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-direction) property in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		swipe? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		taphold? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when the user agent removes all content from a window or frame. For elements, it fires when the target
		 * element or any of its content has been removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		unload? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
	}
}
declare namespace Ext.dom.Fly {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.dom.Fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Fly.html)
	 * A flyweight [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) that can be dynamically attached to a DOM node.
	 * In general this class should not be instantiated directly.  Use [Ext.fly](https://docs.sencha.com/extjs/6.0.1/classic/Ext.html#method-fly)
	 * to create and retrieve Fly instances.
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMActivate? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when an attribute has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMAttrModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the character data has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMCharacterDataModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML focus event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusIn? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML blur event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusOut? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node has been added as a child of another node.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInserted? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being inserted into a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInsertedIntoDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a descendant node of the element is removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemoved? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being removed from a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemovedFromDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the subtree is modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMSubtreeModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an object/image is stopped from loading before completely loaded.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		abort? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element loses focus either via the pointing device or by tabbing navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		blur? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a control loses the input focus and its value has been modified since gaining focus.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		change? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		click? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a right click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		contextmenu? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse double click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		dblclick? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a double tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		doubletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when an object/image/frame cannot be loaded properly.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		error? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element receives focus either via the pointing device or by tab navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		focus? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when focus is moved _within_ an element.
		 * @event
		 * @param   {Ext.event.Event|Ext.dom.Fly.eventsParams.focusmove.E} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}                                          t     The target of the event.
		 * @param   {object}                                               eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}                                                 
		 */
		focusmove? (e: Ext.event.Event | Ext.dom.Fly.eventsParams.focusmove.E, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keydown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keydown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keypress is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keypress? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keyup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keyup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the user agent finishes loading all content within the element. Only supported by window, frames,
		 * objects and images.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		load? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		longpress? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a mousedown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousedown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse enters the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseenter? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse leaves the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseleave? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mousemove is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousemove? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseout is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseout? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseover is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseover? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
		 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		painted? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is pinching (the touch must move for this to be fired).
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinch? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a pinch has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a pinch has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchstart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is reset.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		reset? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor
		 * a Element's size.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `resize` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		resize? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is rotation (the touch must move for this to be fired).
		 * When listening to this, ensure you know about the [Ext.event.Event.angle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-angle) and [Ext.event.Event.rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-rotation)
		 * properties in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotate? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a rotation event has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotateend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a rotation has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotatestart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a document view is scrolled.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		scroll? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a user selects some text in a text field, including input and textarea.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		select? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a single tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		singletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is submitted.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		submit? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a swipe
		 * When listening to this, ensure you know about the [Ext.event.Event.direction](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-direction) property in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		swipe? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		taphold? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when the user agent removes all content from a window or frame. For elements, it fires when the target
		 * element or any of its content has been removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		unload? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
	}
}
declare namespace Ext.dom.Layer {
	/** 
	 * @events
	 * Config interface for class listeners: 
	 * [Ext.dom.Layer](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Layer.html)
	 * An extended [Ext.dom.Element](https://docs.sencha.com/extjs/6.0.1/classic/Ext.dom.Element.html) object that supports a shadow and shim
	 */
	interface Events extends Ext.base.Events {
		/** 
		 * Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMActivate? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when an attribute has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMAttrModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the character data has been modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMCharacterDataModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML focus event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusIn? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Similar to HTML blur event, but can be applied to any focusable element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMFocusOut? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node has been added as a child of another node.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInserted? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being inserted into a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeInsertedIntoDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a descendant node of the element is removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemoved? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when a node is being removed from a document.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMNodeRemovedFromDocument? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Where supported. Fires when the subtree is modified.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		DOMSubtreeModified? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an object/image is stopped from loading before completely loaded.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		abort? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element loses focus either via the pointing device or by tabbing navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		blur? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a control loses the input focus and its value has been modified since gaining focus.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		change? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		click? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a right click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		contextmenu? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouse double click is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		dblclick? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a double tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		doubletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when an object/image/frame cannot be loaded properly.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		error? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when an element receives focus either via the pointing device or by tab navigation.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		focus? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when focus is moved _within_ an element.
		 * @event
		 * @param   {Ext.event.Event|Ext.dom.Layer.eventsParams.focusmove.E} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}                                            t     The target of the event.
		 * @param   {object}                                                 eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}                                                   
		 */
		focusmove? (e: Ext.event.Event | Ext.dom.Layer.eventsParams.focusmove.E, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keydown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keydown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keypress is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keypress? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a keyup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		keyup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the user agent finishes loading all content within the element. Only supported by window, frames,
		 * objects and images.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		load? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		longpress? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a mousedown is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousedown? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse enters the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseenter? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when the mouse leaves the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseleave? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mousemove is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mousemove? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseout is detected with the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseout? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseover is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseover? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a mouseup is detected within the element.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		mouseup? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
		 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		painted? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is pinching (the touch must move for this to be fired).
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinch? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a pinch has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a pinch has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		pinchstart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is reset.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		reset? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor
		 * a Element's size.
		 * 
		 * **Note:** This event is not available to be used with event delegation. Instead `resize` only fires if you explicitly
		 * add at least one listener to it, for performance reasons.
		 * @event
		 * @param   {Ext.dom.Element} _this The component instance.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		resize? (_this: Ext.dom.Element, eOpts: object): void;
		/** 
		 * Fires continuously when there is rotation (the touch must move for this to be fired).
		 * When listening to this, ensure you know about the [Ext.event.Event.angle](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-angle) and [Ext.event.Event.rotation](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-rotation)
		 * properties in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotate? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a rotation event has ended.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotateend? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fired once when a rotation has started.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		rotatestart? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a document view is scrolled.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		scroll? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when a user selects some text in a text field, including input and textarea.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		select? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a single tap.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		singletap? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when a form is submitted.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		submit? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
		/** 
		 * Fires when there is a swipe
		 * When listening to this, ensure you know about the [Ext.event.Event.direction](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html#property-direction) property in the `event` object.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		swipe? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when you touch and hold still for more than 1 second.
		 * @event
		 * @param   {Ext.event.Event} event   The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) event encapsulating the DOM event.
		 * @param   {HTMLElement}     node    The target of the event.
		 * @param   {object}          options The options object passed to [Ext.mixin.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.mixin.Observable.html#method-addListener).
		 * @param   {object}          eOpts   The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		taphold? (event: Ext.event.Event, node: HTMLElement, options: object, eOpts: object): void;
		/** 
		 * Fires when the user agent removes all content from a window or frame. For elements, it fires when the target
		 * element or any of its content has been removed.
		 * @event
		 * @param   {Ext.event.Event} e     The [Ext.event.Event](https://docs.sencha.com/extjs/6.0.1/classic/Ext.event.Event.html) encapsulating the DOM event.
		 * @param   {HTMLElement}     t     The target of the event.
		 * @param   {object}          eOpts The options object passed to [Ext.util.Observable.addListener](https://docs.sencha.com/extjs/6.0.1/classic/Ext.util.Observable.html#method-addListener).
		 * @returns {void}            
		 */
		unload? (e: Ext.event.Event, t: HTMLElement, eOpts: object): void;
	}
}
